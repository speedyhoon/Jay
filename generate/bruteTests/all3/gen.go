package main

import (
	"bytes"
	"fmt"
	"github.com/speedyhoon/rando/types"
	"os"
)

func main() {
	const perFile = 1000
	buf, jayTest := bytes.NewBuffer(nil), bytes.NewBuffer(nil)
	resetBuffers(buf, jayTest)

	var i uint
	for _, a := range types.SupportedList() {
		for _, b := range types.SupportedList() {
			for _, c := range types.SupportedList() {
				if a == b && a == c {
					// Identical field types are already covered in other test directories.
					continue
				}

				if i%perFile == 0 && i >= 1 {
					writeFiles(buf, jayTest, i/perFile-1)
				}

				_, _ = fmt.Fprintf(buf, `
type Fuzz%d struct {
	One   %s
	Two   %s
	Three %s
}
`, i, a, b, c)
				_, _ = fmt.Fprintf(jayTest, `
func TestFuzz%[1]d(t *testing.T) {
	var expected, actual Fuzz%[1]d
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz%[1]d{}, expected)
	require.Equal(t, Fuzz%[1]d{}, actual)

	actual = Fuzz%[1]d{
		One: %[2]s,
		Two: %[3]s,
		Three: %[4]s,
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}
`, i, types.TypeRandomFunc(a), types.TypeRandomFunc(b), types.TypeRandomFunc(c))
				i++
			}
		}
	}

	writeFiles(buf, jayTest, i/perFile)
}

func writeFiles(buf, jayTest *bytes.Buffer, index uint) {
	const perm = 0666
	err := os.WriteFile(fmt.Sprintf("pkg_%02d.go", index), buf.Bytes(), perm)
	if err != nil {
		panic(err)
	}
	err = os.WriteFile(fmt.Sprintf("jay_%02d_test.go", index), jayTest.Bytes(), perm)
	if err != nil {
		panic(err)
	}
	resetBuffers(buf, jayTest)
}

func resetBuffers(buf, jayTest *bytes.Buffer){
	buf.Reset()
	jayTest.Reset()

	buf.WriteString(`// Code generated by gen.go; DO NOT EDIT.

package main

import "time"
`)
	jayTest.WriteString(`// Code generated by gen.go; DO NOT EDIT.

package main

import (
	"testing"

	"github.com/speedyhoon/rando"
	"github.com/stretchr/testify/require"
)
`)
}
