package generate

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func Test_bytesRequired(t *testing.T) {
	for input, expected := range map[uint]uint8{
		0:             0,
		1:             1,
		maxUint8 - 1:  1,
		maxUint8:      1,
		maxUint8 + 1:  2,
		maxUint16 - 1: 2,
		maxUint16:     2,
		maxUint16 + 1: 3,
		maxUint24 - 1: 3,
		maxUint24:     3,
		maxUint24 + 1: 4,
		maxUint32 - 1: 4,
		maxUint32:     4,
		maxUint32 + 1: 5,
		maxUint40 - 1: 5,
		maxUint40:     5,
		maxUint40 + 1: 6,
		maxUint48 - 1: 6,
		maxUint48:     6,
		maxUint48 + 1: 7,
		maxUint56 - 1: 7,
		maxUint56:     7,
	} {
		output := bytesRequired(input)
		assert.Equalf(t, expected, output, "input: %d, expected: %d, output: %d", input, expected, output)
	}
}

// Test Option.ErrVarName uses an existing locally defined error variable in another file.
func Test_ErrNameLocal(t *testing.T) {
	input := []byte(`package main

type Boat struct {
	Price int8
	Discount byte
}`)
	expected := `// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

func (b Boat) MarshalJ() []byte {
	return []byte{byte(b.Price), b.Discount}
}

func (b *Boat) UnmarshalJ(y []byte) error {
	if len(y) != 2 {
		return errBufLen
	}
	b.Price = int8(y[0])
	b.Discount = y[1]
	return nil
}
`

	opt := Option{ErrVarName: "errBufLen"}
	src, err := opt.ProcessFiles(input)
	assert.NoError(t, err)
	assert.Len(t, src, 1)
	assert.Equal(t, expected, string(src[0].Src))
}

// Test Option.ErrVarName uses an existing publicly defined error variable.
func Test_ErrNameExternal(t *testing.T) {
	input := []byte(`package main

type Boat struct {
	Price int8
	Discount byte
}`)
	expected := `// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "animal"

func (b Boat) MarshalJ() []byte {
	return []byte{byte(b.Price), b.Discount}
}

func (b *Boat) UnmarshalJ(y []byte) error {
	if len(y) != 2 {
		return animal.errBufLen
	}
	b.Price = int8(y[0])
	b.Discount = y[1]
	return nil
}
`

	opt := Option{ErrVarName: "animal.errBufLen"}
	src, err := opt.ProcessFiles(input)
	assert.NoError(t, err)
	assert.Len(t, src, 1)
	assert.Equal(t, expected, string(src[0].Src))
}
