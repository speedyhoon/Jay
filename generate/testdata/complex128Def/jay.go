// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (o *One) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteComplex128(b, complex128(o.One))
	return
}

func (o *One) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	o.One = cpx(jay.ReadComplex128(b))
	return nil
}

func (t *Two) MarshalJ() (b []byte) {
	b = make([]byte, 32)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:], complex128(t.Two))
	return
}

func (t *Two) UnmarshalJ(b []byte) error {
	if len(b) != 32 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:]))
	return nil
}

func (t *Three) MarshalJ() (b []byte) {
	b = make([]byte, 48)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:32], complex128(t.Two))
	jay.WriteComplex128(b[32:], complex128(t.Three))
	return
}

func (t *Three) UnmarshalJ(b []byte) error {
	if len(b) != 48 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:32]))
	t.Three = cpx(jay.ReadComplex128(b[32:]))
	return nil
}

func (f *Four) MarshalJ() (b []byte) {
	b = make([]byte, 64)
	jay.WriteComplex128(b[:16], complex128(f.One))
	jay.WriteComplex128(b[16:32], complex128(f.Two))
	jay.WriteComplex128(b[32:48], complex128(f.Three))
	jay.WriteComplex128(b[48:], complex128(f.Four))
	return
}

func (f *Four) UnmarshalJ(b []byte) error {
	if len(b) != 64 {
		return jay.ErrUnexpectedEOB
	}
	f.One = cpx(jay.ReadComplex128(b[:16]))
	f.Two = cpx(jay.ReadComplex128(b[16:32]))
	f.Three = cpx(jay.ReadComplex128(b[32:48]))
	f.Four = cpx(jay.ReadComplex128(b[48:]))
	return nil
}

func (f *Five) MarshalJ() (b []byte) {
	b = make([]byte, 80)
	jay.WriteComplex128(b[:16], complex128(f.One))
	jay.WriteComplex128(b[16:32], complex128(f.Two))
	jay.WriteComplex128(b[32:48], complex128(f.Three))
	jay.WriteComplex128(b[48:64], complex128(f.Four))
	jay.WriteComplex128(b[64:], complex128(f.Five))
	return
}

func (f *Five) UnmarshalJ(b []byte) error {
	if len(b) != 80 {
		return jay.ErrUnexpectedEOB
	}
	f.One = cpx(jay.ReadComplex128(b[:16]))
	f.Two = cpx(jay.ReadComplex128(b[16:32]))
	f.Three = cpx(jay.ReadComplex128(b[32:48]))
	f.Four = cpx(jay.ReadComplex128(b[48:64]))
	f.Five = cpx(jay.ReadComplex128(b[64:]))
	return nil
}

func (s *Six) MarshalJ() (b []byte) {
	b = make([]byte, 96)
	jay.WriteComplex128(b[:16], complex128(s.One))
	jay.WriteComplex128(b[16:32], complex128(s.Two))
	jay.WriteComplex128(b[32:48], complex128(s.Three))
	jay.WriteComplex128(b[48:64], complex128(s.Four))
	jay.WriteComplex128(b[64:80], complex128(s.Five))
	jay.WriteComplex128(b[80:], complex128(s.Six))
	return
}

func (s *Six) UnmarshalJ(b []byte) error {
	if len(b) != 96 {
		return jay.ErrUnexpectedEOB
	}
	s.One = cpx(jay.ReadComplex128(b[:16]))
	s.Two = cpx(jay.ReadComplex128(b[16:32]))
	s.Three = cpx(jay.ReadComplex128(b[32:48]))
	s.Four = cpx(jay.ReadComplex128(b[48:64]))
	s.Five = cpx(jay.ReadComplex128(b[64:80]))
	s.Six = cpx(jay.ReadComplex128(b[80:]))
	return nil
}

func (s *Seven) MarshalJ() (b []byte) {
	b = make([]byte, 112)
	jay.WriteComplex128(b[:16], complex128(s.One))
	jay.WriteComplex128(b[16:32], complex128(s.Two))
	jay.WriteComplex128(b[32:48], complex128(s.Three))
	jay.WriteComplex128(b[48:64], complex128(s.Four))
	jay.WriteComplex128(b[64:80], complex128(s.Five))
	jay.WriteComplex128(b[80:96], complex128(s.Six))
	jay.WriteComplex128(b[96:], complex128(s.Seven))
	return
}

func (s *Seven) UnmarshalJ(b []byte) error {
	if len(b) != 112 {
		return jay.ErrUnexpectedEOB
	}
	s.One = cpx(jay.ReadComplex128(b[:16]))
	s.Two = cpx(jay.ReadComplex128(b[16:32]))
	s.Three = cpx(jay.ReadComplex128(b[32:48]))
	s.Four = cpx(jay.ReadComplex128(b[48:64]))
	s.Five = cpx(jay.ReadComplex128(b[64:80]))
	s.Six = cpx(jay.ReadComplex128(b[80:96]))
	s.Seven = cpx(jay.ReadComplex128(b[96:]))
	return nil
}

func (e *Eight) MarshalJ() (b []byte) {
	b = make([]byte, 128)
	jay.WriteComplex128(b[:16], complex128(e.One))
	jay.WriteComplex128(b[16:32], complex128(e.Two))
	jay.WriteComplex128(b[32:48], complex128(e.Three))
	jay.WriteComplex128(b[48:64], complex128(e.Four))
	jay.WriteComplex128(b[64:80], complex128(e.Five))
	jay.WriteComplex128(b[80:96], complex128(e.Six))
	jay.WriteComplex128(b[96:112], complex128(e.Seven))
	jay.WriteComplex128(b[112:], complex128(e.Eight))
	return
}

func (e *Eight) UnmarshalJ(b []byte) error {
	if len(b) != 128 {
		return jay.ErrUnexpectedEOB
	}
	e.One = cpx(jay.ReadComplex128(b[:16]))
	e.Two = cpx(jay.ReadComplex128(b[16:32]))
	e.Three = cpx(jay.ReadComplex128(b[32:48]))
	e.Four = cpx(jay.ReadComplex128(b[48:64]))
	e.Five = cpx(jay.ReadComplex128(b[64:80]))
	e.Six = cpx(jay.ReadComplex128(b[80:96]))
	e.Seven = cpx(jay.ReadComplex128(b[96:112]))
	e.Eight = cpx(jay.ReadComplex128(b[112:]))
	return nil
}

func (n *Nine) MarshalJ() (b []byte) {
	b = make([]byte, 144)
	jay.WriteComplex128(b[:16], complex128(n.One))
	jay.WriteComplex128(b[16:32], complex128(n.Two))
	jay.WriteComplex128(b[32:48], complex128(n.Three))
	jay.WriteComplex128(b[48:64], complex128(n.Four))
	jay.WriteComplex128(b[64:80], complex128(n.Five))
	jay.WriteComplex128(b[80:96], complex128(n.Six))
	jay.WriteComplex128(b[96:112], complex128(n.Seven))
	jay.WriteComplex128(b[112:128], complex128(n.Eight))
	jay.WriteComplex128(b[128:], complex128(n.Nine))
	return
}

func (n *Nine) UnmarshalJ(b []byte) error {
	if len(b) != 144 {
		return jay.ErrUnexpectedEOB
	}
	n.One = cpx(jay.ReadComplex128(b[:16]))
	n.Two = cpx(jay.ReadComplex128(b[16:32]))
	n.Three = cpx(jay.ReadComplex128(b[32:48]))
	n.Four = cpx(jay.ReadComplex128(b[48:64]))
	n.Five = cpx(jay.ReadComplex128(b[64:80]))
	n.Six = cpx(jay.ReadComplex128(b[80:96]))
	n.Seven = cpx(jay.ReadComplex128(b[96:112]))
	n.Eight = cpx(jay.ReadComplex128(b[112:128]))
	n.Nine = cpx(jay.ReadComplex128(b[128:]))
	return nil
}

func (t *Ten) MarshalJ() (b []byte) {
	b = make([]byte, 160)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:32], complex128(t.Two))
	jay.WriteComplex128(b[32:48], complex128(t.Three))
	jay.WriteComplex128(b[48:64], complex128(t.Four))
	jay.WriteComplex128(b[64:80], complex128(t.Five))
	jay.WriteComplex128(b[80:96], complex128(t.Six))
	jay.WriteComplex128(b[96:112], complex128(t.Seven))
	jay.WriteComplex128(b[112:128], complex128(t.Eight))
	jay.WriteComplex128(b[128:144], complex128(t.Nine))
	jay.WriteComplex128(b[144:], complex128(t.Ten))
	return
}

func (t *Ten) UnmarshalJ(b []byte) error {
	if len(b) != 160 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:32]))
	t.Three = cpx(jay.ReadComplex128(b[32:48]))
	t.Four = cpx(jay.ReadComplex128(b[48:64]))
	t.Five = cpx(jay.ReadComplex128(b[64:80]))
	t.Six = cpx(jay.ReadComplex128(b[80:96]))
	t.Seven = cpx(jay.ReadComplex128(b[96:112]))
	t.Eight = cpx(jay.ReadComplex128(b[112:128]))
	t.Nine = cpx(jay.ReadComplex128(b[128:144]))
	t.Ten = cpx(jay.ReadComplex128(b[144:]))
	return nil
}

func (e *Eleven) MarshalJ() (b []byte) {
	b = make([]byte, 176)
	jay.WriteComplex128(b[:16], complex128(e.One))
	jay.WriteComplex128(b[16:32], complex128(e.Two))
	jay.WriteComplex128(b[32:48], complex128(e.Three))
	jay.WriteComplex128(b[48:64], complex128(e.Four))
	jay.WriteComplex128(b[64:80], complex128(e.Five))
	jay.WriteComplex128(b[80:96], complex128(e.Six))
	jay.WriteComplex128(b[96:112], complex128(e.Seven))
	jay.WriteComplex128(b[112:128], complex128(e.Eight))
	jay.WriteComplex128(b[128:144], complex128(e.Nine))
	jay.WriteComplex128(b[144:160], complex128(e.Ten))
	jay.WriteComplex128(b[160:], complex128(e.Eleven))
	return
}

func (e *Eleven) UnmarshalJ(b []byte) error {
	if len(b) != 176 {
		return jay.ErrUnexpectedEOB
	}
	e.One = cpx(jay.ReadComplex128(b[:16]))
	e.Two = cpx(jay.ReadComplex128(b[16:32]))
	e.Three = cpx(jay.ReadComplex128(b[32:48]))
	e.Four = cpx(jay.ReadComplex128(b[48:64]))
	e.Five = cpx(jay.ReadComplex128(b[64:80]))
	e.Six = cpx(jay.ReadComplex128(b[80:96]))
	e.Seven = cpx(jay.ReadComplex128(b[96:112]))
	e.Eight = cpx(jay.ReadComplex128(b[112:128]))
	e.Nine = cpx(jay.ReadComplex128(b[128:144]))
	e.Ten = cpx(jay.ReadComplex128(b[144:160]))
	e.Eleven = cpx(jay.ReadComplex128(b[160:]))
	return nil
}

func (t *Twelve) MarshalJ() (b []byte) {
	b = make([]byte, 192)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:32], complex128(t.Two))
	jay.WriteComplex128(b[32:48], complex128(t.Three))
	jay.WriteComplex128(b[48:64], complex128(t.Four))
	jay.WriteComplex128(b[64:80], complex128(t.Five))
	jay.WriteComplex128(b[80:96], complex128(t.Six))
	jay.WriteComplex128(b[96:112], complex128(t.Seven))
	jay.WriteComplex128(b[112:128], complex128(t.Eight))
	jay.WriteComplex128(b[128:144], complex128(t.Nine))
	jay.WriteComplex128(b[144:160], complex128(t.Ten))
	jay.WriteComplex128(b[160:176], complex128(t.Eleven))
	jay.WriteComplex128(b[176:], complex128(t.Twelve))
	return
}

func (t *Twelve) UnmarshalJ(b []byte) error {
	if len(b) != 192 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:32]))
	t.Three = cpx(jay.ReadComplex128(b[32:48]))
	t.Four = cpx(jay.ReadComplex128(b[48:64]))
	t.Five = cpx(jay.ReadComplex128(b[64:80]))
	t.Six = cpx(jay.ReadComplex128(b[80:96]))
	t.Seven = cpx(jay.ReadComplex128(b[96:112]))
	t.Eight = cpx(jay.ReadComplex128(b[112:128]))
	t.Nine = cpx(jay.ReadComplex128(b[128:144]))
	t.Ten = cpx(jay.ReadComplex128(b[144:160]))
	t.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	t.Twelve = cpx(jay.ReadComplex128(b[176:]))
	return nil
}

func (t *Thirteen) MarshalJ() (b []byte) {
	b = make([]byte, 208)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:32], complex128(t.Two))
	jay.WriteComplex128(b[32:48], complex128(t.Three))
	jay.WriteComplex128(b[48:64], complex128(t.Four))
	jay.WriteComplex128(b[64:80], complex128(t.Five))
	jay.WriteComplex128(b[80:96], complex128(t.Six))
	jay.WriteComplex128(b[96:112], complex128(t.Seven))
	jay.WriteComplex128(b[112:128], complex128(t.Eight))
	jay.WriteComplex128(b[128:144], complex128(t.Nine))
	jay.WriteComplex128(b[144:160], complex128(t.Ten))
	jay.WriteComplex128(b[160:176], complex128(t.Eleven))
	jay.WriteComplex128(b[176:192], complex128(t.Twelve))
	jay.WriteComplex128(b[192:], complex128(t.Thirteen))
	return
}

func (t *Thirteen) UnmarshalJ(b []byte) error {
	if len(b) != 208 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:32]))
	t.Three = cpx(jay.ReadComplex128(b[32:48]))
	t.Four = cpx(jay.ReadComplex128(b[48:64]))
	t.Five = cpx(jay.ReadComplex128(b[64:80]))
	t.Six = cpx(jay.ReadComplex128(b[80:96]))
	t.Seven = cpx(jay.ReadComplex128(b[96:112]))
	t.Eight = cpx(jay.ReadComplex128(b[112:128]))
	t.Nine = cpx(jay.ReadComplex128(b[128:144]))
	t.Ten = cpx(jay.ReadComplex128(b[144:160]))
	t.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	t.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	t.Thirteen = cpx(jay.ReadComplex128(b[192:]))
	return nil
}

func (f *Fourteen) MarshalJ() (b []byte) {
	b = make([]byte, 224)
	jay.WriteComplex128(b[:16], complex128(f.One))
	jay.WriteComplex128(b[16:32], complex128(f.Two))
	jay.WriteComplex128(b[32:48], complex128(f.Three))
	jay.WriteComplex128(b[48:64], complex128(f.Four))
	jay.WriteComplex128(b[64:80], complex128(f.Five))
	jay.WriteComplex128(b[80:96], complex128(f.Six))
	jay.WriteComplex128(b[96:112], complex128(f.Seven))
	jay.WriteComplex128(b[112:128], complex128(f.Eight))
	jay.WriteComplex128(b[128:144], complex128(f.Nine))
	jay.WriteComplex128(b[144:160], complex128(f.Ten))
	jay.WriteComplex128(b[160:176], complex128(f.Eleven))
	jay.WriteComplex128(b[176:192], complex128(f.Twelve))
	jay.WriteComplex128(b[192:208], complex128(f.Thirteen))
	jay.WriteComplex128(b[208:], complex128(f.Fourteen))
	return
}

func (f *Fourteen) UnmarshalJ(b []byte) error {
	if len(b) != 224 {
		return jay.ErrUnexpectedEOB
	}
	f.One = cpx(jay.ReadComplex128(b[:16]))
	f.Two = cpx(jay.ReadComplex128(b[16:32]))
	f.Three = cpx(jay.ReadComplex128(b[32:48]))
	f.Four = cpx(jay.ReadComplex128(b[48:64]))
	f.Five = cpx(jay.ReadComplex128(b[64:80]))
	f.Six = cpx(jay.ReadComplex128(b[80:96]))
	f.Seven = cpx(jay.ReadComplex128(b[96:112]))
	f.Eight = cpx(jay.ReadComplex128(b[112:128]))
	f.Nine = cpx(jay.ReadComplex128(b[128:144]))
	f.Ten = cpx(jay.ReadComplex128(b[144:160]))
	f.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	f.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	f.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	f.Fourteen = cpx(jay.ReadComplex128(b[208:]))
	return nil
}

func (f *Fifteen) MarshalJ() (b []byte) {
	b = make([]byte, 240)
	jay.WriteComplex128(b[:16], complex128(f.One))
	jay.WriteComplex128(b[16:32], complex128(f.Two))
	jay.WriteComplex128(b[32:48], complex128(f.Three))
	jay.WriteComplex128(b[48:64], complex128(f.Four))
	jay.WriteComplex128(b[64:80], complex128(f.Five))
	jay.WriteComplex128(b[80:96], complex128(f.Six))
	jay.WriteComplex128(b[96:112], complex128(f.Seven))
	jay.WriteComplex128(b[112:128], complex128(f.Eight))
	jay.WriteComplex128(b[128:144], complex128(f.Nine))
	jay.WriteComplex128(b[144:160], complex128(f.Ten))
	jay.WriteComplex128(b[160:176], complex128(f.Eleven))
	jay.WriteComplex128(b[176:192], complex128(f.Twelve))
	jay.WriteComplex128(b[192:208], complex128(f.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(f.Fourteen))
	jay.WriteComplex128(b[224:], complex128(f.Fifteen))
	return
}

func (f *Fifteen) UnmarshalJ(b []byte) error {
	if len(b) != 240 {
		return jay.ErrUnexpectedEOB
	}
	f.One = cpx(jay.ReadComplex128(b[:16]))
	f.Two = cpx(jay.ReadComplex128(b[16:32]))
	f.Three = cpx(jay.ReadComplex128(b[32:48]))
	f.Four = cpx(jay.ReadComplex128(b[48:64]))
	f.Five = cpx(jay.ReadComplex128(b[64:80]))
	f.Six = cpx(jay.ReadComplex128(b[80:96]))
	f.Seven = cpx(jay.ReadComplex128(b[96:112]))
	f.Eight = cpx(jay.ReadComplex128(b[112:128]))
	f.Nine = cpx(jay.ReadComplex128(b[128:144]))
	f.Ten = cpx(jay.ReadComplex128(b[144:160]))
	f.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	f.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	f.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	f.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	f.Fifteen = cpx(jay.ReadComplex128(b[224:]))
	return nil
}

func (s *Sixteen) MarshalJ() (b []byte) {
	b = make([]byte, 256)
	jay.WriteComplex128(b[:16], complex128(s.One))
	jay.WriteComplex128(b[16:32], complex128(s.Two))
	jay.WriteComplex128(b[32:48], complex128(s.Three))
	jay.WriteComplex128(b[48:64], complex128(s.Four))
	jay.WriteComplex128(b[64:80], complex128(s.Five))
	jay.WriteComplex128(b[80:96], complex128(s.Six))
	jay.WriteComplex128(b[96:112], complex128(s.Seven))
	jay.WriteComplex128(b[112:128], complex128(s.Eight))
	jay.WriteComplex128(b[128:144], complex128(s.Nine))
	jay.WriteComplex128(b[144:160], complex128(s.Ten))
	jay.WriteComplex128(b[160:176], complex128(s.Eleven))
	jay.WriteComplex128(b[176:192], complex128(s.Twelve))
	jay.WriteComplex128(b[192:208], complex128(s.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(s.Fourteen))
	jay.WriteComplex128(b[224:240], complex128(s.Fifteen))
	jay.WriteComplex128(b[240:], complex128(s.Sixteen))
	return
}

func (s *Sixteen) UnmarshalJ(b []byte) error {
	if len(b) != 256 {
		return jay.ErrUnexpectedEOB
	}
	s.One = cpx(jay.ReadComplex128(b[:16]))
	s.Two = cpx(jay.ReadComplex128(b[16:32]))
	s.Three = cpx(jay.ReadComplex128(b[32:48]))
	s.Four = cpx(jay.ReadComplex128(b[48:64]))
	s.Five = cpx(jay.ReadComplex128(b[64:80]))
	s.Six = cpx(jay.ReadComplex128(b[80:96]))
	s.Seven = cpx(jay.ReadComplex128(b[96:112]))
	s.Eight = cpx(jay.ReadComplex128(b[112:128]))
	s.Nine = cpx(jay.ReadComplex128(b[128:144]))
	s.Ten = cpx(jay.ReadComplex128(b[144:160]))
	s.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	s.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	s.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	s.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	s.Fifteen = cpx(jay.ReadComplex128(b[224:240]))
	s.Sixteen = cpx(jay.ReadComplex128(b[240:]))
	return nil
}

func (s *Seventeen) MarshalJ() (b []byte) {
	b = make([]byte, 272)
	jay.WriteComplex128(b[:16], complex128(s.One))
	jay.WriteComplex128(b[16:32], complex128(s.Two))
	jay.WriteComplex128(b[32:48], complex128(s.Three))
	jay.WriteComplex128(b[48:64], complex128(s.Four))
	jay.WriteComplex128(b[64:80], complex128(s.Five))
	jay.WriteComplex128(b[80:96], complex128(s.Six))
	jay.WriteComplex128(b[96:112], complex128(s.Seven))
	jay.WriteComplex128(b[112:128], complex128(s.Eight))
	jay.WriteComplex128(b[128:144], complex128(s.Nine))
	jay.WriteComplex128(b[144:160], complex128(s.Ten))
	jay.WriteComplex128(b[160:176], complex128(s.Eleven))
	jay.WriteComplex128(b[176:192], complex128(s.Twelve))
	jay.WriteComplex128(b[192:208], complex128(s.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(s.Fourteen))
	jay.WriteComplex128(b[224:240], complex128(s.Fifteen))
	jay.WriteComplex128(b[240:256], complex128(s.Sixteen))
	jay.WriteComplex128(b[256:], complex128(s.Seventeen))
	return
}

func (s *Seventeen) UnmarshalJ(b []byte) error {
	if len(b) != 272 {
		return jay.ErrUnexpectedEOB
	}
	s.One = cpx(jay.ReadComplex128(b[:16]))
	s.Two = cpx(jay.ReadComplex128(b[16:32]))
	s.Three = cpx(jay.ReadComplex128(b[32:48]))
	s.Four = cpx(jay.ReadComplex128(b[48:64]))
	s.Five = cpx(jay.ReadComplex128(b[64:80]))
	s.Six = cpx(jay.ReadComplex128(b[80:96]))
	s.Seven = cpx(jay.ReadComplex128(b[96:112]))
	s.Eight = cpx(jay.ReadComplex128(b[112:128]))
	s.Nine = cpx(jay.ReadComplex128(b[128:144]))
	s.Ten = cpx(jay.ReadComplex128(b[144:160]))
	s.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	s.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	s.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	s.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	s.Fifteen = cpx(jay.ReadComplex128(b[224:240]))
	s.Sixteen = cpx(jay.ReadComplex128(b[240:256]))
	s.Seventeen = cpx(jay.ReadComplex128(b[256:]))
	return nil
}

func (e *Eighteen) MarshalJ() (b []byte) {
	b = make([]byte, 288)
	jay.WriteComplex128(b[:16], complex128(e.One))
	jay.WriteComplex128(b[16:32], complex128(e.Two))
	jay.WriteComplex128(b[32:48], complex128(e.Three))
	jay.WriteComplex128(b[48:64], complex128(e.Four))
	jay.WriteComplex128(b[64:80], complex128(e.Five))
	jay.WriteComplex128(b[80:96], complex128(e.Six))
	jay.WriteComplex128(b[96:112], complex128(e.Seven))
	jay.WriteComplex128(b[112:128], complex128(e.Eight))
	jay.WriteComplex128(b[128:144], complex128(e.Nine))
	jay.WriteComplex128(b[144:160], complex128(e.Ten))
	jay.WriteComplex128(b[160:176], complex128(e.Eleven))
	jay.WriteComplex128(b[176:192], complex128(e.Twelve))
	jay.WriteComplex128(b[192:208], complex128(e.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(e.Fourteen))
	jay.WriteComplex128(b[224:240], complex128(e.Fifteen))
	jay.WriteComplex128(b[240:256], complex128(e.Sixteen))
	jay.WriteComplex128(b[256:272], complex128(e.Seventeen))
	jay.WriteComplex128(b[272:], complex128(e.Eighteen))
	return
}

func (e *Eighteen) UnmarshalJ(b []byte) error {
	if len(b) != 288 {
		return jay.ErrUnexpectedEOB
	}
	e.One = cpx(jay.ReadComplex128(b[:16]))
	e.Two = cpx(jay.ReadComplex128(b[16:32]))
	e.Three = cpx(jay.ReadComplex128(b[32:48]))
	e.Four = cpx(jay.ReadComplex128(b[48:64]))
	e.Five = cpx(jay.ReadComplex128(b[64:80]))
	e.Six = cpx(jay.ReadComplex128(b[80:96]))
	e.Seven = cpx(jay.ReadComplex128(b[96:112]))
	e.Eight = cpx(jay.ReadComplex128(b[112:128]))
	e.Nine = cpx(jay.ReadComplex128(b[128:144]))
	e.Ten = cpx(jay.ReadComplex128(b[144:160]))
	e.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	e.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	e.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	e.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	e.Fifteen = cpx(jay.ReadComplex128(b[224:240]))
	e.Sixteen = cpx(jay.ReadComplex128(b[240:256]))
	e.Seventeen = cpx(jay.ReadComplex128(b[256:272]))
	e.Eighteen = cpx(jay.ReadComplex128(b[272:]))
	return nil
}

func (n *Nineteen) MarshalJ() (b []byte) {
	b = make([]byte, 304)
	jay.WriteComplex128(b[:16], complex128(n.One))
	jay.WriteComplex128(b[16:32], complex128(n.Two))
	jay.WriteComplex128(b[32:48], complex128(n.Three))
	jay.WriteComplex128(b[48:64], complex128(n.Four))
	jay.WriteComplex128(b[64:80], complex128(n.Five))
	jay.WriteComplex128(b[80:96], complex128(n.Six))
	jay.WriteComplex128(b[96:112], complex128(n.Seven))
	jay.WriteComplex128(b[112:128], complex128(n.Eight))
	jay.WriteComplex128(b[128:144], complex128(n.Nine))
	jay.WriteComplex128(b[144:160], complex128(n.Ten))
	jay.WriteComplex128(b[160:176], complex128(n.Eleven))
	jay.WriteComplex128(b[176:192], complex128(n.Twelve))
	jay.WriteComplex128(b[192:208], complex128(n.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(n.Fourteen))
	jay.WriteComplex128(b[224:240], complex128(n.Fifteen))
	jay.WriteComplex128(b[240:256], complex128(n.Sixteen))
	jay.WriteComplex128(b[256:272], complex128(n.Seventeen))
	jay.WriteComplex128(b[272:288], complex128(n.Eighteen))
	jay.WriteComplex128(b[288:], complex128(n.Nineteen))
	return
}

func (n *Nineteen) UnmarshalJ(b []byte) error {
	if len(b) != 304 {
		return jay.ErrUnexpectedEOB
	}
	n.One = cpx(jay.ReadComplex128(b[:16]))
	n.Two = cpx(jay.ReadComplex128(b[16:32]))
	n.Three = cpx(jay.ReadComplex128(b[32:48]))
	n.Four = cpx(jay.ReadComplex128(b[48:64]))
	n.Five = cpx(jay.ReadComplex128(b[64:80]))
	n.Six = cpx(jay.ReadComplex128(b[80:96]))
	n.Seven = cpx(jay.ReadComplex128(b[96:112]))
	n.Eight = cpx(jay.ReadComplex128(b[112:128]))
	n.Nine = cpx(jay.ReadComplex128(b[128:144]))
	n.Ten = cpx(jay.ReadComplex128(b[144:160]))
	n.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	n.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	n.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	n.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	n.Fifteen = cpx(jay.ReadComplex128(b[224:240]))
	n.Sixteen = cpx(jay.ReadComplex128(b[240:256]))
	n.Seventeen = cpx(jay.ReadComplex128(b[256:272]))
	n.Eighteen = cpx(jay.ReadComplex128(b[272:288]))
	n.Nineteen = cpx(jay.ReadComplex128(b[288:]))
	return nil
}

func (t *Twenty) MarshalJ() (b []byte) {
	b = make([]byte, 320)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:32], complex128(t.Two))
	jay.WriteComplex128(b[32:48], complex128(t.Three))
	jay.WriteComplex128(b[48:64], complex128(t.Four))
	jay.WriteComplex128(b[64:80], complex128(t.Five))
	jay.WriteComplex128(b[80:96], complex128(t.Six))
	jay.WriteComplex128(b[96:112], complex128(t.Seven))
	jay.WriteComplex128(b[112:128], complex128(t.Eight))
	jay.WriteComplex128(b[128:144], complex128(t.Nine))
	jay.WriteComplex128(b[144:160], complex128(t.Ten))
	jay.WriteComplex128(b[160:176], complex128(t.Eleven))
	jay.WriteComplex128(b[176:192], complex128(t.Twelve))
	jay.WriteComplex128(b[192:208], complex128(t.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(t.Fourteen))
	jay.WriteComplex128(b[224:240], complex128(t.Fifteen))
	jay.WriteComplex128(b[240:256], complex128(t.Sixteen))
	jay.WriteComplex128(b[256:272], complex128(t.Seventeen))
	jay.WriteComplex128(b[272:288], complex128(t.Eighteen))
	jay.WriteComplex128(b[288:304], complex128(t.Nineteen))
	jay.WriteComplex128(b[304:], complex128(t.Twenty))
	return
}

func (t *Twenty) UnmarshalJ(b []byte) error {
	if len(b) != 320 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:32]))
	t.Three = cpx(jay.ReadComplex128(b[32:48]))
	t.Four = cpx(jay.ReadComplex128(b[48:64]))
	t.Five = cpx(jay.ReadComplex128(b[64:80]))
	t.Six = cpx(jay.ReadComplex128(b[80:96]))
	t.Seven = cpx(jay.ReadComplex128(b[96:112]))
	t.Eight = cpx(jay.ReadComplex128(b[112:128]))
	t.Nine = cpx(jay.ReadComplex128(b[128:144]))
	t.Ten = cpx(jay.ReadComplex128(b[144:160]))
	t.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	t.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	t.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	t.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	t.Fifteen = cpx(jay.ReadComplex128(b[224:240]))
	t.Sixteen = cpx(jay.ReadComplex128(b[240:256]))
	t.Seventeen = cpx(jay.ReadComplex128(b[256:272]))
	t.Eighteen = cpx(jay.ReadComplex128(b[272:288]))
	t.Nineteen = cpx(jay.ReadComplex128(b[288:304]))
	t.Twenty = cpx(jay.ReadComplex128(b[304:]))
	return nil
}

func (t *TwentyOne) MarshalJ() (b []byte) {
	b = make([]byte, 336)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:32], complex128(t.Two))
	jay.WriteComplex128(b[32:48], complex128(t.Three))
	jay.WriteComplex128(b[48:64], complex128(t.Four))
	jay.WriteComplex128(b[64:80], complex128(t.Five))
	jay.WriteComplex128(b[80:96], complex128(t.Six))
	jay.WriteComplex128(b[96:112], complex128(t.Seven))
	jay.WriteComplex128(b[112:128], complex128(t.Eight))
	jay.WriteComplex128(b[128:144], complex128(t.Nine))
	jay.WriteComplex128(b[144:160], complex128(t.Ten))
	jay.WriteComplex128(b[160:176], complex128(t.Eleven))
	jay.WriteComplex128(b[176:192], complex128(t.Twelve))
	jay.WriteComplex128(b[192:208], complex128(t.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(t.Fourteen))
	jay.WriteComplex128(b[224:240], complex128(t.Fifteen))
	jay.WriteComplex128(b[240:256], complex128(t.Sixteen))
	jay.WriteComplex128(b[256:272], complex128(t.Seventeen))
	jay.WriteComplex128(b[272:288], complex128(t.Eighteen))
	jay.WriteComplex128(b[288:304], complex128(t.Nineteen))
	jay.WriteComplex128(b[304:320], complex128(t.Twenty))
	jay.WriteComplex128(b[320:], complex128(t.TwentyOne))
	return
}

func (t *TwentyOne) UnmarshalJ(b []byte) error {
	if len(b) != 336 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:32]))
	t.Three = cpx(jay.ReadComplex128(b[32:48]))
	t.Four = cpx(jay.ReadComplex128(b[48:64]))
	t.Five = cpx(jay.ReadComplex128(b[64:80]))
	t.Six = cpx(jay.ReadComplex128(b[80:96]))
	t.Seven = cpx(jay.ReadComplex128(b[96:112]))
	t.Eight = cpx(jay.ReadComplex128(b[112:128]))
	t.Nine = cpx(jay.ReadComplex128(b[128:144]))
	t.Ten = cpx(jay.ReadComplex128(b[144:160]))
	t.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	t.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	t.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	t.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	t.Fifteen = cpx(jay.ReadComplex128(b[224:240]))
	t.Sixteen = cpx(jay.ReadComplex128(b[240:256]))
	t.Seventeen = cpx(jay.ReadComplex128(b[256:272]))
	t.Eighteen = cpx(jay.ReadComplex128(b[272:288]))
	t.Nineteen = cpx(jay.ReadComplex128(b[288:304]))
	t.Twenty = cpx(jay.ReadComplex128(b[304:320]))
	t.TwentyOne = cpx(jay.ReadComplex128(b[320:]))
	return nil
}

func (t *TwentyTwo) MarshalJ() (b []byte) {
	b = make([]byte, 352)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:32], complex128(t.Two))
	jay.WriteComplex128(b[32:48], complex128(t.Three))
	jay.WriteComplex128(b[48:64], complex128(t.Four))
	jay.WriteComplex128(b[64:80], complex128(t.Five))
	jay.WriteComplex128(b[80:96], complex128(t.Six))
	jay.WriteComplex128(b[96:112], complex128(t.Seven))
	jay.WriteComplex128(b[112:128], complex128(t.Eight))
	jay.WriteComplex128(b[128:144], complex128(t.Nine))
	jay.WriteComplex128(b[144:160], complex128(t.Ten))
	jay.WriteComplex128(b[160:176], complex128(t.Eleven))
	jay.WriteComplex128(b[176:192], complex128(t.Twelve))
	jay.WriteComplex128(b[192:208], complex128(t.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(t.Fourteen))
	jay.WriteComplex128(b[224:240], complex128(t.Fifteen))
	jay.WriteComplex128(b[240:256], complex128(t.Sixteen))
	jay.WriteComplex128(b[256:272], complex128(t.Seventeen))
	jay.WriteComplex128(b[272:288], complex128(t.Eighteen))
	jay.WriteComplex128(b[288:304], complex128(t.Nineteen))
	jay.WriteComplex128(b[304:320], complex128(t.Twenty))
	jay.WriteComplex128(b[320:336], complex128(t.TwentyOne))
	jay.WriteComplex128(b[336:], complex128(t.TwentyTwo))
	return
}

func (t *TwentyTwo) UnmarshalJ(b []byte) error {
	if len(b) != 352 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:32]))
	t.Three = cpx(jay.ReadComplex128(b[32:48]))
	t.Four = cpx(jay.ReadComplex128(b[48:64]))
	t.Five = cpx(jay.ReadComplex128(b[64:80]))
	t.Six = cpx(jay.ReadComplex128(b[80:96]))
	t.Seven = cpx(jay.ReadComplex128(b[96:112]))
	t.Eight = cpx(jay.ReadComplex128(b[112:128]))
	t.Nine = cpx(jay.ReadComplex128(b[128:144]))
	t.Ten = cpx(jay.ReadComplex128(b[144:160]))
	t.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	t.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	t.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	t.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	t.Fifteen = cpx(jay.ReadComplex128(b[224:240]))
	t.Sixteen = cpx(jay.ReadComplex128(b[240:256]))
	t.Seventeen = cpx(jay.ReadComplex128(b[256:272]))
	t.Eighteen = cpx(jay.ReadComplex128(b[272:288]))
	t.Nineteen = cpx(jay.ReadComplex128(b[288:304]))
	t.Twenty = cpx(jay.ReadComplex128(b[304:320]))
	t.TwentyOne = cpx(jay.ReadComplex128(b[320:336]))
	t.TwentyTwo = cpx(jay.ReadComplex128(b[336:]))
	return nil
}

func (t *TwentyThree) MarshalJ() (b []byte) {
	b = make([]byte, 368)
	jay.WriteComplex128(b[:16], complex128(t.One))
	jay.WriteComplex128(b[16:32], complex128(t.Two))
	jay.WriteComplex128(b[32:48], complex128(t.Three))
	jay.WriteComplex128(b[48:64], complex128(t.Four))
	jay.WriteComplex128(b[64:80], complex128(t.Five))
	jay.WriteComplex128(b[80:96], complex128(t.Six))
	jay.WriteComplex128(b[96:112], complex128(t.Seven))
	jay.WriteComplex128(b[112:128], complex128(t.Eight))
	jay.WriteComplex128(b[128:144], complex128(t.Nine))
	jay.WriteComplex128(b[144:160], complex128(t.Ten))
	jay.WriteComplex128(b[160:176], complex128(t.Eleven))
	jay.WriteComplex128(b[176:192], complex128(t.Twelve))
	jay.WriteComplex128(b[192:208], complex128(t.Thirteen))
	jay.WriteComplex128(b[208:224], complex128(t.Fourteen))
	jay.WriteComplex128(b[224:240], complex128(t.Fifteen))
	jay.WriteComplex128(b[240:256], complex128(t.Sixteen))
	jay.WriteComplex128(b[256:272], complex128(t.Seventeen))
	jay.WriteComplex128(b[272:288], complex128(t.Eighteen))
	jay.WriteComplex128(b[288:304], complex128(t.Nineteen))
	jay.WriteComplex128(b[304:320], complex128(t.Twenty))
	jay.WriteComplex128(b[320:336], complex128(t.TwentyOne))
	jay.WriteComplex128(b[336:352], complex128(t.TwentyTwo))
	jay.WriteComplex128(b[352:], complex128(t.TwentyThree))
	return
}

func (t *TwentyThree) UnmarshalJ(b []byte) error {
	if len(b) != 368 {
		return jay.ErrUnexpectedEOB
	}
	t.One = cpx(jay.ReadComplex128(b[:16]))
	t.Two = cpx(jay.ReadComplex128(b[16:32]))
	t.Three = cpx(jay.ReadComplex128(b[32:48]))
	t.Four = cpx(jay.ReadComplex128(b[48:64]))
	t.Five = cpx(jay.ReadComplex128(b[64:80]))
	t.Six = cpx(jay.ReadComplex128(b[80:96]))
	t.Seven = cpx(jay.ReadComplex128(b[96:112]))
	t.Eight = cpx(jay.ReadComplex128(b[112:128]))
	t.Nine = cpx(jay.ReadComplex128(b[128:144]))
	t.Ten = cpx(jay.ReadComplex128(b[144:160]))
	t.Eleven = cpx(jay.ReadComplex128(b[160:176]))
	t.Twelve = cpx(jay.ReadComplex128(b[176:192]))
	t.Thirteen = cpx(jay.ReadComplex128(b[192:208]))
	t.Fourteen = cpx(jay.ReadComplex128(b[208:224]))
	t.Fifteen = cpx(jay.ReadComplex128(b[224:240]))
	t.Sixteen = cpx(jay.ReadComplex128(b[240:256]))
	t.Seventeen = cpx(jay.ReadComplex128(b[256:272]))
	t.Eighteen = cpx(jay.ReadComplex128(b[272:288]))
	t.Nineteen = cpx(jay.ReadComplex128(b[288:304]))
	t.Twenty = cpx(jay.ReadComplex128(b[304:320]))
	t.TwentyOne = cpx(jay.ReadComplex128(b[320:336]))
	t.TwentyTwo = cpx(jay.ReadComplex128(b[336:352]))
	t.TwentyThree = cpx(jay.ReadComplex128(b[352:]))
	return nil
}
