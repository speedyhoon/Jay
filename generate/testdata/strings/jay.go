// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (o *One) MarshalJ() (b []byte) {
	b = make([]byte, jay.StringsSize16(o.One))
	jay.WriteStrings16(b, o.One)
	return
}

func (o *One) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	return jay.ReadStrings16Err(b, &o.One)
}

func (t *Two) MarshalJ() (b []byte) {
	l0 := jay.StringsSize16(t.One)
	b = make([]byte, l0+jay.StringsSize16(t.Two))
	jay.WriteStrings16(b[:l0], t.One)
	jay.WriteStrings16(b[l0:], t.Two)
	return
}

func (t *Two) UnmarshalJ(b []byte) (err error) {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}

	var index uint
	index, err = jay.ReadStrings16nErr(b, &t.One)
	if err != nil {
		return
	}

	return jay.ReadStrings16Err(b[index:], &t.Two)
}

func (t *Three) MarshalJ() (b []byte) {
	l0, l1 := jay.StringsSize16(t.One), jay.StringsSize16(t.Two)
	b = make([]byte, l0+l1+jay.StringsSize16(t.Three))
	jay.WriteStrings16(b[:l0], t.One)
	jay.WriteStrings16(b[l0:l0+l1], t.Two)
	jay.WriteStrings16(b[l0+l1:], t.Three)
	return
}

func (t *Three) UnmarshalJ(b []byte) (err error) {
	if len(b) != 0 {
		return jay.ErrUnexpectedEOB
	}

	var index uint
	index, err = jay.ReadStrings16nErr(b, &t.One)
	if err != nil {
		return
	}

	index, err = jay.ReadStrings16nErr(b[index:], &t.Two)
	if err != nil {
		return
	}

	return jay.ReadStrings16Err(b[index:], &t.Three)
}
