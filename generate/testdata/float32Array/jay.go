// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (o *One) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteFloat32s(b, o.One[:], 6)
	return
}

func (o *One) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	o.One = [6]float32(jay.ReadFloat32s(b, 6))
	return nil
}

func (t *Two) MarshalJ() (b []byte) {
	b = make([]byte, 48)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:], t.Two[:], 6)
	return
}

func (t *Two) UnmarshalJ(b []byte) error {
	if len(b) != 48 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:], 6))
	return nil
}

func (t *Three) MarshalJ() (b []byte) {
	b = make([]byte, 72)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:48], t.Two[:], 6)
	jay.WriteFloat32s(b[48:], t.Three[:], 6)
	return
}

func (t *Three) UnmarshalJ(b []byte) error {
	if len(b) != 72 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	t.Three = [6]float32(jay.ReadFloat32s(b[48:], 6))
	return nil
}

func (f *Four) MarshalJ() (b []byte) {
	b = make([]byte, 96)
	jay.WriteFloat32s(b[:24], f.One[:], 6)
	jay.WriteFloat32s(b[24:48], f.Two[:], 6)
	jay.WriteFloat32s(b[48:72], f.Three[:], 6)
	jay.WriteFloat32s(b[72:], f.Four[:], 6)
	return
}

func (f *Four) UnmarshalJ(b []byte) error {
	if len(b) != 96 {
		return jay.ErrUnexpectedEOB
	}
	f.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	f.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	f.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	f.Four = [6]float32(jay.ReadFloat32s(b[72:], 6))
	return nil
}

func (f *Five) MarshalJ() (b []byte) {
	b = make([]byte, 120)
	jay.WriteFloat32s(b[:24], f.One[:], 6)
	jay.WriteFloat32s(b[24:48], f.Two[:], 6)
	jay.WriteFloat32s(b[48:72], f.Three[:], 6)
	jay.WriteFloat32s(b[72:96], f.Four[:], 6)
	jay.WriteFloat32s(b[96:], f.Five[:], 6)
	return
}

func (f *Five) UnmarshalJ(b []byte) error {
	if len(b) != 120 {
		return jay.ErrUnexpectedEOB
	}
	f.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	f.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	f.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	f.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	f.Five = [6]float32(jay.ReadFloat32s(b[96:], 6))
	return nil
}

func (s *Six) MarshalJ() (b []byte) {
	b = make([]byte, 144)
	jay.WriteFloat32s(b[:24], s.One[:], 6)
	jay.WriteFloat32s(b[24:48], s.Two[:], 6)
	jay.WriteFloat32s(b[48:72], s.Three[:], 6)
	jay.WriteFloat32s(b[72:96], s.Four[:], 6)
	jay.WriteFloat32s(b[96:120], s.Five[:], 6)
	jay.WriteFloat32s(b[120:], s.Six[:], 6)
	return
}

func (s *Six) UnmarshalJ(b []byte) error {
	if len(b) != 144 {
		return jay.ErrUnexpectedEOB
	}
	s.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	s.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	s.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	s.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	s.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	s.Six = [6]float32(jay.ReadFloat32s(b[120:], 6))
	return nil
}

func (s *Seven) MarshalJ() (b []byte) {
	b = make([]byte, 168)
	jay.WriteFloat32s(b[:24], s.One[:], 6)
	jay.WriteFloat32s(b[24:48], s.Two[:], 6)
	jay.WriteFloat32s(b[48:72], s.Three[:], 6)
	jay.WriteFloat32s(b[72:96], s.Four[:], 6)
	jay.WriteFloat32s(b[96:120], s.Five[:], 6)
	jay.WriteFloat32s(b[120:144], s.Six[:], 6)
	jay.WriteFloat32s(b[144:], s.Seven[:], 6)
	return
}

func (s *Seven) UnmarshalJ(b []byte) error {
	if len(b) != 168 {
		return jay.ErrUnexpectedEOB
	}
	s.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	s.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	s.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	s.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	s.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	s.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	s.Seven = [6]float32(jay.ReadFloat32s(b[144:], 6))
	return nil
}

func (e *Eight) MarshalJ() (b []byte) {
	b = make([]byte, 192)
	jay.WriteFloat32s(b[:24], e.One[:], 6)
	jay.WriteFloat32s(b[24:48], e.Two[:], 6)
	jay.WriteFloat32s(b[48:72], e.Three[:], 6)
	jay.WriteFloat32s(b[72:96], e.Four[:], 6)
	jay.WriteFloat32s(b[96:120], e.Five[:], 6)
	jay.WriteFloat32s(b[120:144], e.Six[:], 6)
	jay.WriteFloat32s(b[144:168], e.Seven[:], 6)
	jay.WriteFloat32s(b[168:], e.Eight[:], 6)
	return
}

func (e *Eight) UnmarshalJ(b []byte) error {
	if len(b) != 192 {
		return jay.ErrUnexpectedEOB
	}
	e.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	e.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	e.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	e.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	e.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	e.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	e.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	e.Eight = [6]float32(jay.ReadFloat32s(b[168:], 6))
	return nil
}

func (n *Nine) MarshalJ() (b []byte) {
	b = make([]byte, 216)
	jay.WriteFloat32s(b[:24], n.One[:], 6)
	jay.WriteFloat32s(b[24:48], n.Two[:], 6)
	jay.WriteFloat32s(b[48:72], n.Three[:], 6)
	jay.WriteFloat32s(b[72:96], n.Four[:], 6)
	jay.WriteFloat32s(b[96:120], n.Five[:], 6)
	jay.WriteFloat32s(b[120:144], n.Six[:], 6)
	jay.WriteFloat32s(b[144:168], n.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], n.Eight[:], 6)
	jay.WriteFloat32s(b[192:], n.Nine[:], 6)
	return
}

func (n *Nine) UnmarshalJ(b []byte) error {
	if len(b) != 216 {
		return jay.ErrUnexpectedEOB
	}
	n.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	n.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	n.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	n.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	n.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	n.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	n.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	n.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	n.Nine = [6]float32(jay.ReadFloat32s(b[192:], 6))
	return nil
}

func (t *Ten) MarshalJ() (b []byte) {
	b = make([]byte, 240)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:48], t.Two[:], 6)
	jay.WriteFloat32s(b[48:72], t.Three[:], 6)
	jay.WriteFloat32s(b[72:96], t.Four[:], 6)
	jay.WriteFloat32s(b[96:120], t.Five[:], 6)
	jay.WriteFloat32s(b[120:144], t.Six[:], 6)
	jay.WriteFloat32s(b[144:168], t.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], t.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], t.Nine[:], 6)
	jay.WriteFloat32s(b[216:], t.Ten[:], 6)
	return
}

func (t *Ten) UnmarshalJ(b []byte) error {
	if len(b) != 240 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	t.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	t.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	t.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	t.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	t.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	t.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	t.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	t.Ten = [6]float32(jay.ReadFloat32s(b[216:], 6))
	return nil
}

func (e *Eleven) MarshalJ() (b []byte) {
	b = make([]byte, 264)
	jay.WriteFloat32s(b[:24], e.One[:], 6)
	jay.WriteFloat32s(b[24:48], e.Two[:], 6)
	jay.WriteFloat32s(b[48:72], e.Three[:], 6)
	jay.WriteFloat32s(b[72:96], e.Four[:], 6)
	jay.WriteFloat32s(b[96:120], e.Five[:], 6)
	jay.WriteFloat32s(b[120:144], e.Six[:], 6)
	jay.WriteFloat32s(b[144:168], e.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], e.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], e.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], e.Ten[:], 6)
	jay.WriteFloat32s(b[240:], e.Eleven[:], 6)
	return
}

func (e *Eleven) UnmarshalJ(b []byte) error {
	if len(b) != 264 {
		return jay.ErrUnexpectedEOB
	}
	e.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	e.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	e.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	e.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	e.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	e.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	e.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	e.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	e.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	e.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	e.Eleven = [6]float32(jay.ReadFloat32s(b[240:], 6))
	return nil
}

func (t *Twelve) MarshalJ() (b []byte) {
	b = make([]byte, 288)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:48], t.Two[:], 6)
	jay.WriteFloat32s(b[48:72], t.Three[:], 6)
	jay.WriteFloat32s(b[72:96], t.Four[:], 6)
	jay.WriteFloat32s(b[96:120], t.Five[:], 6)
	jay.WriteFloat32s(b[120:144], t.Six[:], 6)
	jay.WriteFloat32s(b[144:168], t.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], t.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], t.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], t.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], t.Eleven[:], 6)
	jay.WriteFloat32s(b[264:], t.Twelve[:], 6)
	return
}

func (t *Twelve) UnmarshalJ(b []byte) error {
	if len(b) != 288 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	t.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	t.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	t.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	t.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	t.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	t.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	t.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	t.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	t.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	t.Twelve = [6]float32(jay.ReadFloat32s(b[264:], 6))
	return nil
}

func (t *Thirteen) MarshalJ() (b []byte) {
	b = make([]byte, 312)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:48], t.Two[:], 6)
	jay.WriteFloat32s(b[48:72], t.Three[:], 6)
	jay.WriteFloat32s(b[72:96], t.Four[:], 6)
	jay.WriteFloat32s(b[96:120], t.Five[:], 6)
	jay.WriteFloat32s(b[120:144], t.Six[:], 6)
	jay.WriteFloat32s(b[144:168], t.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], t.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], t.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], t.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], t.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], t.Twelve[:], 6)
	jay.WriteFloat32s(b[288:], t.Thirteen[:], 6)
	return
}

func (t *Thirteen) UnmarshalJ(b []byte) error {
	if len(b) != 312 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	t.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	t.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	t.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	t.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	t.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	t.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	t.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	t.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	t.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	t.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	t.Thirteen = [6]float32(jay.ReadFloat32s(b[288:], 6))
	return nil
}

func (f *Fourteen) MarshalJ() (b []byte) {
	b = make([]byte, 336)
	jay.WriteFloat32s(b[:24], f.One[:], 6)
	jay.WriteFloat32s(b[24:48], f.Two[:], 6)
	jay.WriteFloat32s(b[48:72], f.Three[:], 6)
	jay.WriteFloat32s(b[72:96], f.Four[:], 6)
	jay.WriteFloat32s(b[96:120], f.Five[:], 6)
	jay.WriteFloat32s(b[120:144], f.Six[:], 6)
	jay.WriteFloat32s(b[144:168], f.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], f.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], f.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], f.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], f.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], f.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], f.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:], f.Fourteen[:], 6)
	return
}

func (f *Fourteen) UnmarshalJ(b []byte) error {
	if len(b) != 336 {
		return jay.ErrUnexpectedEOB
	}
	f.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	f.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	f.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	f.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	f.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	f.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	f.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	f.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	f.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	f.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	f.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	f.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	f.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	f.Fourteen = [6]float32(jay.ReadFloat32s(b[312:], 6))
	return nil
}

func (f *Fifteen) MarshalJ() (b []byte) {
	b = make([]byte, 360)
	jay.WriteFloat32s(b[:24], f.One[:], 6)
	jay.WriteFloat32s(b[24:48], f.Two[:], 6)
	jay.WriteFloat32s(b[48:72], f.Three[:], 6)
	jay.WriteFloat32s(b[72:96], f.Four[:], 6)
	jay.WriteFloat32s(b[96:120], f.Five[:], 6)
	jay.WriteFloat32s(b[120:144], f.Six[:], 6)
	jay.WriteFloat32s(b[144:168], f.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], f.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], f.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], f.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], f.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], f.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], f.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], f.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:], f.Fifteen[:], 6)
	return
}

func (f *Fifteen) UnmarshalJ(b []byte) error {
	if len(b) != 360 {
		return jay.ErrUnexpectedEOB
	}
	f.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	f.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	f.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	f.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	f.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	f.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	f.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	f.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	f.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	f.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	f.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	f.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	f.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	f.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	f.Fifteen = [6]float32(jay.ReadFloat32s(b[336:], 6))
	return nil
}

func (s *Sixteen) MarshalJ() (b []byte) {
	b = make([]byte, 384)
	jay.WriteFloat32s(b[:24], s.One[:], 6)
	jay.WriteFloat32s(b[24:48], s.Two[:], 6)
	jay.WriteFloat32s(b[48:72], s.Three[:], 6)
	jay.WriteFloat32s(b[72:96], s.Four[:], 6)
	jay.WriteFloat32s(b[96:120], s.Five[:], 6)
	jay.WriteFloat32s(b[120:144], s.Six[:], 6)
	jay.WriteFloat32s(b[144:168], s.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], s.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], s.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], s.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], s.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], s.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], s.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], s.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:360], s.Fifteen[:], 6)
	jay.WriteFloat32s(b[360:], s.Sixteen[:], 6)
	return
}

func (s *Sixteen) UnmarshalJ(b []byte) error {
	if len(b) != 384 {
		return jay.ErrUnexpectedEOB
	}
	s.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	s.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	s.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	s.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	s.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	s.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	s.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	s.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	s.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	s.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	s.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	s.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	s.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	s.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	s.Fifteen = [6]float32(jay.ReadFloat32s(b[336:360], 6))
	s.Sixteen = [6]float32(jay.ReadFloat32s(b[360:], 6))
	return nil
}

func (s *Seventeen) MarshalJ() (b []byte) {
	b = make([]byte, 408)
	jay.WriteFloat32s(b[:24], s.One[:], 6)
	jay.WriteFloat32s(b[24:48], s.Two[:], 6)
	jay.WriteFloat32s(b[48:72], s.Three[:], 6)
	jay.WriteFloat32s(b[72:96], s.Four[:], 6)
	jay.WriteFloat32s(b[96:120], s.Five[:], 6)
	jay.WriteFloat32s(b[120:144], s.Six[:], 6)
	jay.WriteFloat32s(b[144:168], s.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], s.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], s.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], s.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], s.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], s.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], s.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], s.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:360], s.Fifteen[:], 6)
	jay.WriteFloat32s(b[360:384], s.Sixteen[:], 6)
	jay.WriteFloat32s(b[384:], s.Seventeen[:], 6)
	return
}

func (s *Seventeen) UnmarshalJ(b []byte) error {
	if len(b) != 408 {
		return jay.ErrUnexpectedEOB
	}
	s.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	s.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	s.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	s.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	s.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	s.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	s.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	s.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	s.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	s.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	s.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	s.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	s.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	s.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	s.Fifteen = [6]float32(jay.ReadFloat32s(b[336:360], 6))
	s.Sixteen = [6]float32(jay.ReadFloat32s(b[360:384], 6))
	s.Seventeen = [6]float32(jay.ReadFloat32s(b[384:], 6))
	return nil
}

func (e *Eighteen) MarshalJ() (b []byte) {
	b = make([]byte, 432)
	jay.WriteFloat32s(b[:24], e.One[:], 6)
	jay.WriteFloat32s(b[24:48], e.Two[:], 6)
	jay.WriteFloat32s(b[48:72], e.Three[:], 6)
	jay.WriteFloat32s(b[72:96], e.Four[:], 6)
	jay.WriteFloat32s(b[96:120], e.Five[:], 6)
	jay.WriteFloat32s(b[120:144], e.Six[:], 6)
	jay.WriteFloat32s(b[144:168], e.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], e.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], e.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], e.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], e.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], e.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], e.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], e.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:360], e.Fifteen[:], 6)
	jay.WriteFloat32s(b[360:384], e.Sixteen[:], 6)
	jay.WriteFloat32s(b[384:408], e.Seventeen[:], 6)
	jay.WriteFloat32s(b[408:], e.Eighteen[:], 6)
	return
}

func (e *Eighteen) UnmarshalJ(b []byte) error {
	if len(b) != 432 {
		return jay.ErrUnexpectedEOB
	}
	e.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	e.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	e.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	e.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	e.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	e.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	e.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	e.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	e.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	e.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	e.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	e.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	e.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	e.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	e.Fifteen = [6]float32(jay.ReadFloat32s(b[336:360], 6))
	e.Sixteen = [6]float32(jay.ReadFloat32s(b[360:384], 6))
	e.Seventeen = [6]float32(jay.ReadFloat32s(b[384:408], 6))
	e.Eighteen = [6]float32(jay.ReadFloat32s(b[408:], 6))
	return nil
}

func (n *Nineteen) MarshalJ() (b []byte) {
	b = make([]byte, 456)
	jay.WriteFloat32s(b[:24], n.One[:], 6)
	jay.WriteFloat32s(b[24:48], n.Two[:], 6)
	jay.WriteFloat32s(b[48:72], n.Three[:], 6)
	jay.WriteFloat32s(b[72:96], n.Four[:], 6)
	jay.WriteFloat32s(b[96:120], n.Five[:], 6)
	jay.WriteFloat32s(b[120:144], n.Six[:], 6)
	jay.WriteFloat32s(b[144:168], n.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], n.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], n.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], n.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], n.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], n.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], n.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], n.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:360], n.Fifteen[:], 6)
	jay.WriteFloat32s(b[360:384], n.Sixteen[:], 6)
	jay.WriteFloat32s(b[384:408], n.Seventeen[:], 6)
	jay.WriteFloat32s(b[408:432], n.Eighteen[:], 6)
	jay.WriteFloat32s(b[432:], n.Nineteen[:], 6)
	return
}

func (n *Nineteen) UnmarshalJ(b []byte) error {
	if len(b) != 456 {
		return jay.ErrUnexpectedEOB
	}
	n.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	n.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	n.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	n.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	n.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	n.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	n.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	n.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	n.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	n.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	n.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	n.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	n.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	n.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	n.Fifteen = [6]float32(jay.ReadFloat32s(b[336:360], 6))
	n.Sixteen = [6]float32(jay.ReadFloat32s(b[360:384], 6))
	n.Seventeen = [6]float32(jay.ReadFloat32s(b[384:408], 6))
	n.Eighteen = [6]float32(jay.ReadFloat32s(b[408:432], 6))
	n.Nineteen = [6]float32(jay.ReadFloat32s(b[432:], 6))
	return nil
}

func (t *Twenty) MarshalJ() (b []byte) {
	b = make([]byte, 480)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:48], t.Two[:], 6)
	jay.WriteFloat32s(b[48:72], t.Three[:], 6)
	jay.WriteFloat32s(b[72:96], t.Four[:], 6)
	jay.WriteFloat32s(b[96:120], t.Five[:], 6)
	jay.WriteFloat32s(b[120:144], t.Six[:], 6)
	jay.WriteFloat32s(b[144:168], t.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], t.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], t.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], t.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], t.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], t.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], t.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], t.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:360], t.Fifteen[:], 6)
	jay.WriteFloat32s(b[360:384], t.Sixteen[:], 6)
	jay.WriteFloat32s(b[384:408], t.Seventeen[:], 6)
	jay.WriteFloat32s(b[408:432], t.Eighteen[:], 6)
	jay.WriteFloat32s(b[432:456], t.Nineteen[:], 6)
	jay.WriteFloat32s(b[456:], t.Twenty[:], 6)
	return
}

func (t *Twenty) UnmarshalJ(b []byte) error {
	if len(b) != 480 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	t.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	t.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	t.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	t.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	t.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	t.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	t.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	t.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	t.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	t.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	t.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	t.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	t.Fifteen = [6]float32(jay.ReadFloat32s(b[336:360], 6))
	t.Sixteen = [6]float32(jay.ReadFloat32s(b[360:384], 6))
	t.Seventeen = [6]float32(jay.ReadFloat32s(b[384:408], 6))
	t.Eighteen = [6]float32(jay.ReadFloat32s(b[408:432], 6))
	t.Nineteen = [6]float32(jay.ReadFloat32s(b[432:456], 6))
	t.Twenty = [6]float32(jay.ReadFloat32s(b[456:], 6))
	return nil
}

func (t *TwentyOne) MarshalJ() (b []byte) {
	b = make([]byte, 504)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:48], t.Two[:], 6)
	jay.WriteFloat32s(b[48:72], t.Three[:], 6)
	jay.WriteFloat32s(b[72:96], t.Four[:], 6)
	jay.WriteFloat32s(b[96:120], t.Five[:], 6)
	jay.WriteFloat32s(b[120:144], t.Six[:], 6)
	jay.WriteFloat32s(b[144:168], t.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], t.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], t.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], t.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], t.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], t.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], t.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], t.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:360], t.Fifteen[:], 6)
	jay.WriteFloat32s(b[360:384], t.Sixteen[:], 6)
	jay.WriteFloat32s(b[384:408], t.Seventeen[:], 6)
	jay.WriteFloat32s(b[408:432], t.Eighteen[:], 6)
	jay.WriteFloat32s(b[432:456], t.Nineteen[:], 6)
	jay.WriteFloat32s(b[456:480], t.Twenty[:], 6)
	jay.WriteFloat32s(b[480:], t.TwentyOne[:], 6)
	return
}

func (t *TwentyOne) UnmarshalJ(b []byte) error {
	if len(b) != 504 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	t.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	t.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	t.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	t.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	t.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	t.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	t.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	t.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	t.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	t.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	t.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	t.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	t.Fifteen = [6]float32(jay.ReadFloat32s(b[336:360], 6))
	t.Sixteen = [6]float32(jay.ReadFloat32s(b[360:384], 6))
	t.Seventeen = [6]float32(jay.ReadFloat32s(b[384:408], 6))
	t.Eighteen = [6]float32(jay.ReadFloat32s(b[408:432], 6))
	t.Nineteen = [6]float32(jay.ReadFloat32s(b[432:456], 6))
	t.Twenty = [6]float32(jay.ReadFloat32s(b[456:480], 6))
	t.TwentyOne = [6]float32(jay.ReadFloat32s(b[480:], 6))
	return nil
}

func (t *TwentyTwo) MarshalJ() (b []byte) {
	b = make([]byte, 528)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:48], t.Two[:], 6)
	jay.WriteFloat32s(b[48:72], t.Three[:], 6)
	jay.WriteFloat32s(b[72:96], t.Four[:], 6)
	jay.WriteFloat32s(b[96:120], t.Five[:], 6)
	jay.WriteFloat32s(b[120:144], t.Six[:], 6)
	jay.WriteFloat32s(b[144:168], t.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], t.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], t.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], t.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], t.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], t.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], t.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], t.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:360], t.Fifteen[:], 6)
	jay.WriteFloat32s(b[360:384], t.Sixteen[:], 6)
	jay.WriteFloat32s(b[384:408], t.Seventeen[:], 6)
	jay.WriteFloat32s(b[408:432], t.Eighteen[:], 6)
	jay.WriteFloat32s(b[432:456], t.Nineteen[:], 6)
	jay.WriteFloat32s(b[456:480], t.Twenty[:], 6)
	jay.WriteFloat32s(b[480:504], t.TwentyOne[:], 6)
	jay.WriteFloat32s(b[504:], t.TwentyTwo[:], 6)
	return
}

func (t *TwentyTwo) UnmarshalJ(b []byte) error {
	if len(b) != 528 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	t.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	t.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	t.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	t.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	t.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	t.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	t.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	t.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	t.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	t.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	t.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	t.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	t.Fifteen = [6]float32(jay.ReadFloat32s(b[336:360], 6))
	t.Sixteen = [6]float32(jay.ReadFloat32s(b[360:384], 6))
	t.Seventeen = [6]float32(jay.ReadFloat32s(b[384:408], 6))
	t.Eighteen = [6]float32(jay.ReadFloat32s(b[408:432], 6))
	t.Nineteen = [6]float32(jay.ReadFloat32s(b[432:456], 6))
	t.Twenty = [6]float32(jay.ReadFloat32s(b[456:480], 6))
	t.TwentyOne = [6]float32(jay.ReadFloat32s(b[480:504], 6))
	t.TwentyTwo = [6]float32(jay.ReadFloat32s(b[504:], 6))
	return nil
}

func (t *TwentyThree) MarshalJ() (b []byte) {
	b = make([]byte, 552)
	jay.WriteFloat32s(b[:24], t.One[:], 6)
	jay.WriteFloat32s(b[24:48], t.Two[:], 6)
	jay.WriteFloat32s(b[48:72], t.Three[:], 6)
	jay.WriteFloat32s(b[72:96], t.Four[:], 6)
	jay.WriteFloat32s(b[96:120], t.Five[:], 6)
	jay.WriteFloat32s(b[120:144], t.Six[:], 6)
	jay.WriteFloat32s(b[144:168], t.Seven[:], 6)
	jay.WriteFloat32s(b[168:192], t.Eight[:], 6)
	jay.WriteFloat32s(b[192:216], t.Nine[:], 6)
	jay.WriteFloat32s(b[216:240], t.Ten[:], 6)
	jay.WriteFloat32s(b[240:264], t.Eleven[:], 6)
	jay.WriteFloat32s(b[264:288], t.Twelve[:], 6)
	jay.WriteFloat32s(b[288:312], t.Thirteen[:], 6)
	jay.WriteFloat32s(b[312:336], t.Fourteen[:], 6)
	jay.WriteFloat32s(b[336:360], t.Fifteen[:], 6)
	jay.WriteFloat32s(b[360:384], t.Sixteen[:], 6)
	jay.WriteFloat32s(b[384:408], t.Seventeen[:], 6)
	jay.WriteFloat32s(b[408:432], t.Eighteen[:], 6)
	jay.WriteFloat32s(b[432:456], t.Nineteen[:], 6)
	jay.WriteFloat32s(b[456:480], t.Twenty[:], 6)
	jay.WriteFloat32s(b[480:504], t.TwentyOne[:], 6)
	jay.WriteFloat32s(b[504:528], t.TwentyTwo[:], 6)
	jay.WriteFloat32s(b[528:], t.TwentyThree[:], 6)
	return
}

func (t *TwentyThree) UnmarshalJ(b []byte) error {
	if len(b) != 552 {
		return jay.ErrUnexpectedEOB
	}
	t.One = [6]float32(jay.ReadFloat32s(b[:24], 6))
	t.Two = [6]float32(jay.ReadFloat32s(b[24:48], 6))
	t.Three = [6]float32(jay.ReadFloat32s(b[48:72], 6))
	t.Four = [6]float32(jay.ReadFloat32s(b[72:96], 6))
	t.Five = [6]float32(jay.ReadFloat32s(b[96:120], 6))
	t.Six = [6]float32(jay.ReadFloat32s(b[120:144], 6))
	t.Seven = [6]float32(jay.ReadFloat32s(b[144:168], 6))
	t.Eight = [6]float32(jay.ReadFloat32s(b[168:192], 6))
	t.Nine = [6]float32(jay.ReadFloat32s(b[192:216], 6))
	t.Ten = [6]float32(jay.ReadFloat32s(b[216:240], 6))
	t.Eleven = [6]float32(jay.ReadFloat32s(b[240:264], 6))
	t.Twelve = [6]float32(jay.ReadFloat32s(b[264:288], 6))
	t.Thirteen = [6]float32(jay.ReadFloat32s(b[288:312], 6))
	t.Fourteen = [6]float32(jay.ReadFloat32s(b[312:336], 6))
	t.Fifteen = [6]float32(jay.ReadFloat32s(b[336:360], 6))
	t.Sixteen = [6]float32(jay.ReadFloat32s(b[360:384], 6))
	t.Seventeen = [6]float32(jay.ReadFloat32s(b[384:408], 6))
	t.Eighteen = [6]float32(jay.ReadFloat32s(b[408:432], 6))
	t.Nineteen = [6]float32(jay.ReadFloat32s(b[432:456], 6))
	t.Twenty = [6]float32(jay.ReadFloat32s(b[456:480], 6))
	t.TwentyOne = [6]float32(jay.ReadFloat32s(b[480:504], 6))
	t.TwentyTwo = [6]float32(jay.ReadFloat32s(b[504:528], 6))
	t.TwentyThree = [6]float32(jay.ReadFloat32s(b[528:], 6))
	return nil
}
