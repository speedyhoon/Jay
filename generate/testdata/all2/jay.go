// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import (
	"time"

	"github.com/speedyhoon/jay"
)

func (f *Fuzz0) MarshalJ() []byte {
	return []byte{jay.Bool1(f.One), f.Two}
}

func (f *Fuzz0) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = b[1]
	return nil
}

func (f *Fuzz1) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.One)
	jay.WriteComplex64(b[1:], f.Two)
	return
}

func (f *Fuzz1) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadComplex64(b[1:])
	return nil
}

func (f *Fuzz2) MarshalJ() (b []byte) {
	b = make([]byte, 17)
	b[0] = jay.Bool1(f.One)
	jay.WriteComplex128(b[1:], f.Two)
	return
}

func (f *Fuzz2) UnmarshalJ(b []byte) error {
	if len(b) != 17 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadComplex128(b[1:])
	return nil
}

func (f *Fuzz3) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = jay.Bool1(f.One)
	jay.WriteFloat32(b[1:], f.Two)
	return
}

func (f *Fuzz3) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadFloat32(b[1:])
	return nil
}

func (f *Fuzz4) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.One)
	jay.WriteFloat64(b[1:], f.Two)
	return
}

func (f *Fuzz4) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadFloat64(b[1:])
	return nil
}

func (f *Fuzz5) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.One)
	jay.WriteIntX64(b[1:], f.Two)
	return
}

func (f *Fuzz5) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadIntX64(b[1:])
	return nil
}

func (f *Fuzz6) MarshalJ() []byte {
	return []byte{jay.Bool1(f.One), byte(f.Two)}
}

func (f *Fuzz6) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = int8(b[1])
	return nil
}

func (f *Fuzz7) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = jay.Bool1(f.One)
	jay.WriteInt16(b[1:], f.Two)
	return
}

func (f *Fuzz7) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadInt16(b[1:])
	return nil
}

func (f *Fuzz8) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = jay.Bool1(f.One)
	jay.WriteInt32(b[1:], f.Two)
	return
}

func (f *Fuzz8) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz9) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.One)
	jay.WriteInt64(b[1:], f.Two)
	return
}

func (f *Fuzz9) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadInt64(b[1:])
	return nil
}

func (f *Fuzz10) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = jay.Bool1(f.One)
	jay.WriteInt32(b[1:], f.Two)
	return
}

func (f *Fuzz10) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz11) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	copy(b[2:], f.Two)
	return
}

func (f *Fuzz11) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = string(b[2:])
	return nil
}

func (f *Fuzz12) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.One)
	jay.WriteInt64(b[1:], int64(f.Two))
	return
}

func (f *Fuzz12) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = time.Duration(jay.ReadInt64(b[1:]))
	return nil
}

func (f *Fuzz13) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.One)
	jay.WriteTime(b[1:], f.Two)
	return
}

func (f *Fuzz13) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadTime(b[1:])
	return nil
}

func (f *Fuzz14) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.One)
	jay.WriteUintX64(b[1:], f.Two)
	return
}

func (f *Fuzz14) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadUintX64(b[1:])
	return nil
}

func (f *Fuzz15) MarshalJ() []byte {
	return []byte{jay.Bool1(f.One), f.Two}
}

func (f *Fuzz15) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = b[1]
	return nil
}

func (f *Fuzz16) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = jay.Bool1(f.One)
	jay.WriteUint16(b[1:], f.Two)
	return
}

func (f *Fuzz16) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadUint16(b[1:])
	return nil
}

func (f *Fuzz17) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = jay.Bool1(f.One)
	jay.WriteUint32(b[1:], f.Two)
	return
}

func (f *Fuzz17) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadUint32(b[1:])
	return nil
}

func (f *Fuzz18) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.One)
	jay.WriteUint64(b[1:], f.Two)
	return
}

func (f *Fuzz18) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[0])
	f.Two = jay.ReadUint64(b[1:])
	return nil
}

func (f *Fuzz19) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+jay.SizeBools(l0))
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteBools(b[2:], f.Two, l0)
	return
}

func (f *Fuzz19) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l != 2+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadBools8(b[2:], b[0])
	return nil
}

func (f *Fuzz20) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	if l0 != 0 {
		copy(b[2:], f.Two)
	}
	return
}

func (f *Fuzz20) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	if l0 != 0 {
		f.Two = b[2:]
	}
	return nil
}

func (f *Fuzz21) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteComplex64s(b[2:], f.Two)
	return
}

func (f *Fuzz21) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadComplex64s(b[2:], l0)
	return nil
}

func (f *Fuzz22) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+16*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteComplex128s(b[2:], f.Two)
	return
}

func (f *Fuzz22) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadComplex128s(b[2:], l0)
	return nil
}

func (f *Fuzz23) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteFloat32s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz23) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadFloat32s(b[2:], l0)
	return nil
}

func (f *Fuzz24) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteFloat64s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz24) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadFloat64s(b[2:], l0)
	return nil
}

func (f *Fuzz25) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteIntsX64(b[2:], f.Two)
	return
}

func (f *Fuzz25) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadIntsX64(b[2:], l0)
	return nil
}

func (f *Fuzz26) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteInt8s(b[2:], f.Two)
	return
}

func (f *Fuzz26) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadInt8s(b[2:], l0)
	return nil
}

func (f *Fuzz27) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteInt16s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz27) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadInt16s(b[2:], l0)
	return nil
}

func (f *Fuzz28) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteInt32s(b[2:], f.Two)
	return
}

func (f *Fuzz28) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz29) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteInt64s(b[2:], f.Two)
	return
}

func (f *Fuzz29) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadInt64s(b[2:], l0)
	return nil
}

func (f *Fuzz30) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteInt32s(b[2:], f.Two)
	return
}

func (f *Fuzz30) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz31) MarshalJ() (b []byte) {
	b = make([]byte, 2+jay.SizeStrings8(f.Two))
	b[1] = jay.Bool1(f.One)
	jay.WriteStrings8(b[2:], b[:1], f.Two)
	return
}

func (f *Fuzz31) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	return jay.ReadStrings8Err(b[2:], &f.Two, b[0])
}

func (f *Fuzz32) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteDurations(b[2:], f.Two)
	return
}

func (f *Fuzz32) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadDurations(b[2:], l0)
	return nil
}

func (f *Fuzz33) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteTimes(b[2:], f.Two)
	return
}

func (f *Fuzz33) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadTimes(b[2:], l0)
	return nil
}

func (f *Fuzz34) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteUintsX64(b[2:], f.Two)
	return
}

func (f *Fuzz34) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadUintsX64(b[2:], l0)
	return nil
}

func (f *Fuzz35) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	if l0 != 0 {
		copy(b[2:], f.Two)
	}
	return
}

func (f *Fuzz35) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	if l0 != 0 {
		f.Two = b[2:]
	}
	return nil
}

func (f *Fuzz36) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteUint16s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz36) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadUint16s(b[2:], l0)
	return nil
}

func (f *Fuzz37) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteUint32s(b[2:], f.Two)
	return
}

func (f *Fuzz37) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadUint32s(b[2:], l0)
	return nil
}

func (f *Fuzz38) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.One)
	jay.WriteUint64s(b[2:], f.Two)
	return
}

func (f *Fuzz38) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBool1(b[1])
	f.Two = jay.ReadUint64s(b[2:], l0)
	return nil
}

func (f *Fuzz39) MarshalJ() []byte {
	return []byte{jay.Bool1(f.Two), f.One}
}

func (f *Fuzz39) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = b[1]
	return nil
}

func (f *Fuzz40) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteComplex64(b[1:], f.Two)
	return
}

func (f *Fuzz40) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadComplex64(b[1:])
	return nil
}

func (f *Fuzz41) MarshalJ() (b []byte) {
	b = make([]byte, 17)
	b[0] = f.One
	jay.WriteComplex128(b[1:], f.Two)
	return
}

func (f *Fuzz41) UnmarshalJ(b []byte) error {
	if len(b) != 17 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadComplex128(b[1:])
	return nil
}

func (f *Fuzz42) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.One
	jay.WriteFloat32(b[1:], f.Two)
	return
}

func (f *Fuzz42) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadFloat32(b[1:])
	return nil
}

func (f *Fuzz43) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteFloat64(b[1:], f.Two)
	return
}

func (f *Fuzz43) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadFloat64(b[1:])
	return nil
}

func (f *Fuzz44) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteIntX64(b[1:], f.Two)
	return
}

func (f *Fuzz44) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadIntX64(b[1:])
	return nil
}

func (f *Fuzz45) MarshalJ() []byte {
	return []byte{f.One, byte(f.Two)}
}

func (f *Fuzz45) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = int8(b[1])
	return nil
}

func (f *Fuzz46) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = f.One
	jay.WriteInt16(b[1:], f.Two)
	return
}

func (f *Fuzz46) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadInt16(b[1:])
	return nil
}

func (f *Fuzz47) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.One
	jay.WriteInt32(b[1:], f.Two)
	return
}

func (f *Fuzz47) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz48) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteInt64(b[1:], f.Two)
	return
}

func (f *Fuzz48) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadInt64(b[1:])
	return nil
}

func (f *Fuzz49) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.One
	jay.WriteInt32(b[1:], f.Two)
	return
}

func (f *Fuzz49) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz50) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.One
	copy(b[2:], f.Two)
	return
}

func (f *Fuzz50) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = string(b[2:])
	return nil
}

func (f *Fuzz51) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteInt64(b[1:], int64(f.Two))
	return
}

func (f *Fuzz51) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = time.Duration(jay.ReadInt64(b[1:]))
	return nil
}

func (f *Fuzz52) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteTime(b[1:], f.Two)
	return
}

func (f *Fuzz52) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadTime(b[1:])
	return nil
}

func (f *Fuzz53) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteUintX64(b[1:], f.Two)
	return
}

func (f *Fuzz53) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadUintX64(b[1:])
	return nil
}

func (f *Fuzz54) MarshalJ() []byte {
	return []byte{f.One, f.Two}
}

func (f *Fuzz54) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = b[1]
	return nil
}

func (f *Fuzz55) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = f.One
	jay.WriteUint16(b[1:], f.Two)
	return
}

func (f *Fuzz55) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadUint16(b[1:])
	return nil
}

func (f *Fuzz56) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.One
	jay.WriteUint32(b[1:], f.Two)
	return
}

func (f *Fuzz56) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadUint32(b[1:])
	return nil
}

func (f *Fuzz57) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteUint64(b[1:], f.Two)
	return
}

func (f *Fuzz57) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadUint64(b[1:])
	return nil
}

func (f *Fuzz58) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+jay.SizeBools(l0))
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteBools(b[2:], f.Two, l0)
	return
}

func (f *Fuzz58) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l != 2+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadBools8(b[2:], b[0])
	return nil
}

func (f *Fuzz59) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.One
	if l0 != 0 {
		copy(b[2:], f.Two)
	}
	return
}

func (f *Fuzz59) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	if l0 != 0 {
		f.Two = b[2:]
	}
	return nil
}

func (f *Fuzz60) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteComplex64s(b[2:], f.Two)
	return
}

func (f *Fuzz60) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadComplex64s(b[2:], l0)
	return nil
}

func (f *Fuzz61) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+16*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteComplex128s(b[2:], f.Two)
	return
}

func (f *Fuzz61) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadComplex128s(b[2:], l0)
	return nil
}

func (f *Fuzz62) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteFloat32s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz62) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadFloat32s(b[2:], l0)
	return nil
}

func (f *Fuzz63) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteFloat64s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz63) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadFloat64s(b[2:], l0)
	return nil
}

func (f *Fuzz64) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteIntsX64(b[2:], f.Two)
	return
}

func (f *Fuzz64) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadIntsX64(b[2:], l0)
	return nil
}

func (f *Fuzz65) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt8s(b[2:], f.Two)
	return
}

func (f *Fuzz65) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt8s(b[2:], l0)
	return nil
}

func (f *Fuzz66) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt16s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz66) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt16s(b[2:], l0)
	return nil
}

func (f *Fuzz67) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt32s(b[2:], f.Two)
	return
}

func (f *Fuzz67) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz68) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt64s(b[2:], f.Two)
	return
}

func (f *Fuzz68) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt64s(b[2:], l0)
	return nil
}

func (f *Fuzz69) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt32s(b[2:], f.Two)
	return
}

func (f *Fuzz69) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz70) MarshalJ() (b []byte) {
	b = make([]byte, 2+jay.SizeStrings8(f.Two))
	b[1] = f.One
	jay.WriteStrings8(b[2:], b[:1], f.Two)
	return
}

func (f *Fuzz70) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	return jay.ReadStrings8Err(b[2:], &f.Two, b[0])
}

func (f *Fuzz71) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteDurations(b[2:], f.Two)
	return
}

func (f *Fuzz71) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadDurations(b[2:], l0)
	return nil
}

func (f *Fuzz72) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteTimes(b[2:], f.Two)
	return
}

func (f *Fuzz72) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadTimes(b[2:], l0)
	return nil
}

func (f *Fuzz73) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteUintsX64(b[2:], f.Two)
	return
}

func (f *Fuzz73) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadUintsX64(b[2:], l0)
	return nil
}

func (f *Fuzz74) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.One
	if l0 != 0 {
		copy(b[2:], f.Two)
	}
	return
}

func (f *Fuzz74) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	if l0 != 0 {
		f.Two = b[2:]
	}
	return nil
}

func (f *Fuzz75) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteUint16s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz75) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadUint16s(b[2:], l0)
	return nil
}

func (f *Fuzz76) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteUint32s(b[2:], f.Two)
	return
}

func (f *Fuzz76) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadUint32s(b[2:], l0)
	return nil
}

func (f *Fuzz77) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteUint64s(b[2:], f.Two)
	return
}

func (f *Fuzz77) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadUint64s(b[2:], l0)
	return nil
}

func (f *Fuzz78) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.Two)
	jay.WriteComplex64(b[1:], f.One)
	return
}

func (f *Fuzz78) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadComplex64(b[1:])
	return nil
}

func (f *Fuzz79) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteComplex64(b[1:], f.One)
	return
}

func (f *Fuzz79) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadComplex64(b[1:])
	return nil
}

func (f *Fuzz80) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteComplex128(b[8:], f.Two)
	return
}

func (f *Fuzz80) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadComplex128(b[8:])
	return nil
}

func (f *Fuzz81) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteFloat32(b[8:], f.Two)
	return
}

func (f *Fuzz81) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadFloat32(b[8:])
	return nil
}

func (f *Fuzz82) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteFloat64(b[8:], f.Two)
	return
}

func (f *Fuzz82) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadFloat64(b[8:])
	return nil
}

func (f *Fuzz83) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteIntX64(b[8:], f.Two)
	return
}

func (f *Fuzz83) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadIntX64(b[8:])
	return nil
}

func (f *Fuzz84) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.Two)
	jay.WriteComplex64(b[1:], f.One)
	return
}

func (f *Fuzz84) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadComplex64(b[1:])
	return nil
}

func (f *Fuzz85) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteInt16(b[8:], f.Two)
	return
}

func (f *Fuzz85) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadInt16(b[8:])
	return nil
}

func (f *Fuzz86) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz86) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz87) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteInt64(b[8:], f.Two)
	return
}

func (f *Fuzz87) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadInt64(b[8:])
	return nil
}

func (f *Fuzz88) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz88) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz89) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	copy(b[9:], f.Two)
	return
}

func (f *Fuzz89) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = string(b[9:])
	return nil
}

func (f *Fuzz90) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteInt64(b[8:], int64(f.Two))
	return
}

func (f *Fuzz90) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = time.Duration(jay.ReadInt64(b[8:]))
	return nil
}

func (f *Fuzz91) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteTime(b[8:], f.Two)
	return
}

func (f *Fuzz91) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadTime(b[8:])
	return nil
}

func (f *Fuzz92) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteUintX64(b[8:], f.Two)
	return
}

func (f *Fuzz92) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadUintX64(b[8:])
	return nil
}

func (f *Fuzz93) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteComplex64(b[1:], f.One)
	return
}

func (f *Fuzz93) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadComplex64(b[1:])
	return nil
}

func (f *Fuzz94) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteUint16(b[8:], f.Two)
	return
}

func (f *Fuzz94) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadUint16(b[8:])
	return nil
}

func (f *Fuzz95) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteUint32(b[8:], f.Two)
	return
}

func (f *Fuzz95) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadUint32(b[8:])
	return nil
}

func (f *Fuzz96) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteComplex64(b[:8], f.One)
	jay.WriteUint64(b[8:], f.Two)
	return
}

func (f *Fuzz96) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[:8])
	f.Two = jay.ReadUint64(b[8:])
	return nil
}

func (f *Fuzz97) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteBools(b[9:], f.Two, l0)
	return
}

func (f *Fuzz97) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz98) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz98) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz99) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteComplex64s(b[9:], f.Two)
	return
}

func (f *Fuzz99) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz100) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteComplex128s(b[9:], f.Two)
	return
}

func (f *Fuzz100) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz101) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteFloat32s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz101) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz102) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteFloat64s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz102) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz103) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteIntsX64(b[9:], f.Two)
	return
}

func (f *Fuzz103) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz104) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteInt8s(b[9:], f.Two)
	return
}

func (f *Fuzz104) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz105) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteInt16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz105) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz106) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz106) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz107) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteInt64s(b[9:], f.Two)
	return
}

func (f *Fuzz107) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz108) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz108) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz109) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.Two))
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteStrings8(b[9:], b[:1], f.Two)
	return
}

func (f *Fuzz109) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	return nil
}

func (f *Fuzz110) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteDurations(b[9:], f.Two)
	return
}

func (f *Fuzz110) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz111) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteTimes(b[9:], f.Two)
	return
}

func (f *Fuzz111) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz112) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteUintsX64(b[9:], f.Two)
	return
}

func (f *Fuzz112) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz113) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz113) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz114) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteUint16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz114) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz115) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteUint32s(b[9:], f.Two)
	return
}

func (f *Fuzz115) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz116) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.One)
	jay.WriteUint64s(b[9:], f.Two)
	return
}

func (f *Fuzz116) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64(b[1:9])
	f.Two = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz117) MarshalJ() (b []byte) {
	b = make([]byte, 17)
	b[0] = jay.Bool1(f.Two)
	jay.WriteComplex128(b[1:], f.One)
	return
}

func (f *Fuzz117) UnmarshalJ(b []byte) error {
	if len(b) != 17 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadComplex128(b[1:])
	return nil
}

func (f *Fuzz118) MarshalJ() (b []byte) {
	b = make([]byte, 17)
	b[0] = f.Two
	jay.WriteComplex128(b[1:], f.One)
	return
}

func (f *Fuzz118) UnmarshalJ(b []byte) error {
	if len(b) != 17 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadComplex128(b[1:])
	return nil
}

func (f *Fuzz119) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteComplex64(b[16:], f.Two)
	return
}

func (f *Fuzz119) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadComplex64(b[16:])
	return nil
}

func (f *Fuzz120) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteFloat32(b[16:], f.Two)
	return
}

func (f *Fuzz120) UnmarshalJ(b []byte) error {
	if len(b) != 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadFloat32(b[16:])
	return nil
}

func (f *Fuzz121) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteFloat64(b[16:], f.Two)
	return
}

func (f *Fuzz121) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadFloat64(b[16:])
	return nil
}

func (f *Fuzz122) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteIntX64(b[16:], f.Two)
	return
}

func (f *Fuzz122) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadIntX64(b[16:])
	return nil
}

func (f *Fuzz123) MarshalJ() (b []byte) {
	b = make([]byte, 17)
	b[0] = byte(f.Two)
	jay.WriteComplex128(b[1:], f.One)
	return
}

func (f *Fuzz123) UnmarshalJ(b []byte) error {
	if len(b) != 17 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadComplex128(b[1:])
	return nil
}

func (f *Fuzz124) MarshalJ() (b []byte) {
	b = make([]byte, 18)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteInt16(b[16:], f.Two)
	return
}

func (f *Fuzz124) UnmarshalJ(b []byte) error {
	if len(b) != 18 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadInt16(b[16:])
	return nil
}

func (f *Fuzz125) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteInt32(b[16:], f.Two)
	return
}

func (f *Fuzz125) UnmarshalJ(b []byte) error {
	if len(b) != 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadInt32(b[16:])
	return nil
}

func (f *Fuzz126) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteInt64(b[16:], f.Two)
	return
}

func (f *Fuzz126) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadInt64(b[16:])
	return nil
}

func (f *Fuzz127) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteInt32(b[16:], f.Two)
	return
}

func (f *Fuzz127) UnmarshalJ(b []byte) error {
	if len(b) != 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadInt32(b[16:])
	return nil
}

func (f *Fuzz128) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	copy(b[17:], f.Two)
	return
}

func (f *Fuzz128) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = string(b[17:])
	return nil
}

func (f *Fuzz129) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteInt64(b[16:], int64(f.Two))
	return
}

func (f *Fuzz129) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = time.Duration(jay.ReadInt64(b[16:]))
	return nil
}

func (f *Fuzz130) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteTime(b[16:], f.Two)
	return
}

func (f *Fuzz130) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadTime(b[16:])
	return nil
}

func (f *Fuzz131) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteUintX64(b[16:], f.Two)
	return
}

func (f *Fuzz131) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadUintX64(b[16:])
	return nil
}

func (f *Fuzz132) MarshalJ() (b []byte) {
	b = make([]byte, 17)
	b[0] = f.Two
	jay.WriteComplex128(b[1:], f.One)
	return
}

func (f *Fuzz132) UnmarshalJ(b []byte) error {
	if len(b) != 17 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadComplex128(b[1:])
	return nil
}

func (f *Fuzz133) MarshalJ() (b []byte) {
	b = make([]byte, 18)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteUint16(b[16:], f.Two)
	return
}

func (f *Fuzz133) UnmarshalJ(b []byte) error {
	if len(b) != 18 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadUint16(b[16:])
	return nil
}

func (f *Fuzz134) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteUint32(b[16:], f.Two)
	return
}

func (f *Fuzz134) UnmarshalJ(b []byte) error {
	if len(b) != 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadUint32(b[16:])
	return nil
}

func (f *Fuzz135) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteComplex128(b[:16], f.One)
	jay.WriteUint64(b[16:], f.Two)
	return
}

func (f *Fuzz135) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[:16])
	f.Two = jay.ReadUint64(b[16:])
	return nil
}

func (f *Fuzz136) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteBools(b[17:], f.Two, l0)
	return
}

func (f *Fuzz136) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 || l != 17+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadBools8(b[17:], b[0])
	return nil
}

func (f *Fuzz137) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	if l0 != 0 {
		copy(b[17:], f.Two)
	}
	return
}

func (f *Fuzz137) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	if l0 != 0 {
		f.Two = b[17:]
	}
	return nil
}

func (f *Fuzz138) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteComplex64s(b[17:], f.Two)
	return
}

func (f *Fuzz138) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadComplex64s(b[17:], l0)
	return nil
}

func (f *Fuzz139) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+16*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteComplex128s(b[17:], f.Two)
	return
}

func (f *Fuzz139) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadComplex128s(b[17:], l0)
	return nil
}

func (f *Fuzz140) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteFloat32s(b[17:], f.Two, l0)
	return
}

func (f *Fuzz140) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadFloat32s(b[17:], l0)
	return nil
}

func (f *Fuzz141) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteFloat64s(b[17:], f.Two, l0)
	return
}

func (f *Fuzz141) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadFloat64s(b[17:], l0)
	return nil
}

func (f *Fuzz142) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteIntsX64(b[17:], f.Two)
	return
}

func (f *Fuzz142) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadIntsX64(b[17:], l0)
	return nil
}

func (f *Fuzz143) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteInt8s(b[17:], f.Two)
	return
}

func (f *Fuzz143) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadInt8s(b[17:], l0)
	return nil
}

func (f *Fuzz144) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+2*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteInt16s(b[17:], f.Two, l0)
	return
}

func (f *Fuzz144) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadInt16s(b[17:], l0)
	return nil
}

func (f *Fuzz145) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteInt32s(b[17:], f.Two)
	return
}

func (f *Fuzz145) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadInt32s(b[17:], l0)
	return nil
}

func (f *Fuzz146) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteInt64s(b[17:], f.Two)
	return
}

func (f *Fuzz146) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadInt64s(b[17:], l0)
	return nil
}

func (f *Fuzz147) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteInt32s(b[17:], f.Two)
	return
}

func (f *Fuzz147) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadInt32s(b[17:], l0)
	return nil
}

func (f *Fuzz148) MarshalJ() (b []byte) {
	b = make([]byte, 17+jay.SizeStrings8(f.Two))
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteStrings8(b[17:], b[:1], f.Two)
	return
}

func (f *Fuzz148) UnmarshalJ(b []byte) error {
	if len(b) < 17 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[17:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	return nil
}

func (f *Fuzz149) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteDurations(b[17:], f.Two)
	return
}

func (f *Fuzz149) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadDurations(b[17:], l0)
	return nil
}

func (f *Fuzz150) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteTimes(b[17:], f.Two)
	return
}

func (f *Fuzz150) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadTimes(b[17:], l0)
	return nil
}

func (f *Fuzz151) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteUintsX64(b[17:], f.Two)
	return
}

func (f *Fuzz151) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadUintsX64(b[17:], l0)
	return nil
}

func (f *Fuzz152) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	if l0 != 0 {
		copy(b[17:], f.Two)
	}
	return
}

func (f *Fuzz152) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	if l0 != 0 {
		f.Two = b[17:]
	}
	return nil
}

func (f *Fuzz153) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+2*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteUint16s(b[17:], f.Two, l0)
	return
}

func (f *Fuzz153) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadUint16s(b[17:], l0)
	return nil
}

func (f *Fuzz154) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteUint32s(b[17:], f.Two)
	return
}

func (f *Fuzz154) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadUint32s(b[17:], l0)
	return nil
}

func (f *Fuzz155) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.One)
	jay.WriteUint64s(b[17:], f.Two)
	return
}

func (f *Fuzz155) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128(b[1:17])
	f.Two = jay.ReadUint64s(b[17:], l0)
	return nil
}

func (f *Fuzz156) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = jay.Bool1(f.Two)
	jay.WriteFloat32(b[1:], f.One)
	return
}

func (f *Fuzz156) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadFloat32(b[1:])
	return nil
}

func (f *Fuzz157) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.Two
	jay.WriteFloat32(b[1:], f.One)
	return
}

func (f *Fuzz157) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadFloat32(b[1:])
	return nil
}

func (f *Fuzz158) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteComplex64(b[4:], f.Two)
	return
}

func (f *Fuzz158) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadComplex64(b[4:])
	return nil
}

func (f *Fuzz159) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteComplex128(b[4:], f.Two)
	return
}

func (f *Fuzz159) UnmarshalJ(b []byte) error {
	if len(b) != 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadComplex128(b[4:])
	return nil
}

func (f *Fuzz160) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteFloat64(b[4:], f.Two)
	return
}

func (f *Fuzz160) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadFloat64(b[4:])
	return nil
}

func (f *Fuzz161) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteIntX64(b[4:], f.Two)
	return
}

func (f *Fuzz161) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadIntX64(b[4:])
	return nil
}

func (f *Fuzz162) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = byte(f.Two)
	jay.WriteFloat32(b[1:], f.One)
	return
}

func (f *Fuzz162) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadFloat32(b[1:])
	return nil
}

func (f *Fuzz163) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteInt16(b[4:], f.Two)
	return
}

func (f *Fuzz163) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadInt16(b[4:])
	return nil
}

func (f *Fuzz164) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteInt32(b[4:], f.Two)
	return
}

func (f *Fuzz164) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadInt32(b[4:])
	return nil
}

func (f *Fuzz165) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteInt64(b[4:], f.Two)
	return
}

func (f *Fuzz165) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadInt64(b[4:])
	return nil
}

func (f *Fuzz166) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteInt32(b[4:], f.Two)
	return
}

func (f *Fuzz166) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadInt32(b[4:])
	return nil
}

func (f *Fuzz167) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	copy(b[5:], f.Two)
	return
}

func (f *Fuzz167) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = string(b[5:])
	return nil
}

func (f *Fuzz168) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteInt64(b[4:], int64(f.Two))
	return
}

func (f *Fuzz168) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = time.Duration(jay.ReadInt64(b[4:]))
	return nil
}

func (f *Fuzz169) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteTime(b[4:], f.Two)
	return
}

func (f *Fuzz169) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadTime(b[4:])
	return nil
}

func (f *Fuzz170) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteUintX64(b[4:], f.Two)
	return
}

func (f *Fuzz170) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadUintX64(b[4:])
	return nil
}

func (f *Fuzz171) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.Two
	jay.WriteFloat32(b[1:], f.One)
	return
}

func (f *Fuzz171) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadFloat32(b[1:])
	return nil
}

func (f *Fuzz172) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteUint16(b[4:], f.Two)
	return
}

func (f *Fuzz172) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadUint16(b[4:])
	return nil
}

func (f *Fuzz173) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteUint32(b[4:], f.Two)
	return
}

func (f *Fuzz173) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadUint32(b[4:])
	return nil
}

func (f *Fuzz174) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], f.One)
	jay.WriteUint64(b[4:], f.Two)
	return
}

func (f *Fuzz174) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[:4])
	f.Two = jay.ReadUint64(b[4:])
	return nil
}

func (f *Fuzz175) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteBools(b[5:], f.Two, l0)
	return
}

func (f *Fuzz175) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 || l != 5+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadBools8(b[5:], b[0])
	return nil
}

func (f *Fuzz176) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	if l0 != 0 {
		copy(b[5:], f.Two)
	}
	return
}

func (f *Fuzz176) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	if l0 != 0 {
		f.Two = b[5:]
	}
	return nil
}

func (f *Fuzz177) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteComplex64s(b[5:], f.Two)
	return
}

func (f *Fuzz177) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadComplex64s(b[5:], l0)
	return nil
}

func (f *Fuzz178) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+16*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteComplex128s(b[5:], f.Two)
	return
}

func (f *Fuzz178) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadComplex128s(b[5:], l0)
	return nil
}

func (f *Fuzz179) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteFloat32s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz179) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadFloat32s(b[5:], l0)
	return nil
}

func (f *Fuzz180) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteFloat64s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz180) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadFloat64s(b[5:], l0)
	return nil
}

func (f *Fuzz181) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteIntsX64(b[5:], f.Two)
	return
}

func (f *Fuzz181) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadIntsX64(b[5:], l0)
	return nil
}

func (f *Fuzz182) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteInt8s(b[5:], f.Two)
	return
}

func (f *Fuzz182) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadInt8s(b[5:], l0)
	return nil
}

func (f *Fuzz183) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteInt16s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz183) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadInt16s(b[5:], l0)
	return nil
}

func (f *Fuzz184) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteInt32s(b[5:], f.Two)
	return
}

func (f *Fuzz184) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz185) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteInt64s(b[5:], f.Two)
	return
}

func (f *Fuzz185) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadInt64s(b[5:], l0)
	return nil
}

func (f *Fuzz186) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteInt32s(b[5:], f.Two)
	return
}

func (f *Fuzz186) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz187) MarshalJ() (b []byte) {
	b = make([]byte, 5+jay.SizeStrings8(f.Two))
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteStrings8(b[5:], b[:1], f.Two)
	return
}

func (f *Fuzz187) UnmarshalJ(b []byte) error {
	if len(b) < 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	return jay.ReadStrings8Err(b[5:], &f.Two, b[0])
}

func (f *Fuzz188) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteDurations(b[5:], f.Two)
	return
}

func (f *Fuzz188) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadDurations(b[5:], l0)
	return nil
}

func (f *Fuzz189) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteTimes(b[5:], f.Two)
	return
}

func (f *Fuzz189) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadTimes(b[5:], l0)
	return nil
}

func (f *Fuzz190) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteUintsX64(b[5:], f.Two)
	return
}

func (f *Fuzz190) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadUintsX64(b[5:], l0)
	return nil
}

func (f *Fuzz191) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	if l0 != 0 {
		copy(b[5:], f.Two)
	}
	return
}

func (f *Fuzz191) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	if l0 != 0 {
		f.Two = b[5:]
	}
	return nil
}

func (f *Fuzz192) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteUint16s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz192) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadUint16s(b[5:], l0)
	return nil
}

func (f *Fuzz193) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteUint32s(b[5:], f.Two)
	return
}

func (f *Fuzz193) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadUint32s(b[5:], l0)
	return nil
}

func (f *Fuzz194) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.One)
	jay.WriteUint64s(b[5:], f.Two)
	return
}

func (f *Fuzz194) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32(b[1:5])
	f.Two = jay.ReadUint64s(b[5:], l0)
	return nil
}

func (f *Fuzz195) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.Two)
	jay.WriteFloat64(b[1:], f.One)
	return
}

func (f *Fuzz195) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadFloat64(b[1:])
	return nil
}

func (f *Fuzz196) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteFloat64(b[1:], f.One)
	return
}

func (f *Fuzz196) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadFloat64(b[1:])
	return nil
}

func (f *Fuzz197) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteComplex64(b[8:], f.Two)
	return
}

func (f *Fuzz197) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadComplex64(b[8:])
	return nil
}

func (f *Fuzz198) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteComplex128(b[8:], f.Two)
	return
}

func (f *Fuzz198) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadComplex128(b[8:])
	return nil
}

func (f *Fuzz199) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteFloat32(b[8:], f.Two)
	return
}

func (f *Fuzz199) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadFloat32(b[8:])
	return nil
}

func (f *Fuzz200) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteIntX64(b[8:], f.Two)
	return
}

func (f *Fuzz200) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadIntX64(b[8:])
	return nil
}

func (f *Fuzz201) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.Two)
	jay.WriteFloat64(b[1:], f.One)
	return
}

func (f *Fuzz201) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadFloat64(b[1:])
	return nil
}

func (f *Fuzz202) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteInt16(b[8:], f.Two)
	return
}

func (f *Fuzz202) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadInt16(b[8:])
	return nil
}

func (f *Fuzz203) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz203) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz204) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteInt64(b[8:], f.Two)
	return
}

func (f *Fuzz204) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadInt64(b[8:])
	return nil
}

func (f *Fuzz205) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz205) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz206) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	copy(b[9:], f.Two)
	return
}

func (f *Fuzz206) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = string(b[9:])
	return nil
}

func (f *Fuzz207) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteInt64(b[8:], int64(f.Two))
	return
}

func (f *Fuzz207) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = time.Duration(jay.ReadInt64(b[8:]))
	return nil
}

func (f *Fuzz208) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteTime(b[8:], f.Two)
	return
}

func (f *Fuzz208) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadTime(b[8:])
	return nil
}

func (f *Fuzz209) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteUintX64(b[8:], f.Two)
	return
}

func (f *Fuzz209) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadUintX64(b[8:])
	return nil
}

func (f *Fuzz210) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteFloat64(b[1:], f.One)
	return
}

func (f *Fuzz210) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadFloat64(b[1:])
	return nil
}

func (f *Fuzz211) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteUint16(b[8:], f.Two)
	return
}

func (f *Fuzz211) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadUint16(b[8:])
	return nil
}

func (f *Fuzz212) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteUint32(b[8:], f.Two)
	return
}

func (f *Fuzz212) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadUint32(b[8:])
	return nil
}

func (f *Fuzz213) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteFloat64(b[:8], f.One)
	jay.WriteUint64(b[8:], f.Two)
	return
}

func (f *Fuzz213) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[:8])
	f.Two = jay.ReadUint64(b[8:])
	return nil
}

func (f *Fuzz214) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteBools(b[9:], f.Two, l0)
	return
}

func (f *Fuzz214) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz215) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz215) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz216) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteComplex64s(b[9:], f.Two)
	return
}

func (f *Fuzz216) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz217) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteComplex128s(b[9:], f.Two)
	return
}

func (f *Fuzz217) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz218) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteFloat32s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz218) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz219) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteFloat64s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz219) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz220) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteIntsX64(b[9:], f.Two)
	return
}

func (f *Fuzz220) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz221) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteInt8s(b[9:], f.Two)
	return
}

func (f *Fuzz221) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz222) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteInt16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz222) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz223) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz223) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz224) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteInt64s(b[9:], f.Two)
	return
}

func (f *Fuzz224) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz225) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz225) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz226) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.Two))
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteStrings8(b[9:], b[:1], f.Two)
	return
}

func (f *Fuzz226) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	return nil
}

func (f *Fuzz227) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteDurations(b[9:], f.Two)
	return
}

func (f *Fuzz227) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz228) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteTimes(b[9:], f.Two)
	return
}

func (f *Fuzz228) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz229) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteUintsX64(b[9:], f.Two)
	return
}

func (f *Fuzz229) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz230) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz230) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz231) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteUint16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz231) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz232) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteUint32s(b[9:], f.Two)
	return
}

func (f *Fuzz232) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz233) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.One)
	jay.WriteUint64s(b[9:], f.Two)
	return
}

func (f *Fuzz233) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64(b[1:9])
	f.Two = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz234) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.Two)
	jay.WriteIntX64(b[1:], f.One)
	return
}

func (f *Fuzz234) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadIntX64(b[1:])
	return nil
}

func (f *Fuzz235) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteIntX64(b[1:], f.One)
	return
}

func (f *Fuzz235) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadIntX64(b[1:])
	return nil
}

func (f *Fuzz236) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteComplex64(b[8:], f.Two)
	return
}

func (f *Fuzz236) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadComplex64(b[8:])
	return nil
}

func (f *Fuzz237) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteComplex128(b[8:], f.Two)
	return
}

func (f *Fuzz237) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadComplex128(b[8:])
	return nil
}

func (f *Fuzz238) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteFloat32(b[8:], f.Two)
	return
}

func (f *Fuzz238) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadFloat32(b[8:])
	return nil
}

func (f *Fuzz239) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteFloat64(b[8:], f.Two)
	return
}

func (f *Fuzz239) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadFloat64(b[8:])
	return nil
}

func (f *Fuzz240) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.Two)
	jay.WriteIntX64(b[1:], f.One)
	return
}

func (f *Fuzz240) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadIntX64(b[1:])
	return nil
}

func (f *Fuzz241) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteInt16(b[8:], f.Two)
	return
}

func (f *Fuzz241) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadInt16(b[8:])
	return nil
}

func (f *Fuzz242) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz242) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz243) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteInt64(b[8:], f.Two)
	return
}

func (f *Fuzz243) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadInt64(b[8:])
	return nil
}

func (f *Fuzz244) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz244) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz245) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	copy(b[9:], f.Two)
	return
}

func (f *Fuzz245) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = string(b[9:])
	return nil
}

func (f *Fuzz246) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteInt64(b[8:], int64(f.Two))
	return
}

func (f *Fuzz246) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = time.Duration(jay.ReadInt64(b[8:]))
	return nil
}

func (f *Fuzz247) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteTime(b[8:], f.Two)
	return
}

func (f *Fuzz247) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadTime(b[8:])
	return nil
}

func (f *Fuzz248) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteUintX64(b[8:], f.Two)
	return
}

func (f *Fuzz248) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadUintX64(b[8:])
	return nil
}

func (f *Fuzz249) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteIntX64(b[1:], f.One)
	return
}

func (f *Fuzz249) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadIntX64(b[1:])
	return nil
}

func (f *Fuzz250) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteUint16(b[8:], f.Two)
	return
}

func (f *Fuzz250) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadUint16(b[8:])
	return nil
}

func (f *Fuzz251) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteUint32(b[8:], f.Two)
	return
}

func (f *Fuzz251) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadUint32(b[8:])
	return nil
}

func (f *Fuzz252) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteIntX64(b[:8], f.One)
	jay.WriteUint64(b[8:], f.Two)
	return
}

func (f *Fuzz252) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[:8])
	f.Two = jay.ReadUint64(b[8:])
	return nil
}

func (f *Fuzz253) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteBools(b[9:], f.Two, l0)
	return
}

func (f *Fuzz253) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz254) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz254) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz255) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteComplex64s(b[9:], f.Two)
	return
}

func (f *Fuzz255) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz256) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteComplex128s(b[9:], f.Two)
	return
}

func (f *Fuzz256) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz257) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteFloat32s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz257) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz258) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteFloat64s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz258) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz259) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteIntsX64(b[9:], f.Two)
	return
}

func (f *Fuzz259) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz260) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteInt8s(b[9:], f.Two)
	return
}

func (f *Fuzz260) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz261) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteInt16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz261) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz262) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz262) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz263) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteInt64s(b[9:], f.Two)
	return
}

func (f *Fuzz263) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz264) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz264) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz265) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.Two))
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteStrings8(b[9:], b[:1], f.Two)
	return
}

func (f *Fuzz265) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	return nil
}

func (f *Fuzz266) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteDurations(b[9:], f.Two)
	return
}

func (f *Fuzz266) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz267) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteTimes(b[9:], f.Two)
	return
}

func (f *Fuzz267) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz268) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteUintsX64(b[9:], f.Two)
	return
}

func (f *Fuzz268) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz269) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz269) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz270) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteUint16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz270) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz271) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteUint32s(b[9:], f.Two)
	return
}

func (f *Fuzz271) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz272) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.One)
	jay.WriteUint64s(b[9:], f.Two)
	return
}

func (f *Fuzz272) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntX64(b[1:9])
	f.Two = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz273) MarshalJ() []byte {
	return []byte{jay.Bool1(f.Two), byte(f.One)}
}

func (f *Fuzz273) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = int8(b[1])
	return nil
}

func (f *Fuzz274) MarshalJ() []byte {
	return []byte{byte(f.One), f.Two}
}

func (f *Fuzz274) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = b[1]
	return nil
}

func (f *Fuzz275) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.One)
	jay.WriteComplex64(b[1:], f.Two)
	return
}

func (f *Fuzz275) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadComplex64(b[1:])
	return nil
}

func (f *Fuzz276) MarshalJ() (b []byte) {
	b = make([]byte, 17)
	b[0] = byte(f.One)
	jay.WriteComplex128(b[1:], f.Two)
	return
}

func (f *Fuzz276) UnmarshalJ(b []byte) error {
	if len(b) != 17 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadComplex128(b[1:])
	return nil
}

func (f *Fuzz277) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = byte(f.One)
	jay.WriteFloat32(b[1:], f.Two)
	return
}

func (f *Fuzz277) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadFloat32(b[1:])
	return nil
}

func (f *Fuzz278) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.One)
	jay.WriteFloat64(b[1:], f.Two)
	return
}

func (f *Fuzz278) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadFloat64(b[1:])
	return nil
}

func (f *Fuzz279) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.One)
	jay.WriteIntX64(b[1:], f.Two)
	return
}

func (f *Fuzz279) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadIntX64(b[1:])
	return nil
}

func (f *Fuzz280) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = byte(f.One)
	jay.WriteInt16(b[1:], f.Two)
	return
}

func (f *Fuzz280) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadInt16(b[1:])
	return nil
}

func (f *Fuzz281) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = byte(f.One)
	jay.WriteInt32(b[1:], f.Two)
	return
}

func (f *Fuzz281) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz282) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.One)
	jay.WriteInt64(b[1:], f.Two)
	return
}

func (f *Fuzz282) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadInt64(b[1:])
	return nil
}

func (f *Fuzz283) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = byte(f.One)
	jay.WriteInt32(b[1:], f.Two)
	return
}

func (f *Fuzz283) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz284) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	copy(b[2:], f.Two)
	return
}

func (f *Fuzz284) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = string(b[2:])
	return nil
}

func (f *Fuzz285) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.One)
	jay.WriteInt64(b[1:], int64(f.Two))
	return
}

func (f *Fuzz285) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = time.Duration(jay.ReadInt64(b[1:]))
	return nil
}

func (f *Fuzz286) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.One)
	jay.WriteTime(b[1:], f.Two)
	return
}

func (f *Fuzz286) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadTime(b[1:])
	return nil
}

func (f *Fuzz287) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.One)
	jay.WriteUintX64(b[1:], f.Two)
	return
}

func (f *Fuzz287) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadUintX64(b[1:])
	return nil
}

func (f *Fuzz288) MarshalJ() []byte {
	return []byte{byte(f.One), f.Two}
}

func (f *Fuzz288) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = b[1]
	return nil
}

func (f *Fuzz289) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = byte(f.One)
	jay.WriteUint16(b[1:], f.Two)
	return
}

func (f *Fuzz289) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadUint16(b[1:])
	return nil
}

func (f *Fuzz290) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = byte(f.One)
	jay.WriteUint32(b[1:], f.Two)
	return
}

func (f *Fuzz290) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadUint32(b[1:])
	return nil
}

func (f *Fuzz291) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.One)
	jay.WriteUint64(b[1:], f.Two)
	return
}

func (f *Fuzz291) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[0])
	f.Two = jay.ReadUint64(b[1:])
	return nil
}

func (f *Fuzz292) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+jay.SizeBools(l0))
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteBools(b[2:], f.Two, l0)
	return
}

func (f *Fuzz292) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l != 2+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadBools8(b[2:], b[0])
	return nil
}

func (f *Fuzz293) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	if l0 != 0 {
		copy(b[2:], f.Two)
	}
	return
}

func (f *Fuzz293) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	if l0 != 0 {
		f.Two = b[2:]
	}
	return nil
}

func (f *Fuzz294) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteComplex64s(b[2:], f.Two)
	return
}

func (f *Fuzz294) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadComplex64s(b[2:], l0)
	return nil
}

func (f *Fuzz295) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+16*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteComplex128s(b[2:], f.Two)
	return
}

func (f *Fuzz295) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadComplex128s(b[2:], l0)
	return nil
}

func (f *Fuzz296) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteFloat32s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz296) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadFloat32s(b[2:], l0)
	return nil
}

func (f *Fuzz297) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteFloat64s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz297) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadFloat64s(b[2:], l0)
	return nil
}

func (f *Fuzz298) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteIntsX64(b[2:], f.Two)
	return
}

func (f *Fuzz298) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadIntsX64(b[2:], l0)
	return nil
}

func (f *Fuzz299) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteInt8s(b[2:], f.Two)
	return
}

func (f *Fuzz299) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadInt8s(b[2:], l0)
	return nil
}

func (f *Fuzz300) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteInt16s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz300) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadInt16s(b[2:], l0)
	return nil
}

func (f *Fuzz301) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteInt32s(b[2:], f.Two)
	return
}

func (f *Fuzz301) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz302) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteInt64s(b[2:], f.Two)
	return
}

func (f *Fuzz302) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadInt64s(b[2:], l0)
	return nil
}

func (f *Fuzz303) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteInt32s(b[2:], f.Two)
	return
}

func (f *Fuzz303) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz304) MarshalJ() (b []byte) {
	b = make([]byte, 2+jay.SizeStrings8(f.Two))
	b[1] = byte(f.One)
	jay.WriteStrings8(b[2:], b[:1], f.Two)
	return
}

func (f *Fuzz304) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	return jay.ReadStrings8Err(b[2:], &f.Two, b[0])
}

func (f *Fuzz305) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteDurations(b[2:], f.Two)
	return
}

func (f *Fuzz305) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadDurations(b[2:], l0)
	return nil
}

func (f *Fuzz306) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteTimes(b[2:], f.Two)
	return
}

func (f *Fuzz306) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadTimes(b[2:], l0)
	return nil
}

func (f *Fuzz307) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteUintsX64(b[2:], f.Two)
	return
}

func (f *Fuzz307) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadUintsX64(b[2:], l0)
	return nil
}

func (f *Fuzz308) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	if l0 != 0 {
		copy(b[2:], f.Two)
	}
	return
}

func (f *Fuzz308) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	if l0 != 0 {
		f.Two = b[2:]
	}
	return nil
}

func (f *Fuzz309) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteUint16s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz309) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadUint16s(b[2:], l0)
	return nil
}

func (f *Fuzz310) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteUint32s(b[2:], f.Two)
	return
}

func (f *Fuzz310) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadUint32s(b[2:], l0)
	return nil
}

func (f *Fuzz311) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.One)
	jay.WriteUint64s(b[2:], f.Two)
	return
}

func (f *Fuzz311) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = int8(b[1])
	f.Two = jay.ReadUint64s(b[2:], l0)
	return nil
}

func (f *Fuzz312) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = jay.Bool1(f.Two)
	jay.WriteInt16(b[1:], f.One)
	return
}

func (f *Fuzz312) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadInt16(b[1:])
	return nil
}

func (f *Fuzz313) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = f.Two
	jay.WriteInt16(b[1:], f.One)
	return
}

func (f *Fuzz313) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadInt16(b[1:])
	return nil
}

func (f *Fuzz314) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteComplex64(b[2:], f.Two)
	return
}

func (f *Fuzz314) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadComplex64(b[2:])
	return nil
}

func (f *Fuzz315) MarshalJ() (b []byte) {
	b = make([]byte, 18)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteComplex128(b[2:], f.Two)
	return
}

func (f *Fuzz315) UnmarshalJ(b []byte) error {
	if len(b) != 18 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadComplex128(b[2:])
	return nil
}

func (f *Fuzz316) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteFloat32(b[2:], f.Two)
	return
}

func (f *Fuzz316) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadFloat32(b[2:])
	return nil
}

func (f *Fuzz317) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteFloat64(b[2:], f.Two)
	return
}

func (f *Fuzz317) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadFloat64(b[2:])
	return nil
}

func (f *Fuzz318) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteIntX64(b[2:], f.Two)
	return
}

func (f *Fuzz318) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadIntX64(b[2:])
	return nil
}

func (f *Fuzz319) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = byte(f.Two)
	jay.WriteInt16(b[1:], f.One)
	return
}

func (f *Fuzz319) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadInt16(b[1:])
	return nil
}

func (f *Fuzz320) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteInt32(b[2:], f.Two)
	return
}

func (f *Fuzz320) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadInt32(b[2:])
	return nil
}

func (f *Fuzz321) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteInt64(b[2:], f.Two)
	return
}

func (f *Fuzz321) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadInt64(b[2:])
	return nil
}

func (f *Fuzz322) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteInt32(b[2:], f.Two)
	return
}

func (f *Fuzz322) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadInt32(b[2:])
	return nil
}

func (f *Fuzz323) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	copy(b[3:], f.Two)
	return
}

func (f *Fuzz323) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = string(b[3:])
	return nil
}

func (f *Fuzz324) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteInt64(b[2:], int64(f.Two))
	return
}

func (f *Fuzz324) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = time.Duration(jay.ReadInt64(b[2:]))
	return nil
}

func (f *Fuzz325) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteTime(b[2:], f.Two)
	return
}

func (f *Fuzz325) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadTime(b[2:])
	return nil
}

func (f *Fuzz326) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteUintX64(b[2:], f.Two)
	return
}

func (f *Fuzz326) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadUintX64(b[2:])
	return nil
}

func (f *Fuzz327) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = f.Two
	jay.WriteInt16(b[1:], f.One)
	return
}

func (f *Fuzz327) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadInt16(b[1:])
	return nil
}

func (f *Fuzz328) MarshalJ() (b []byte) {
	b = make([]byte, 4)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteUint16(b[2:], f.Two)
	return
}

func (f *Fuzz328) UnmarshalJ(b []byte) error {
	if len(b) != 4 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadUint16(b[2:])
	return nil
}

func (f *Fuzz329) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteUint32(b[2:], f.Two)
	return
}

func (f *Fuzz329) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadUint32(b[2:])
	return nil
}

func (f *Fuzz330) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt16(b[:2], f.One)
	jay.WriteUint64(b[2:], f.Two)
	return
}

func (f *Fuzz330) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[:2])
	f.Two = jay.ReadUint64(b[2:])
	return nil
}

func (f *Fuzz331) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteBools(b[3:], f.Two, l0)
	return
}

func (f *Fuzz331) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 || l != 3+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadBools8(b[3:], b[0])
	return nil
}

func (f *Fuzz332) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	if l0 != 0 {
		copy(b[3:], f.Two)
	}
	return
}

func (f *Fuzz332) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	if l0 != 0 {
		f.Two = b[3:]
	}
	return nil
}

func (f *Fuzz333) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteComplex64s(b[3:], f.Two)
	return
}

func (f *Fuzz333) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadComplex64s(b[3:], l0)
	return nil
}

func (f *Fuzz334) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+16*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteComplex128s(b[3:], f.Two)
	return
}

func (f *Fuzz334) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadComplex128s(b[3:], l0)
	return nil
}

func (f *Fuzz335) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteFloat32s(b[3:], f.Two, l0)
	return
}

func (f *Fuzz335) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadFloat32s(b[3:], l0)
	return nil
}

func (f *Fuzz336) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteFloat64s(b[3:], f.Two, l0)
	return
}

func (f *Fuzz336) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadFloat64s(b[3:], l0)
	return nil
}

func (f *Fuzz337) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteIntsX64(b[3:], f.Two)
	return
}

func (f *Fuzz337) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadIntsX64(b[3:], l0)
	return nil
}

func (f *Fuzz338) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteInt8s(b[3:], f.Two)
	return
}

func (f *Fuzz338) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadInt8s(b[3:], l0)
	return nil
}

func (f *Fuzz339) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+2*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteInt16s(b[3:], f.Two, l0)
	return
}

func (f *Fuzz339) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadInt16s(b[3:], l0)
	return nil
}

func (f *Fuzz340) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteInt32s(b[3:], f.Two)
	return
}

func (f *Fuzz340) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadInt32s(b[3:], l0)
	return nil
}

func (f *Fuzz341) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteInt64s(b[3:], f.Two)
	return
}

func (f *Fuzz341) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadInt64s(b[3:], l0)
	return nil
}

func (f *Fuzz342) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteInt32s(b[3:], f.Two)
	return
}

func (f *Fuzz342) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadInt32s(b[3:], l0)
	return nil
}

func (f *Fuzz343) MarshalJ() (b []byte) {
	b = make([]byte, 3+jay.SizeStrings8(f.Two))
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteStrings8(b[3:], b[:1], f.Two)
	return
}

func (f *Fuzz343) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	return jay.ReadStrings8Err(b[3:], &f.Two, b[0])
}

func (f *Fuzz344) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteDurations(b[3:], f.Two)
	return
}

func (f *Fuzz344) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadDurations(b[3:], l0)
	return nil
}

func (f *Fuzz345) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteTimes(b[3:], f.Two)
	return
}

func (f *Fuzz345) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadTimes(b[3:], l0)
	return nil
}

func (f *Fuzz346) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteUintsX64(b[3:], f.Two)
	return
}

func (f *Fuzz346) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadUintsX64(b[3:], l0)
	return nil
}

func (f *Fuzz347) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	if l0 != 0 {
		copy(b[3:], f.Two)
	}
	return
}

func (f *Fuzz347) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	if l0 != 0 {
		f.Two = b[3:]
	}
	return nil
}

func (f *Fuzz348) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+2*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteUint16s(b[3:], f.Two, l0)
	return
}

func (f *Fuzz348) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadUint16s(b[3:], l0)
	return nil
}

func (f *Fuzz349) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteUint32s(b[3:], f.Two)
	return
}

func (f *Fuzz349) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadUint32s(b[3:], l0)
	return nil
}

func (f *Fuzz350) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.One)
	jay.WriteUint64s(b[3:], f.Two)
	return
}

func (f *Fuzz350) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16(b[1:3])
	f.Two = jay.ReadUint64s(b[3:], l0)
	return nil
}

func (f *Fuzz351) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = jay.Bool1(f.Two)
	jay.WriteInt32(b[1:], f.One)
	return
}

func (f *Fuzz351) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz352) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.Two
	jay.WriteInt32(b[1:], f.One)
	return
}

func (f *Fuzz352) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz353) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteComplex64(b[4:], f.Two)
	return
}

func (f *Fuzz353) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadComplex64(b[4:])
	return nil
}

func (f *Fuzz354) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteComplex128(b[4:], f.Two)
	return
}

func (f *Fuzz354) UnmarshalJ(b []byte) error {
	if len(b) != 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadComplex128(b[4:])
	return nil
}

func (f *Fuzz355) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteFloat32(b[4:], f.Two)
	return
}

func (f *Fuzz355) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadFloat32(b[4:])
	return nil
}

func (f *Fuzz356) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteFloat64(b[4:], f.Two)
	return
}

func (f *Fuzz356) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadFloat64(b[4:])
	return nil
}

func (f *Fuzz357) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteIntX64(b[4:], f.Two)
	return
}

func (f *Fuzz357) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadIntX64(b[4:])
	return nil
}

func (f *Fuzz358) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = byte(f.Two)
	jay.WriteInt32(b[1:], f.One)
	return
}

func (f *Fuzz358) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz359) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteInt16(b[4:], f.Two)
	return
}

func (f *Fuzz359) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadInt16(b[4:])
	return nil
}

func (f *Fuzz360) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteInt64(b[4:], f.Two)
	return
}

func (f *Fuzz360) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadInt64(b[4:])
	return nil
}

func (f *Fuzz361) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteInt32(b[4:], f.Two)
	return
}

func (f *Fuzz361) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadInt32(b[4:])
	return nil
}

func (f *Fuzz362) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	copy(b[5:], f.Two)
	return
}

func (f *Fuzz362) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = string(b[5:])
	return nil
}

func (f *Fuzz363) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteInt64(b[4:], int64(f.Two))
	return
}

func (f *Fuzz363) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = time.Duration(jay.ReadInt64(b[4:]))
	return nil
}

func (f *Fuzz364) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteTime(b[4:], f.Two)
	return
}

func (f *Fuzz364) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadTime(b[4:])
	return nil
}

func (f *Fuzz365) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteUintX64(b[4:], f.Two)
	return
}

func (f *Fuzz365) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadUintX64(b[4:])
	return nil
}

func (f *Fuzz366) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.Two
	jay.WriteInt32(b[1:], f.One)
	return
}

func (f *Fuzz366) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz367) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteUint16(b[4:], f.Two)
	return
}

func (f *Fuzz367) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadUint16(b[4:])
	return nil
}

func (f *Fuzz368) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteUint32(b[4:], f.Two)
	return
}

func (f *Fuzz368) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadUint32(b[4:])
	return nil
}

func (f *Fuzz369) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteUint64(b[4:], f.Two)
	return
}

func (f *Fuzz369) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadUint64(b[4:])
	return nil
}

func (f *Fuzz370) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteBools(b[5:], f.Two, l0)
	return
}

func (f *Fuzz370) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 || l != 5+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadBools8(b[5:], b[0])
	return nil
}

func (f *Fuzz371) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	if l0 != 0 {
		copy(b[5:], f.Two)
	}
	return
}

func (f *Fuzz371) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	if l0 != 0 {
		f.Two = b[5:]
	}
	return nil
}

func (f *Fuzz372) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteComplex64s(b[5:], f.Two)
	return
}

func (f *Fuzz372) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadComplex64s(b[5:], l0)
	return nil
}

func (f *Fuzz373) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+16*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteComplex128s(b[5:], f.Two)
	return
}

func (f *Fuzz373) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadComplex128s(b[5:], l0)
	return nil
}

func (f *Fuzz374) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteFloat32s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz374) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadFloat32s(b[5:], l0)
	return nil
}

func (f *Fuzz375) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteFloat64s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz375) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadFloat64s(b[5:], l0)
	return nil
}

func (f *Fuzz376) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteIntsX64(b[5:], f.Two)
	return
}

func (f *Fuzz376) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadIntsX64(b[5:], l0)
	return nil
}

func (f *Fuzz377) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt8s(b[5:], f.Two)
	return
}

func (f *Fuzz377) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt8s(b[5:], l0)
	return nil
}

func (f *Fuzz378) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt16s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz378) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt16s(b[5:], l0)
	return nil
}

func (f *Fuzz379) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt32s(b[5:], f.Two)
	return
}

func (f *Fuzz379) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz380) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt64s(b[5:], f.Two)
	return
}

func (f *Fuzz380) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt64s(b[5:], l0)
	return nil
}

func (f *Fuzz381) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt32s(b[5:], f.Two)
	return
}

func (f *Fuzz381) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz382) MarshalJ() (b []byte) {
	b = make([]byte, 5+jay.SizeStrings8(f.Two))
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteStrings8(b[5:], b[:1], f.Two)
	return
}

func (f *Fuzz382) UnmarshalJ(b []byte) error {
	if len(b) < 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	return jay.ReadStrings8Err(b[5:], &f.Two, b[0])
}

func (f *Fuzz383) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteDurations(b[5:], f.Two)
	return
}

func (f *Fuzz383) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadDurations(b[5:], l0)
	return nil
}

func (f *Fuzz384) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteTimes(b[5:], f.Two)
	return
}

func (f *Fuzz384) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadTimes(b[5:], l0)
	return nil
}

func (f *Fuzz385) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteUintsX64(b[5:], f.Two)
	return
}

func (f *Fuzz385) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadUintsX64(b[5:], l0)
	return nil
}

func (f *Fuzz386) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	if l0 != 0 {
		copy(b[5:], f.Two)
	}
	return
}

func (f *Fuzz386) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	if l0 != 0 {
		f.Two = b[5:]
	}
	return nil
}

func (f *Fuzz387) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteUint16s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz387) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadUint16s(b[5:], l0)
	return nil
}

func (f *Fuzz388) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteUint32s(b[5:], f.Two)
	return
}

func (f *Fuzz388) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadUint32s(b[5:], l0)
	return nil
}

func (f *Fuzz389) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteUint64s(b[5:], f.Two)
	return
}

func (f *Fuzz389) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadUint64s(b[5:], l0)
	return nil
}

func (f *Fuzz390) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.Two)
	jay.WriteInt64(b[1:], f.One)
	return
}

func (f *Fuzz390) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadInt64(b[1:])
	return nil
}

func (f *Fuzz391) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteInt64(b[1:], f.One)
	return
}

func (f *Fuzz391) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadInt64(b[1:])
	return nil
}

func (f *Fuzz392) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteComplex64(b[8:], f.Two)
	return
}

func (f *Fuzz392) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadComplex64(b[8:])
	return nil
}

func (f *Fuzz393) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteComplex128(b[8:], f.Two)
	return
}

func (f *Fuzz393) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadComplex128(b[8:])
	return nil
}

func (f *Fuzz394) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteFloat32(b[8:], f.Two)
	return
}

func (f *Fuzz394) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadFloat32(b[8:])
	return nil
}

func (f *Fuzz395) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteFloat64(b[8:], f.Two)
	return
}

func (f *Fuzz395) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadFloat64(b[8:])
	return nil
}

func (f *Fuzz396) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteIntX64(b[8:], f.Two)
	return
}

func (f *Fuzz396) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadIntX64(b[8:])
	return nil
}

func (f *Fuzz397) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.Two)
	jay.WriteInt64(b[1:], f.One)
	return
}

func (f *Fuzz397) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadInt64(b[1:])
	return nil
}

func (f *Fuzz398) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteInt16(b[8:], f.Two)
	return
}

func (f *Fuzz398) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadInt16(b[8:])
	return nil
}

func (f *Fuzz399) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz399) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz400) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz400) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz401) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	copy(b[9:], f.Two)
	return
}

func (f *Fuzz401) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = string(b[9:])
	return nil
}

func (f *Fuzz402) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteInt64(b[8:], int64(f.Two))
	return
}

func (f *Fuzz402) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = time.Duration(jay.ReadInt64(b[8:]))
	return nil
}

func (f *Fuzz403) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteTime(b[8:], f.Two)
	return
}

func (f *Fuzz403) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadTime(b[8:])
	return nil
}

func (f *Fuzz404) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteUintX64(b[8:], f.Two)
	return
}

func (f *Fuzz404) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadUintX64(b[8:])
	return nil
}

func (f *Fuzz405) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteInt64(b[1:], f.One)
	return
}

func (f *Fuzz405) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadInt64(b[1:])
	return nil
}

func (f *Fuzz406) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteUint16(b[8:], f.Two)
	return
}

func (f *Fuzz406) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadUint16(b[8:])
	return nil
}

func (f *Fuzz407) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteUint32(b[8:], f.Two)
	return
}

func (f *Fuzz407) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadUint32(b[8:])
	return nil
}

func (f *Fuzz408) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], f.One)
	jay.WriteUint64(b[8:], f.Two)
	return
}

func (f *Fuzz408) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[:8])
	f.Two = jay.ReadUint64(b[8:])
	return nil
}

func (f *Fuzz409) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteBools(b[9:], f.Two, l0)
	return
}

func (f *Fuzz409) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz410) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz410) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz411) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteComplex64s(b[9:], f.Two)
	return
}

func (f *Fuzz411) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz412) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteComplex128s(b[9:], f.Two)
	return
}

func (f *Fuzz412) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz413) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteFloat32s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz413) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz414) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteFloat64s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz414) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz415) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteIntsX64(b[9:], f.Two)
	return
}

func (f *Fuzz415) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz416) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteInt8s(b[9:], f.Two)
	return
}

func (f *Fuzz416) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz417) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteInt16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz417) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz418) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz418) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz419) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteInt64s(b[9:], f.Two)
	return
}

func (f *Fuzz419) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz420) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz420) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz421) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.Two))
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteStrings8(b[9:], b[:1], f.Two)
	return
}

func (f *Fuzz421) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	return nil
}

func (f *Fuzz422) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteDurations(b[9:], f.Two)
	return
}

func (f *Fuzz422) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz423) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteTimes(b[9:], f.Two)
	return
}

func (f *Fuzz423) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz424) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteUintsX64(b[9:], f.Two)
	return
}

func (f *Fuzz424) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz425) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz425) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz426) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteUint16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz426) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz427) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteUint32s(b[9:], f.Two)
	return
}

func (f *Fuzz427) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz428) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.One)
	jay.WriteUint64s(b[9:], f.Two)
	return
}

func (f *Fuzz428) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64(b[1:9])
	f.Two = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz429) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = jay.Bool1(f.Two)
	jay.WriteInt32(b[1:], f.One)
	return
}

func (f *Fuzz429) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz430) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.Two
	jay.WriteInt32(b[1:], f.One)
	return
}

func (f *Fuzz430) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz431) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteComplex64(b[4:], f.Two)
	return
}

func (f *Fuzz431) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadComplex64(b[4:])
	return nil
}

func (f *Fuzz432) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteComplex128(b[4:], f.Two)
	return
}

func (f *Fuzz432) UnmarshalJ(b []byte) error {
	if len(b) != 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadComplex128(b[4:])
	return nil
}

func (f *Fuzz433) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteFloat32(b[4:], f.Two)
	return
}

func (f *Fuzz433) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadFloat32(b[4:])
	return nil
}

func (f *Fuzz434) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteFloat64(b[4:], f.Two)
	return
}

func (f *Fuzz434) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadFloat64(b[4:])
	return nil
}

func (f *Fuzz435) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteIntX64(b[4:], f.Two)
	return
}

func (f *Fuzz435) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadIntX64(b[4:])
	return nil
}

func (f *Fuzz436) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = byte(f.Two)
	jay.WriteInt32(b[1:], f.One)
	return
}

func (f *Fuzz436) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz437) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteInt16(b[4:], f.Two)
	return
}

func (f *Fuzz437) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadInt16(b[4:])
	return nil
}

func (f *Fuzz438) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteInt32(b[4:], f.Two)
	return
}

func (f *Fuzz438) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadInt32(b[4:])
	return nil
}

func (f *Fuzz439) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteInt64(b[4:], f.Two)
	return
}

func (f *Fuzz439) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadInt64(b[4:])
	return nil
}

func (f *Fuzz440) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	copy(b[5:], f.Two)
	return
}

func (f *Fuzz440) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = string(b[5:])
	return nil
}

func (f *Fuzz441) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteInt64(b[4:], int64(f.Two))
	return
}

func (f *Fuzz441) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = time.Duration(jay.ReadInt64(b[4:]))
	return nil
}

func (f *Fuzz442) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteTime(b[4:], f.Two)
	return
}

func (f *Fuzz442) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadTime(b[4:])
	return nil
}

func (f *Fuzz443) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteUintX64(b[4:], f.Two)
	return
}

func (f *Fuzz443) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadUintX64(b[4:])
	return nil
}

func (f *Fuzz444) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.Two
	jay.WriteInt32(b[1:], f.One)
	return
}

func (f *Fuzz444) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz445) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteUint16(b[4:], f.Two)
	return
}

func (f *Fuzz445) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadUint16(b[4:])
	return nil
}

func (f *Fuzz446) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteUint32(b[4:], f.Two)
	return
}

func (f *Fuzz446) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadUint32(b[4:])
	return nil
}

func (f *Fuzz447) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt32(b[:4], f.One)
	jay.WriteUint64(b[4:], f.Two)
	return
}

func (f *Fuzz447) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[:4])
	f.Two = jay.ReadUint64(b[4:])
	return nil
}

func (f *Fuzz448) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteBools(b[5:], f.Two, l0)
	return
}

func (f *Fuzz448) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 || l != 5+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadBools8(b[5:], b[0])
	return nil
}

func (f *Fuzz449) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	if l0 != 0 {
		copy(b[5:], f.Two)
	}
	return
}

func (f *Fuzz449) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	if l0 != 0 {
		f.Two = b[5:]
	}
	return nil
}

func (f *Fuzz450) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteComplex64s(b[5:], f.Two)
	return
}

func (f *Fuzz450) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadComplex64s(b[5:], l0)
	return nil
}

func (f *Fuzz451) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+16*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteComplex128s(b[5:], f.Two)
	return
}

func (f *Fuzz451) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadComplex128s(b[5:], l0)
	return nil
}

func (f *Fuzz452) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteFloat32s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz452) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadFloat32s(b[5:], l0)
	return nil
}

func (f *Fuzz453) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteFloat64s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz453) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadFloat64s(b[5:], l0)
	return nil
}

func (f *Fuzz454) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteIntsX64(b[5:], f.Two)
	return
}

func (f *Fuzz454) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadIntsX64(b[5:], l0)
	return nil
}

func (f *Fuzz455) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt8s(b[5:], f.Two)
	return
}

func (f *Fuzz455) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt8s(b[5:], l0)
	return nil
}

func (f *Fuzz456) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt16s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz456) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt16s(b[5:], l0)
	return nil
}

func (f *Fuzz457) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt32s(b[5:], f.Two)
	return
}

func (f *Fuzz457) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz458) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt64s(b[5:], f.Two)
	return
}

func (f *Fuzz458) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt64s(b[5:], l0)
	return nil
}

func (f *Fuzz459) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteInt32s(b[5:], f.Two)
	return
}

func (f *Fuzz459) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz460) MarshalJ() (b []byte) {
	b = make([]byte, 5+jay.SizeStrings8(f.Two))
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteStrings8(b[5:], b[:1], f.Two)
	return
}

func (f *Fuzz460) UnmarshalJ(b []byte) error {
	if len(b) < 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	return jay.ReadStrings8Err(b[5:], &f.Two, b[0])
}

func (f *Fuzz461) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteDurations(b[5:], f.Two)
	return
}

func (f *Fuzz461) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadDurations(b[5:], l0)
	return nil
}

func (f *Fuzz462) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteTimes(b[5:], f.Two)
	return
}

func (f *Fuzz462) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadTimes(b[5:], l0)
	return nil
}

func (f *Fuzz463) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteUintsX64(b[5:], f.Two)
	return
}

func (f *Fuzz463) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadUintsX64(b[5:], l0)
	return nil
}

func (f *Fuzz464) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	if l0 != 0 {
		copy(b[5:], f.Two)
	}
	return
}

func (f *Fuzz464) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	if l0 != 0 {
		f.Two = b[5:]
	}
	return nil
}

func (f *Fuzz465) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteUint16s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz465) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadUint16s(b[5:], l0)
	return nil
}

func (f *Fuzz466) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteUint32s(b[5:], f.Two)
	return
}

func (f *Fuzz466) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadUint32s(b[5:], l0)
	return nil
}

func (f *Fuzz467) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.One)
	jay.WriteUint64s(b[5:], f.Two)
	return
}

func (f *Fuzz467) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32(b[1:5])
	f.Two = jay.ReadUint64s(b[5:], l0)
	return nil
}

func (f *Fuzz468) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	copy(b[2:], f.One)
	return
}

func (f *Fuzz468) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = string(b[2:])
	return nil
}

func (f *Fuzz469) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.Two
	copy(b[2:], f.One)
	return
}

func (f *Fuzz469) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = string(b[2:])
	return nil
}

func (f *Fuzz470) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	copy(b[9:], f.One)
	return
}

func (f *Fuzz470) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = string(b[9:])
	return nil
}

func (f *Fuzz471) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	copy(b[17:], f.One)
	return
}

func (f *Fuzz471) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = string(b[17:])
	return nil
}

func (f *Fuzz472) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	copy(b[5:], f.One)
	return
}

func (f *Fuzz472) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = string(b[5:])
	return nil
}

func (f *Fuzz473) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	copy(b[9:], f.One)
	return
}

func (f *Fuzz473) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = string(b[9:])
	return nil
}

func (f *Fuzz474) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	copy(b[9:], f.One)
	return
}

func (f *Fuzz474) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = string(b[9:])
	return nil
}

func (f *Fuzz475) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	copy(b[2:], f.One)
	return
}

func (f *Fuzz475) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = string(b[2:])
	return nil
}

func (f *Fuzz476) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	copy(b[3:], f.One)
	return
}

func (f *Fuzz476) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = string(b[3:])
	return nil
}

func (f *Fuzz477) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	copy(b[5:], f.One)
	return
}

func (f *Fuzz477) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = string(b[5:])
	return nil
}

func (f *Fuzz478) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	copy(b[9:], f.One)
	return
}

func (f *Fuzz478) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = string(b[9:])
	return nil
}

func (f *Fuzz479) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	copy(b[5:], f.One)
	return
}

func (f *Fuzz479) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = string(b[5:])
	return nil
}

func (f *Fuzz480) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	copy(b[9:], f.One)
	return
}

func (f *Fuzz480) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = string(b[9:])
	return nil
}

func (f *Fuzz481) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	copy(b[9:], f.One)
	return
}

func (f *Fuzz481) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = string(b[9:])
	return nil
}

func (f *Fuzz482) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	copy(b[9:], f.One)
	return
}

func (f *Fuzz482) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = string(b[9:])
	return nil
}

func (f *Fuzz483) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.Two
	copy(b[2:], f.One)
	return
}

func (f *Fuzz483) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = string(b[2:])
	return nil
}

func (f *Fuzz484) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	copy(b[3:], f.One)
	return
}

func (f *Fuzz484) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = string(b[3:])
	return nil
}

func (f *Fuzz485) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	copy(b[5:], f.One)
	return
}

func (f *Fuzz485) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = string(b[5:])
	return nil
}

func (f *Fuzz486) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	copy(b[9:], f.One)
	return
}

func (f *Fuzz486) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = string(b[9:])
	return nil
}

func (f *Fuzz487) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz487) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz488) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz488) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz489) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz489) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz490) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz490) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz491) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz491) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz492) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz492) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz493) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz493) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz494) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz494) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz495) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz495) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz496) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz496) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz497) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz497) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz498) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz498) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz499) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+l0+l1)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	copy(b[end:], f.One)
	return
}

func (f *Fuzz499) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = string(b[at:])
	return nil
}

func (f *Fuzz500) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz500) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz501) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz501) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz502) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz502) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz503) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz503) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz504) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz504) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz505) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz505) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz506) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	copy(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz506) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = string(b[at:end])
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz507) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.Two)
	jay.WriteInt64(b[1:], int64(f.One))
	return
}

func (f *Fuzz507) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = time.Duration(jay.ReadInt64(b[1:]))
	return nil
}

func (f *Fuzz508) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteInt64(b[1:], int64(f.One))
	return
}

func (f *Fuzz508) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = time.Duration(jay.ReadInt64(b[1:]))
	return nil
}

func (f *Fuzz509) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteComplex64(b[8:], f.Two)
	return
}

func (f *Fuzz509) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadComplex64(b[8:])
	return nil
}

func (f *Fuzz510) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteComplex128(b[8:], f.Two)
	return
}

func (f *Fuzz510) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadComplex128(b[8:])
	return nil
}

func (f *Fuzz511) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteFloat32(b[8:], f.Two)
	return
}

func (f *Fuzz511) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadFloat32(b[8:])
	return nil
}

func (f *Fuzz512) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteFloat64(b[8:], f.Two)
	return
}

func (f *Fuzz512) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadFloat64(b[8:])
	return nil
}

func (f *Fuzz513) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteIntX64(b[8:], f.Two)
	return
}

func (f *Fuzz513) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadIntX64(b[8:])
	return nil
}

func (f *Fuzz514) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.Two)
	jay.WriteInt64(b[1:], int64(f.One))
	return
}

func (f *Fuzz514) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = time.Duration(jay.ReadInt64(b[1:]))
	return nil
}

func (f *Fuzz515) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteInt16(b[8:], f.Two)
	return
}

func (f *Fuzz515) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadInt16(b[8:])
	return nil
}

func (f *Fuzz516) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz516) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz517) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteInt64(b[8:], f.Two)
	return
}

func (f *Fuzz517) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadInt64(b[8:])
	return nil
}

func (f *Fuzz518) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz518) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz519) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	copy(b[9:], f.Two)
	return
}

func (f *Fuzz519) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = string(b[9:])
	return nil
}

func (f *Fuzz520) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteTime(b[8:], f.Two)
	return
}

func (f *Fuzz520) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadTime(b[8:])
	return nil
}

func (f *Fuzz521) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteUintX64(b[8:], f.Two)
	return
}

func (f *Fuzz521) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadUintX64(b[8:])
	return nil
}

func (f *Fuzz522) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteInt64(b[1:], int64(f.One))
	return
}

func (f *Fuzz522) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = time.Duration(jay.ReadInt64(b[1:]))
	return nil
}

func (f *Fuzz523) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteUint16(b[8:], f.Two)
	return
}

func (f *Fuzz523) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadUint16(b[8:])
	return nil
}

func (f *Fuzz524) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteUint32(b[8:], f.Two)
	return
}

func (f *Fuzz524) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadUint32(b[8:])
	return nil
}

func (f *Fuzz525) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteInt64(b[:8], int64(f.One))
	jay.WriteUint64(b[8:], f.Two)
	return
}

func (f *Fuzz525) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[:8]))
	f.Two = jay.ReadUint64(b[8:])
	return nil
}

func (f *Fuzz526) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteBools(b[9:], f.Two, l0)
	return
}

func (f *Fuzz526) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz527) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz527) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz528) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteComplex64s(b[9:], f.Two)
	return
}

func (f *Fuzz528) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz529) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteComplex128s(b[9:], f.Two)
	return
}

func (f *Fuzz529) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz530) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteFloat32s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz530) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz531) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteFloat64s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz531) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz532) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteIntsX64(b[9:], f.Two)
	return
}

func (f *Fuzz532) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz533) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteInt8s(b[9:], f.Two)
	return
}

func (f *Fuzz533) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz534) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteInt16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz534) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz535) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz535) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz536) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteInt64s(b[9:], f.Two)
	return
}

func (f *Fuzz536) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz537) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz537) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz538) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.Two))
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteStrings8(b[9:], b[:1], f.Two)
	return
}

func (f *Fuzz538) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	return nil
}

func (f *Fuzz539) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteDurations(b[9:], f.Two)
	return
}

func (f *Fuzz539) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz540) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteTimes(b[9:], f.Two)
	return
}

func (f *Fuzz540) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz541) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteUintsX64(b[9:], f.Two)
	return
}

func (f *Fuzz541) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz542) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz542) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz543) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteUint16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz543) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz544) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteUint32s(b[9:], f.Two)
	return
}

func (f *Fuzz544) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz545) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.One))
	jay.WriteUint64s(b[9:], f.Two)
	return
}

func (f *Fuzz545) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = time.Duration(jay.ReadInt64(b[1:9]))
	f.Two = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz546) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.Two)
	jay.WriteTime(b[1:], f.One)
	return
}

func (f *Fuzz546) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadTime(b[1:])
	return nil
}

func (f *Fuzz547) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteTime(b[1:], f.One)
	return
}

func (f *Fuzz547) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadTime(b[1:])
	return nil
}

func (f *Fuzz548) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteTime(b[:8], f.One)
	jay.WriteComplex64(b[8:], f.Two)
	return
}

func (f *Fuzz548) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadComplex64(b[8:])
	return nil
}

func (f *Fuzz549) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteTime(b[:8], f.One)
	jay.WriteComplex128(b[8:], f.Two)
	return
}

func (f *Fuzz549) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadComplex128(b[8:])
	return nil
}

func (f *Fuzz550) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteTime(b[:8], f.One)
	jay.WriteFloat32(b[8:], f.Two)
	return
}

func (f *Fuzz550) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadFloat32(b[8:])
	return nil
}

func (f *Fuzz551) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteTime(b[:8], f.One)
	jay.WriteFloat64(b[8:], f.Two)
	return
}

func (f *Fuzz551) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadFloat64(b[8:])
	return nil
}

func (f *Fuzz552) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteTime(b[:8], f.One)
	jay.WriteIntX64(b[8:], f.Two)
	return
}

func (f *Fuzz552) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadIntX64(b[8:])
	return nil
}

func (f *Fuzz553) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.Two)
	jay.WriteTime(b[1:], f.One)
	return
}

func (f *Fuzz553) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadTime(b[1:])
	return nil
}

func (f *Fuzz554) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteTime(b[:8], f.One)
	jay.WriteInt16(b[8:], f.Two)
	return
}

func (f *Fuzz554) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadInt16(b[8:])
	return nil
}

func (f *Fuzz555) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteTime(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz555) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz556) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteTime(b[:8], f.One)
	jay.WriteInt64(b[8:], f.Two)
	return
}

func (f *Fuzz556) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadInt64(b[8:])
	return nil
}

func (f *Fuzz557) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteTime(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz557) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz558) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	copy(b[9:], f.Two)
	return
}

func (f *Fuzz558) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = string(b[9:])
	return nil
}

func (f *Fuzz559) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteTime(b[:8], f.One)
	jay.WriteInt64(b[8:], int64(f.Two))
	return
}

func (f *Fuzz559) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = time.Duration(jay.ReadInt64(b[8:]))
	return nil
}

func (f *Fuzz560) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteTime(b[:8], f.One)
	jay.WriteUintX64(b[8:], f.Two)
	return
}

func (f *Fuzz560) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadUintX64(b[8:])
	return nil
}

func (f *Fuzz561) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteTime(b[1:], f.One)
	return
}

func (f *Fuzz561) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadTime(b[1:])
	return nil
}

func (f *Fuzz562) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteTime(b[:8], f.One)
	jay.WriteUint16(b[8:], f.Two)
	return
}

func (f *Fuzz562) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadUint16(b[8:])
	return nil
}

func (f *Fuzz563) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteTime(b[:8], f.One)
	jay.WriteUint32(b[8:], f.Two)
	return
}

func (f *Fuzz563) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadUint32(b[8:])
	return nil
}

func (f *Fuzz564) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteTime(b[:8], f.One)
	jay.WriteUint64(b[8:], f.Two)
	return
}

func (f *Fuzz564) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[:8])
	f.Two = jay.ReadUint64(b[8:])
	return nil
}

func (f *Fuzz565) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteBools(b[9:], f.Two, l0)
	return
}

func (f *Fuzz565) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz566) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz566) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz567) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteComplex64s(b[9:], f.Two)
	return
}

func (f *Fuzz567) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz568) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteComplex128s(b[9:], f.Two)
	return
}

func (f *Fuzz568) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz569) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteFloat32s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz569) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz570) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteFloat64s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz570) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz571) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteIntsX64(b[9:], f.Two)
	return
}

func (f *Fuzz571) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz572) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteInt8s(b[9:], f.Two)
	return
}

func (f *Fuzz572) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz573) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteInt16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz573) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz574) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz574) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz575) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteInt64s(b[9:], f.Two)
	return
}

func (f *Fuzz575) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz576) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz576) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz577) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.Two))
	jay.WriteTime(b[1:9], f.One)
	jay.WriteStrings8(b[9:], b[:1], f.Two)
	return
}

func (f *Fuzz577) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	return nil
}

func (f *Fuzz578) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteDurations(b[9:], f.Two)
	return
}

func (f *Fuzz578) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz579) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteTimes(b[9:], f.Two)
	return
}

func (f *Fuzz579) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz580) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteUintsX64(b[9:], f.Two)
	return
}

func (f *Fuzz580) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz581) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz581) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz582) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteUint16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz582) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz583) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteUint32s(b[9:], f.Two)
	return
}

func (f *Fuzz583) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz584) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.One)
	jay.WriteUint64s(b[9:], f.Two)
	return
}

func (f *Fuzz584) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTime(b[1:9])
	f.Two = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz585) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.Two)
	jay.WriteUintX64(b[1:], f.One)
	return
}

func (f *Fuzz585) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadUintX64(b[1:])
	return nil
}

func (f *Fuzz586) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteUintX64(b[1:], f.One)
	return
}

func (f *Fuzz586) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadUintX64(b[1:])
	return nil
}

func (f *Fuzz587) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteComplex64(b[8:], f.Two)
	return
}

func (f *Fuzz587) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadComplex64(b[8:])
	return nil
}

func (f *Fuzz588) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteComplex128(b[8:], f.Two)
	return
}

func (f *Fuzz588) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadComplex128(b[8:])
	return nil
}

func (f *Fuzz589) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteFloat32(b[8:], f.Two)
	return
}

func (f *Fuzz589) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadFloat32(b[8:])
	return nil
}

func (f *Fuzz590) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteFloat64(b[8:], f.Two)
	return
}

func (f *Fuzz590) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadFloat64(b[8:])
	return nil
}

func (f *Fuzz591) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteIntX64(b[8:], f.Two)
	return
}

func (f *Fuzz591) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadIntX64(b[8:])
	return nil
}

func (f *Fuzz592) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.Two)
	jay.WriteUintX64(b[1:], f.One)
	return
}

func (f *Fuzz592) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadUintX64(b[1:])
	return nil
}

func (f *Fuzz593) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteInt16(b[8:], f.Two)
	return
}

func (f *Fuzz593) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadInt16(b[8:])
	return nil
}

func (f *Fuzz594) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz594) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz595) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteInt64(b[8:], f.Two)
	return
}

func (f *Fuzz595) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadInt64(b[8:])
	return nil
}

func (f *Fuzz596) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz596) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz597) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	copy(b[9:], f.Two)
	return
}

func (f *Fuzz597) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = string(b[9:])
	return nil
}

func (f *Fuzz598) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteInt64(b[8:], int64(f.Two))
	return
}

func (f *Fuzz598) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = time.Duration(jay.ReadInt64(b[8:]))
	return nil
}

func (f *Fuzz599) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteTime(b[8:], f.Two)
	return
}

func (f *Fuzz599) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadTime(b[8:])
	return nil
}

func (f *Fuzz600) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteUintX64(b[1:], f.One)
	return
}

func (f *Fuzz600) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadUintX64(b[1:])
	return nil
}

func (f *Fuzz601) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteUint16(b[8:], f.Two)
	return
}

func (f *Fuzz601) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadUint16(b[8:])
	return nil
}

func (f *Fuzz602) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteUint32(b[8:], f.Two)
	return
}

func (f *Fuzz602) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadUint32(b[8:])
	return nil
}

func (f *Fuzz603) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUintX64(b[:8], f.One)
	jay.WriteUint64(b[8:], f.Two)
	return
}

func (f *Fuzz603) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[:8])
	f.Two = jay.ReadUint64(b[8:])
	return nil
}

func (f *Fuzz604) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteBools(b[9:], f.Two, l0)
	return
}

func (f *Fuzz604) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz605) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz605) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz606) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteComplex64s(b[9:], f.Two)
	return
}

func (f *Fuzz606) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz607) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteComplex128s(b[9:], f.Two)
	return
}

func (f *Fuzz607) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz608) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteFloat32s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz608) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz609) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteFloat64s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz609) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz610) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteIntsX64(b[9:], f.Two)
	return
}

func (f *Fuzz610) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz611) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteInt8s(b[9:], f.Two)
	return
}

func (f *Fuzz611) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz612) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteInt16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz612) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz613) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz613) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz614) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteInt64s(b[9:], f.Two)
	return
}

func (f *Fuzz614) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz615) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz615) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz616) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.Two))
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteStrings8(b[9:], b[:1], f.Two)
	return
}

func (f *Fuzz616) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	return nil
}

func (f *Fuzz617) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteDurations(b[9:], f.Two)
	return
}

func (f *Fuzz617) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz618) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteTimes(b[9:], f.Two)
	return
}

func (f *Fuzz618) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz619) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteUintsX64(b[9:], f.Two)
	return
}

func (f *Fuzz619) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz620) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz620) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz621) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteUint16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz621) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz622) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteUint32s(b[9:], f.Two)
	return
}

func (f *Fuzz622) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz623) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.One)
	jay.WriteUint64s(b[9:], f.Two)
	return
}

func (f *Fuzz623) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintX64(b[1:9])
	f.Two = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz624) MarshalJ() []byte {
	return []byte{jay.Bool1(f.Two), f.One}
}

func (f *Fuzz624) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = b[1]
	return nil
}

func (f *Fuzz625) MarshalJ() []byte {
	return []byte{f.One, f.Two}
}

func (f *Fuzz625) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = b[1]
	return nil
}

func (f *Fuzz626) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteComplex64(b[1:], f.Two)
	return
}

func (f *Fuzz626) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadComplex64(b[1:])
	return nil
}

func (f *Fuzz627) MarshalJ() (b []byte) {
	b = make([]byte, 17)
	b[0] = f.One
	jay.WriteComplex128(b[1:], f.Two)
	return
}

func (f *Fuzz627) UnmarshalJ(b []byte) error {
	if len(b) != 17 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadComplex128(b[1:])
	return nil
}

func (f *Fuzz628) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.One
	jay.WriteFloat32(b[1:], f.Two)
	return
}

func (f *Fuzz628) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadFloat32(b[1:])
	return nil
}

func (f *Fuzz629) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteFloat64(b[1:], f.Two)
	return
}

func (f *Fuzz629) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadFloat64(b[1:])
	return nil
}

func (f *Fuzz630) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteIntX64(b[1:], f.Two)
	return
}

func (f *Fuzz630) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadIntX64(b[1:])
	return nil
}

func (f *Fuzz631) MarshalJ() []byte {
	return []byte{f.One, byte(f.Two)}
}

func (f *Fuzz631) UnmarshalJ(b []byte) error {
	if len(b) != 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = int8(b[1])
	return nil
}

func (f *Fuzz632) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = f.One
	jay.WriteInt16(b[1:], f.Two)
	return
}

func (f *Fuzz632) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadInt16(b[1:])
	return nil
}

func (f *Fuzz633) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.One
	jay.WriteInt32(b[1:], f.Two)
	return
}

func (f *Fuzz633) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz634) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteInt64(b[1:], f.Two)
	return
}

func (f *Fuzz634) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadInt64(b[1:])
	return nil
}

func (f *Fuzz635) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.One
	jay.WriteInt32(b[1:], f.Two)
	return
}

func (f *Fuzz635) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadInt32(b[1:])
	return nil
}

func (f *Fuzz636) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.One
	copy(b[2:], f.Two)
	return
}

func (f *Fuzz636) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = string(b[2:])
	return nil
}

func (f *Fuzz637) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteInt64(b[1:], int64(f.Two))
	return
}

func (f *Fuzz637) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = time.Duration(jay.ReadInt64(b[1:]))
	return nil
}

func (f *Fuzz638) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteTime(b[1:], f.Two)
	return
}

func (f *Fuzz638) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadTime(b[1:])
	return nil
}

func (f *Fuzz639) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteUintX64(b[1:], f.Two)
	return
}

func (f *Fuzz639) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadUintX64(b[1:])
	return nil
}

func (f *Fuzz640) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = f.One
	jay.WriteUint16(b[1:], f.Two)
	return
}

func (f *Fuzz640) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadUint16(b[1:])
	return nil
}

func (f *Fuzz641) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.One
	jay.WriteUint32(b[1:], f.Two)
	return
}

func (f *Fuzz641) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadUint32(b[1:])
	return nil
}

func (f *Fuzz642) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.One
	jay.WriteUint64(b[1:], f.Two)
	return
}

func (f *Fuzz642) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[0]
	f.Two = jay.ReadUint64(b[1:])
	return nil
}

func (f *Fuzz643) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+jay.SizeBools(l0))
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteBools(b[2:], f.Two, l0)
	return
}

func (f *Fuzz643) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l != 2+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadBools8(b[2:], b[0])
	return nil
}

func (f *Fuzz644) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.One
	if l0 != 0 {
		copy(b[2:], f.Two)
	}
	return
}

func (f *Fuzz644) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	if l0 != 0 {
		f.Two = b[2:]
	}
	return nil
}

func (f *Fuzz645) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteComplex64s(b[2:], f.Two)
	return
}

func (f *Fuzz645) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadComplex64s(b[2:], l0)
	return nil
}

func (f *Fuzz646) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+16*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteComplex128s(b[2:], f.Two)
	return
}

func (f *Fuzz646) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadComplex128s(b[2:], l0)
	return nil
}

func (f *Fuzz647) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteFloat32s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz647) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadFloat32s(b[2:], l0)
	return nil
}

func (f *Fuzz648) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteFloat64s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz648) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadFloat64s(b[2:], l0)
	return nil
}

func (f *Fuzz649) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteIntsX64(b[2:], f.Two)
	return
}

func (f *Fuzz649) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadIntsX64(b[2:], l0)
	return nil
}

func (f *Fuzz650) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt8s(b[2:], f.Two)
	return
}

func (f *Fuzz650) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt8s(b[2:], l0)
	return nil
}

func (f *Fuzz651) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt16s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz651) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt16s(b[2:], l0)
	return nil
}

func (f *Fuzz652) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt32s(b[2:], f.Two)
	return
}

func (f *Fuzz652) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz653) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt64s(b[2:], f.Two)
	return
}

func (f *Fuzz653) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt64s(b[2:], l0)
	return nil
}

func (f *Fuzz654) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteInt32s(b[2:], f.Two)
	return
}

func (f *Fuzz654) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz655) MarshalJ() (b []byte) {
	b = make([]byte, 2+jay.SizeStrings8(f.Two))
	b[1] = f.One
	jay.WriteStrings8(b[2:], b[:1], f.Two)
	return
}

func (f *Fuzz655) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	return jay.ReadStrings8Err(b[2:], &f.Two, b[0])
}

func (f *Fuzz656) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteDurations(b[2:], f.Two)
	return
}

func (f *Fuzz656) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadDurations(b[2:], l0)
	return nil
}

func (f *Fuzz657) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteTimes(b[2:], f.Two)
	return
}

func (f *Fuzz657) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadTimes(b[2:], l0)
	return nil
}

func (f *Fuzz658) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteUintsX64(b[2:], f.Two)
	return
}

func (f *Fuzz658) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadUintsX64(b[2:], l0)
	return nil
}

func (f *Fuzz659) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.One
	if l0 != 0 {
		copy(b[2:], f.Two)
	}
	return
}

func (f *Fuzz659) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	if l0 != 0 {
		f.Two = b[2:]
	}
	return nil
}

func (f *Fuzz660) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteUint16s(b[2:], f.Two, l0)
	return
}

func (f *Fuzz660) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadUint16s(b[2:], l0)
	return nil
}

func (f *Fuzz661) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteUint32s(b[2:], f.Two)
	return
}

func (f *Fuzz661) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadUint32s(b[2:], l0)
	return nil
}

func (f *Fuzz662) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.One
	jay.WriteUint64s(b[2:], f.Two)
	return
}

func (f *Fuzz662) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = b[1]
	f.Two = jay.ReadUint64s(b[2:], l0)
	return nil
}

func (f *Fuzz663) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = jay.Bool1(f.Two)
	jay.WriteUint16(b[1:], f.One)
	return
}

func (f *Fuzz663) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadUint16(b[1:])
	return nil
}

func (f *Fuzz664) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = f.Two
	jay.WriteUint16(b[1:], f.One)
	return
}

func (f *Fuzz664) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadUint16(b[1:])
	return nil
}

func (f *Fuzz665) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteComplex64(b[2:], f.Two)
	return
}

func (f *Fuzz665) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadComplex64(b[2:])
	return nil
}

func (f *Fuzz666) MarshalJ() (b []byte) {
	b = make([]byte, 18)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteComplex128(b[2:], f.Two)
	return
}

func (f *Fuzz666) UnmarshalJ(b []byte) error {
	if len(b) != 18 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadComplex128(b[2:])
	return nil
}

func (f *Fuzz667) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteFloat32(b[2:], f.Two)
	return
}

func (f *Fuzz667) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadFloat32(b[2:])
	return nil
}

func (f *Fuzz668) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteFloat64(b[2:], f.Two)
	return
}

func (f *Fuzz668) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadFloat64(b[2:])
	return nil
}

func (f *Fuzz669) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteIntX64(b[2:], f.Two)
	return
}

func (f *Fuzz669) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadIntX64(b[2:])
	return nil
}

func (f *Fuzz670) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = byte(f.Two)
	jay.WriteUint16(b[1:], f.One)
	return
}

func (f *Fuzz670) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadUint16(b[1:])
	return nil
}

func (f *Fuzz671) MarshalJ() (b []byte) {
	b = make([]byte, 4)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteInt16(b[2:], f.Two)
	return
}

func (f *Fuzz671) UnmarshalJ(b []byte) error {
	if len(b) != 4 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadInt16(b[2:])
	return nil
}

func (f *Fuzz672) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteInt32(b[2:], f.Two)
	return
}

func (f *Fuzz672) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadInt32(b[2:])
	return nil
}

func (f *Fuzz673) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteInt64(b[2:], f.Two)
	return
}

func (f *Fuzz673) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadInt64(b[2:])
	return nil
}

func (f *Fuzz674) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteInt32(b[2:], f.Two)
	return
}

func (f *Fuzz674) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadInt32(b[2:])
	return nil
}

func (f *Fuzz675) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	copy(b[3:], f.Two)
	return
}

func (f *Fuzz675) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = string(b[3:])
	return nil
}

func (f *Fuzz676) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteInt64(b[2:], int64(f.Two))
	return
}

func (f *Fuzz676) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = time.Duration(jay.ReadInt64(b[2:]))
	return nil
}

func (f *Fuzz677) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteTime(b[2:], f.Two)
	return
}

func (f *Fuzz677) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadTime(b[2:])
	return nil
}

func (f *Fuzz678) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteUintX64(b[2:], f.Two)
	return
}

func (f *Fuzz678) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadUintX64(b[2:])
	return nil
}

func (f *Fuzz679) MarshalJ() (b []byte) {
	b = make([]byte, 3)
	b[0] = f.Two
	jay.WriteUint16(b[1:], f.One)
	return
}

func (f *Fuzz679) UnmarshalJ(b []byte) error {
	if len(b) != 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadUint16(b[1:])
	return nil
}

func (f *Fuzz680) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteUint32(b[2:], f.Two)
	return
}

func (f *Fuzz680) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadUint32(b[2:])
	return nil
}

func (f *Fuzz681) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint16(b[:2], f.One)
	jay.WriteUint64(b[2:], f.Two)
	return
}

func (f *Fuzz681) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[:2])
	f.Two = jay.ReadUint64(b[2:])
	return nil
}

func (f *Fuzz682) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteBools(b[3:], f.Two, l0)
	return
}

func (f *Fuzz682) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 || l != 3+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadBools8(b[3:], b[0])
	return nil
}

func (f *Fuzz683) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	if l0 != 0 {
		copy(b[3:], f.Two)
	}
	return
}

func (f *Fuzz683) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	if l0 != 0 {
		f.Two = b[3:]
	}
	return nil
}

func (f *Fuzz684) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteComplex64s(b[3:], f.Two)
	return
}

func (f *Fuzz684) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadComplex64s(b[3:], l0)
	return nil
}

func (f *Fuzz685) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+16*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteComplex128s(b[3:], f.Two)
	return
}

func (f *Fuzz685) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadComplex128s(b[3:], l0)
	return nil
}

func (f *Fuzz686) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteFloat32s(b[3:], f.Two, l0)
	return
}

func (f *Fuzz686) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadFloat32s(b[3:], l0)
	return nil
}

func (f *Fuzz687) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteFloat64s(b[3:], f.Two, l0)
	return
}

func (f *Fuzz687) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadFloat64s(b[3:], l0)
	return nil
}

func (f *Fuzz688) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteIntsX64(b[3:], f.Two)
	return
}

func (f *Fuzz688) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadIntsX64(b[3:], l0)
	return nil
}

func (f *Fuzz689) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteInt8s(b[3:], f.Two)
	return
}

func (f *Fuzz689) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadInt8s(b[3:], l0)
	return nil
}

func (f *Fuzz690) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+2*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteInt16s(b[3:], f.Two, l0)
	return
}

func (f *Fuzz690) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadInt16s(b[3:], l0)
	return nil
}

func (f *Fuzz691) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteInt32s(b[3:], f.Two)
	return
}

func (f *Fuzz691) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadInt32s(b[3:], l0)
	return nil
}

func (f *Fuzz692) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteInt64s(b[3:], f.Two)
	return
}

func (f *Fuzz692) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadInt64s(b[3:], l0)
	return nil
}

func (f *Fuzz693) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteInt32s(b[3:], f.Two)
	return
}

func (f *Fuzz693) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadInt32s(b[3:], l0)
	return nil
}

func (f *Fuzz694) MarshalJ() (b []byte) {
	b = make([]byte, 3+jay.SizeStrings8(f.Two))
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteStrings8(b[3:], b[:1], f.Two)
	return
}

func (f *Fuzz694) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	return jay.ReadStrings8Err(b[3:], &f.Two, b[0])
}

func (f *Fuzz695) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteDurations(b[3:], f.Two)
	return
}

func (f *Fuzz695) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadDurations(b[3:], l0)
	return nil
}

func (f *Fuzz696) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteTimes(b[3:], f.Two)
	return
}

func (f *Fuzz696) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadTimes(b[3:], l0)
	return nil
}

func (f *Fuzz697) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteUintsX64(b[3:], f.Two)
	return
}

func (f *Fuzz697) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadUintsX64(b[3:], l0)
	return nil
}

func (f *Fuzz698) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	if l0 != 0 {
		copy(b[3:], f.Two)
	}
	return
}

func (f *Fuzz698) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	if l0 != 0 {
		f.Two = b[3:]
	}
	return nil
}

func (f *Fuzz699) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+2*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteUint16s(b[3:], f.Two, l0)
	return
}

func (f *Fuzz699) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadUint16s(b[3:], l0)
	return nil
}

func (f *Fuzz700) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteUint32s(b[3:], f.Two)
	return
}

func (f *Fuzz700) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadUint32s(b[3:], l0)
	return nil
}

func (f *Fuzz701) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.One)
	jay.WriteUint64s(b[3:], f.Two)
	return
}

func (f *Fuzz701) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16(b[1:3])
	f.Two = jay.ReadUint64s(b[3:], l0)
	return nil
}

func (f *Fuzz702) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = jay.Bool1(f.Two)
	jay.WriteUint32(b[1:], f.One)
	return
}

func (f *Fuzz702) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadUint32(b[1:])
	return nil
}

func (f *Fuzz703) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.Two
	jay.WriteUint32(b[1:], f.One)
	return
}

func (f *Fuzz703) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadUint32(b[1:])
	return nil
}

func (f *Fuzz704) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteComplex64(b[4:], f.Two)
	return
}

func (f *Fuzz704) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadComplex64(b[4:])
	return nil
}

func (f *Fuzz705) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteComplex128(b[4:], f.Two)
	return
}

func (f *Fuzz705) UnmarshalJ(b []byte) error {
	if len(b) != 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadComplex128(b[4:])
	return nil
}

func (f *Fuzz706) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteFloat32(b[4:], f.Two)
	return
}

func (f *Fuzz706) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadFloat32(b[4:])
	return nil
}

func (f *Fuzz707) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteFloat64(b[4:], f.Two)
	return
}

func (f *Fuzz707) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadFloat64(b[4:])
	return nil
}

func (f *Fuzz708) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteIntX64(b[4:], f.Two)
	return
}

func (f *Fuzz708) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadIntX64(b[4:])
	return nil
}

func (f *Fuzz709) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = byte(f.Two)
	jay.WriteUint32(b[1:], f.One)
	return
}

func (f *Fuzz709) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadUint32(b[1:])
	return nil
}

func (f *Fuzz710) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteInt16(b[4:], f.Two)
	return
}

func (f *Fuzz710) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadInt16(b[4:])
	return nil
}

func (f *Fuzz711) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteInt32(b[4:], f.Two)
	return
}

func (f *Fuzz711) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadInt32(b[4:])
	return nil
}

func (f *Fuzz712) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteInt64(b[4:], f.Two)
	return
}

func (f *Fuzz712) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadInt64(b[4:])
	return nil
}

func (f *Fuzz713) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteInt32(b[4:], f.Two)
	return
}

func (f *Fuzz713) UnmarshalJ(b []byte) error {
	if len(b) != 8 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadInt32(b[4:])
	return nil
}

func (f *Fuzz714) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	copy(b[5:], f.Two)
	return
}

func (f *Fuzz714) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = string(b[5:])
	return nil
}

func (f *Fuzz715) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteInt64(b[4:], int64(f.Two))
	return
}

func (f *Fuzz715) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = time.Duration(jay.ReadInt64(b[4:]))
	return nil
}

func (f *Fuzz716) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteTime(b[4:], f.Two)
	return
}

func (f *Fuzz716) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadTime(b[4:])
	return nil
}

func (f *Fuzz717) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteUintX64(b[4:], f.Two)
	return
}

func (f *Fuzz717) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadUintX64(b[4:])
	return nil
}

func (f *Fuzz718) MarshalJ() (b []byte) {
	b = make([]byte, 5)
	b[0] = f.Two
	jay.WriteUint32(b[1:], f.One)
	return
}

func (f *Fuzz718) UnmarshalJ(b []byte) error {
	if len(b) != 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadUint32(b[1:])
	return nil
}

func (f *Fuzz719) MarshalJ() (b []byte) {
	b = make([]byte, 6)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteUint16(b[4:], f.Two)
	return
}

func (f *Fuzz719) UnmarshalJ(b []byte) error {
	if len(b) != 6 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadUint16(b[4:])
	return nil
}

func (f *Fuzz720) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint32(b[:4], f.One)
	jay.WriteUint64(b[4:], f.Two)
	return
}

func (f *Fuzz720) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[:4])
	f.Two = jay.ReadUint64(b[4:])
	return nil
}

func (f *Fuzz721) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteBools(b[5:], f.Two, l0)
	return
}

func (f *Fuzz721) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 || l != 5+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadBools8(b[5:], b[0])
	return nil
}

func (f *Fuzz722) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	if l0 != 0 {
		copy(b[5:], f.Two)
	}
	return
}

func (f *Fuzz722) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	if l0 != 0 {
		f.Two = b[5:]
	}
	return nil
}

func (f *Fuzz723) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteComplex64s(b[5:], f.Two)
	return
}

func (f *Fuzz723) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadComplex64s(b[5:], l0)
	return nil
}

func (f *Fuzz724) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+16*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteComplex128s(b[5:], f.Two)
	return
}

func (f *Fuzz724) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadComplex128s(b[5:], l0)
	return nil
}

func (f *Fuzz725) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteFloat32s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz725) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadFloat32s(b[5:], l0)
	return nil
}

func (f *Fuzz726) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteFloat64s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz726) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadFloat64s(b[5:], l0)
	return nil
}

func (f *Fuzz727) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteIntsX64(b[5:], f.Two)
	return
}

func (f *Fuzz727) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadIntsX64(b[5:], l0)
	return nil
}

func (f *Fuzz728) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteInt8s(b[5:], f.Two)
	return
}

func (f *Fuzz728) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadInt8s(b[5:], l0)
	return nil
}

func (f *Fuzz729) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteInt16s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz729) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadInt16s(b[5:], l0)
	return nil
}

func (f *Fuzz730) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteInt32s(b[5:], f.Two)
	return
}

func (f *Fuzz730) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz731) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteInt64s(b[5:], f.Two)
	return
}

func (f *Fuzz731) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadInt64s(b[5:], l0)
	return nil
}

func (f *Fuzz732) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteInt32s(b[5:], f.Two)
	return
}

func (f *Fuzz732) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz733) MarshalJ() (b []byte) {
	b = make([]byte, 5+jay.SizeStrings8(f.Two))
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteStrings8(b[5:], b[:1], f.Two)
	return
}

func (f *Fuzz733) UnmarshalJ(b []byte) error {
	if len(b) < 5 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	return jay.ReadStrings8Err(b[5:], &f.Two, b[0])
}

func (f *Fuzz734) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteDurations(b[5:], f.Two)
	return
}

func (f *Fuzz734) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadDurations(b[5:], l0)
	return nil
}

func (f *Fuzz735) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteTimes(b[5:], f.Two)
	return
}

func (f *Fuzz735) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadTimes(b[5:], l0)
	return nil
}

func (f *Fuzz736) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteUintsX64(b[5:], f.Two)
	return
}

func (f *Fuzz736) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadUintsX64(b[5:], l0)
	return nil
}

func (f *Fuzz737) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	if l0 != 0 {
		copy(b[5:], f.Two)
	}
	return
}

func (f *Fuzz737) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	if l0 != 0 {
		f.Two = b[5:]
	}
	return nil
}

func (f *Fuzz738) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteUint16s(b[5:], f.Two, l0)
	return
}

func (f *Fuzz738) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadUint16s(b[5:], l0)
	return nil
}

func (f *Fuzz739) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteUint32s(b[5:], f.Two)
	return
}

func (f *Fuzz739) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadUint32s(b[5:], l0)
	return nil
}

func (f *Fuzz740) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.One)
	jay.WriteUint64s(b[5:], f.Two)
	return
}

func (f *Fuzz740) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32(b[1:5])
	f.Two = jay.ReadUint64s(b[5:], l0)
	return nil
}

func (f *Fuzz741) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = jay.Bool1(f.Two)
	jay.WriteUint64(b[1:], f.One)
	return
}

func (f *Fuzz741) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[0])
	f.One = jay.ReadUint64(b[1:])
	return nil
}

func (f *Fuzz742) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteUint64(b[1:], f.One)
	return
}

func (f *Fuzz742) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadUint64(b[1:])
	return nil
}

func (f *Fuzz743) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteComplex64(b[8:], f.Two)
	return
}

func (f *Fuzz743) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadComplex64(b[8:])
	return nil
}

func (f *Fuzz744) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteComplex128(b[8:], f.Two)
	return
}

func (f *Fuzz744) UnmarshalJ(b []byte) error {
	if len(b) != 24 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadComplex128(b[8:])
	return nil
}

func (f *Fuzz745) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteFloat32(b[8:], f.Two)
	return
}

func (f *Fuzz745) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadFloat32(b[8:])
	return nil
}

func (f *Fuzz746) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteFloat64(b[8:], f.Two)
	return
}

func (f *Fuzz746) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadFloat64(b[8:])
	return nil
}

func (f *Fuzz747) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteIntX64(b[8:], f.Two)
	return
}

func (f *Fuzz747) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadIntX64(b[8:])
	return nil
}

func (f *Fuzz748) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = byte(f.Two)
	jay.WriteUint64(b[1:], f.One)
	return
}

func (f *Fuzz748) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[0])
	f.One = jay.ReadUint64(b[1:])
	return nil
}

func (f *Fuzz749) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteInt16(b[8:], f.Two)
	return
}

func (f *Fuzz749) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadInt16(b[8:])
	return nil
}

func (f *Fuzz750) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz750) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz751) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteInt64(b[8:], f.Two)
	return
}

func (f *Fuzz751) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadInt64(b[8:])
	return nil
}

func (f *Fuzz752) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteInt32(b[8:], f.Two)
	return
}

func (f *Fuzz752) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadInt32(b[8:])
	return nil
}

func (f *Fuzz753) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	copy(b[9:], f.Two)
	return
}

func (f *Fuzz753) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = string(b[9:])
	return nil
}

func (f *Fuzz754) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteInt64(b[8:], int64(f.Two))
	return
}

func (f *Fuzz754) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = time.Duration(jay.ReadInt64(b[8:]))
	return nil
}

func (f *Fuzz755) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteTime(b[8:], f.Two)
	return
}

func (f *Fuzz755) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadTime(b[8:])
	return nil
}

func (f *Fuzz756) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteUintX64(b[8:], f.Two)
	return
}

func (f *Fuzz756) UnmarshalJ(b []byte) error {
	if len(b) != 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadUintX64(b[8:])
	return nil
}

func (f *Fuzz757) MarshalJ() (b []byte) {
	b = make([]byte, 9)
	b[0] = f.Two
	jay.WriteUint64(b[1:], f.One)
	return
}

func (f *Fuzz757) UnmarshalJ(b []byte) error {
	if len(b) != 9 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[0]
	f.One = jay.ReadUint64(b[1:])
	return nil
}

func (f *Fuzz758) MarshalJ() (b []byte) {
	b = make([]byte, 10)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteUint16(b[8:], f.Two)
	return
}

func (f *Fuzz758) UnmarshalJ(b []byte) error {
	if len(b) != 10 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadUint16(b[8:])
	return nil
}

func (f *Fuzz759) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteUint64(b[:8], f.One)
	jay.WriteUint32(b[8:], f.Two)
	return
}

func (f *Fuzz759) UnmarshalJ(b []byte) error {
	if len(b) != 12 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[:8])
	f.Two = jay.ReadUint32(b[8:])
	return nil
}

func (f *Fuzz760) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteBools(b[9:], f.Two, l0)
	return
}

func (f *Fuzz760) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz761) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz761) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz762) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteComplex64s(b[9:], f.Two)
	return
}

func (f *Fuzz762) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz763) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteComplex128s(b[9:], f.Two)
	return
}

func (f *Fuzz763) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz764) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteFloat32s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz764) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz765) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteFloat64s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz765) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz766) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteIntsX64(b[9:], f.Two)
	return
}

func (f *Fuzz766) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz767) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteInt8s(b[9:], f.Two)
	return
}

func (f *Fuzz767) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz768) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteInt16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz768) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz769) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz769) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz770) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteInt64s(b[9:], f.Two)
	return
}

func (f *Fuzz770) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz771) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteInt32s(b[9:], f.Two)
	return
}

func (f *Fuzz771) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz772) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.Two))
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteStrings8(b[9:], b[:1], f.Two)
	return
}

func (f *Fuzz772) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.Two, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	return nil
}

func (f *Fuzz773) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteDurations(b[9:], f.Two)
	return
}

func (f *Fuzz773) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz774) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteTimes(b[9:], f.Two)
	return
}

func (f *Fuzz774) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz775) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteUintsX64(b[9:], f.Two)
	return
}

func (f *Fuzz775) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz776) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	if l0 != 0 {
		copy(b[9:], f.Two)
	}
	return
}

func (f *Fuzz776) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	if l0 != 0 {
		f.Two = b[9:]
	}
	return nil
}

func (f *Fuzz777) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteUint16s(b[9:], f.Two, l0)
	return
}

func (f *Fuzz777) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz778) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteUint32s(b[9:], f.Two)
	return
}

func (f *Fuzz778) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz779) MarshalJ() (b []byte) {
	l0 := len(f.Two)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.One)
	jay.WriteUint64s(b[9:], f.Two)
	return
}

func (f *Fuzz779) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64(b[1:9])
	f.Two = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz780) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+jay.SizeBools(l0))
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteBools(b[2:], f.One, l0)
	return
}

func (f *Fuzz780) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l != 2+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadBools8(b[2:], b[0])
	return nil
}

func (f *Fuzz781) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+jay.SizeBools(l0))
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteBools(b[2:], f.One, l0)
	return
}

func (f *Fuzz781) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l != 2+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadBools8(b[2:], b[0])
	return nil
}

func (f *Fuzz782) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteBools(b[9:], f.One, l0)
	return
}

func (f *Fuzz782) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz783) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteBools(b[17:], f.One, l0)
	return
}

func (f *Fuzz783) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 || l != 17+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadBools8(b[17:], b[0])
	return nil
}

func (f *Fuzz784) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteBools(b[5:], f.One, l0)
	return
}

func (f *Fuzz784) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 || l != 5+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadBools8(b[5:], b[0])
	return nil
}

func (f *Fuzz785) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteBools(b[9:], f.One, l0)
	return
}

func (f *Fuzz785) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz786) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteBools(b[9:], f.One, l0)
	return
}

func (f *Fuzz786) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz787) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+jay.SizeBools(l0))
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteBools(b[2:], f.One, l0)
	return
}

func (f *Fuzz787) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l != 2+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadBools8(b[2:], b[0])
	return nil
}

func (f *Fuzz788) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteBools(b[3:], f.One, l0)
	return
}

func (f *Fuzz788) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 || l != 3+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadBools8(b[3:], b[0])
	return nil
}

func (f *Fuzz789) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteBools(b[5:], f.One, l0)
	return
}

func (f *Fuzz789) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 || l != 5+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadBools8(b[5:], b[0])
	return nil
}

func (f *Fuzz790) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteBools(b[9:], f.One, l0)
	return
}

func (f *Fuzz790) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz791) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteBools(b[5:], f.One, l0)
	return
}

func (f *Fuzz791) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 || l != 5+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadBools8(b[5:], b[0])
	return nil
}

func (f *Fuzz792) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+jay.SizeBools(l0)+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz792) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz793) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteBools(b[9:], f.One, l0)
	return
}

func (f *Fuzz793) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz794) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteBools(b[9:], f.One, l0)
	return
}

func (f *Fuzz794) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz795) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteBools(b[9:], f.One, l0)
	return
}

func (f *Fuzz795) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz796) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+jay.SizeBools(l0))
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteBools(b[2:], f.One, l0)
	return
}

func (f *Fuzz796) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l != 2+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadBools8(b[2:], b[0])
	return nil
}

func (f *Fuzz797) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteBools(b[3:], f.One, l0)
	return
}

func (f *Fuzz797) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 || l != 3+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadBools8(b[3:], b[0])
	return nil
}

func (f *Fuzz798) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteBools(b[5:], f.One, l0)
	return
}

func (f *Fuzz798) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 || l != 5+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadBools8(b[5:], b[0])
	return nil
}

func (f *Fuzz799) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+jay.SizeBools(l0))
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteBools(b[9:], f.One, l0)
	return
}

func (f *Fuzz799) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 || l != 9+jay.SizeBools8(b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadBools8(b[9:], b[0])
	return nil
}

func (f *Fuzz800) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+jay.SizeBools(l0)+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz800) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz801) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz801) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz802) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz802) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+16*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz803) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz803) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz804) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz804) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz805) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz805) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz806) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+jay.SizeBools(l0)+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz806) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz807) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz807) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz808) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz808) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz809) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz809) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz810) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz810) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz811) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+l0+jay.SizeBools(l1))
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteBools(b[end:], f.One, l1)
	return
}

func (f *Fuzz811) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l < 2+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadBools8(b[at:], b[1])
	return nil
}

func (f *Fuzz812) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz812) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz813) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz813) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz814) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz814) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz815) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+jay.SizeBools(l0)+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz815) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz816) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz816) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz817) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz817) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz818) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+jay.SizeBools(l0))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+jay.SizeBools(l0)
	jay.WriteBools(b[at:end], f.One, l0)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz818) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := jay.SizeBools8(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadBools8(b[at:end], b[0])
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz819) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	if l0 != 0 {
		copy(b[2:], f.One)
	}
	return
}

func (f *Fuzz819) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	if l0 != 0 {
		f.One = b[2:]
	}
	return nil
}

func (f *Fuzz820) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.Two
	if l0 != 0 {
		copy(b[2:], f.One)
	}
	return
}

func (f *Fuzz820) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	if l0 != 0 {
		f.One = b[2:]
	}
	return nil
}

func (f *Fuzz821) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz821) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz822) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	if l0 != 0 {
		copy(b[17:], f.One)
	}
	return
}

func (f *Fuzz822) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	if l0 != 0 {
		f.One = b[17:]
	}
	return nil
}

func (f *Fuzz823) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	if l0 != 0 {
		copy(b[5:], f.One)
	}
	return
}

func (f *Fuzz823) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	if l0 != 0 {
		f.One = b[5:]
	}
	return nil
}

func (f *Fuzz824) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz824) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz825) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz825) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz826) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	if l0 != 0 {
		copy(b[2:], f.One)
	}
	return
}

func (f *Fuzz826) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	if l0 != 0 {
		f.One = b[2:]
	}
	return nil
}

func (f *Fuzz827) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	if l0 != 0 {
		copy(b[3:], f.One)
	}
	return
}

func (f *Fuzz827) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	if l0 != 0 {
		f.One = b[3:]
	}
	return nil
}

func (f *Fuzz828) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	if l0 != 0 {
		copy(b[5:], f.One)
	}
	return
}

func (f *Fuzz828) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	if l0 != 0 {
		f.One = b[5:]
	}
	return nil
}

func (f *Fuzz829) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz829) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz830) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	if l0 != 0 {
		copy(b[5:], f.One)
	}
	return
}

func (f *Fuzz830) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	if l0 != 0 {
		f.One = b[5:]
	}
	return nil
}

func (f *Fuzz831) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz831) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz832) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz832) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz833) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz833) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz834) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz834) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz835) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.Two
	if l0 != 0 {
		copy(b[2:], f.One)
	}
	return
}

func (f *Fuzz835) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	if l0 != 0 {
		f.One = b[2:]
	}
	return nil
}

func (f *Fuzz836) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	if l0 != 0 {
		copy(b[3:], f.One)
	}
	return
}

func (f *Fuzz836) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	if l0 != 0 {
		f.One = b[3:]
	}
	return nil
}

func (f *Fuzz837) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	if l0 != 0 {
		copy(b[5:], f.One)
	}
	return
}

func (f *Fuzz837) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	if l0 != 0 {
		f.One = b[5:]
	}
	return nil
}

func (f *Fuzz838) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz838) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz839) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz839) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz840) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz840) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz841) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz841) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz842) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz842) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz843) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz843) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz844) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz844) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz845) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz845) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz846) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz846) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz847) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz847) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz848) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz848) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz849) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz849) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz850) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+l0+l1)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	if l1 != 0 {
		copy(b[end:], f.One)
	}
	return
}

func (f *Fuzz850) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	if l1 != 0 {
		f.One = b[at:]
	}
	return nil
}

func (f *Fuzz851) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz851) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz852) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz852) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz853) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz853) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz854) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz854) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz855) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz855) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz856) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz856) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz857) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz857) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz858) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteComplex64s(b[2:], f.One)
	return
}

func (f *Fuzz858) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadComplex64s(b[2:], l0)
	return nil
}

func (f *Fuzz859) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteComplex64s(b[2:], f.One)
	return
}

func (f *Fuzz859) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadComplex64s(b[2:], l0)
	return nil
}

func (f *Fuzz860) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteComplex64s(b[9:], f.One)
	return
}

func (f *Fuzz860) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz861) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteComplex64s(b[17:], f.One)
	return
}

func (f *Fuzz861) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadComplex64s(b[17:], l0)
	return nil
}

func (f *Fuzz862) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteComplex64s(b[5:], f.One)
	return
}

func (f *Fuzz862) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadComplex64s(b[5:], l0)
	return nil
}

func (f *Fuzz863) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteComplex64s(b[9:], f.One)
	return
}

func (f *Fuzz863) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz864) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteComplex64s(b[9:], f.One)
	return
}

func (f *Fuzz864) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz865) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteComplex64s(b[2:], f.One)
	return
}

func (f *Fuzz865) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadComplex64s(b[2:], l0)
	return nil
}

func (f *Fuzz866) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteComplex64s(b[3:], f.One)
	return
}

func (f *Fuzz866) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadComplex64s(b[3:], l0)
	return nil
}

func (f *Fuzz867) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteComplex64s(b[5:], f.One)
	return
}

func (f *Fuzz867) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadComplex64s(b[5:], l0)
	return nil
}

func (f *Fuzz868) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteComplex64s(b[9:], f.One)
	return
}

func (f *Fuzz868) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz869) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteComplex64s(b[5:], f.One)
	return
}

func (f *Fuzz869) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadComplex64s(b[5:], l0)
	return nil
}

func (f *Fuzz870) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz870) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz871) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteComplex64s(b[9:], f.One)
	return
}

func (f *Fuzz871) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz872) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteComplex64s(b[9:], f.One)
	return
}

func (f *Fuzz872) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz873) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteComplex64s(b[9:], f.One)
	return
}

func (f *Fuzz873) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz874) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteComplex64s(b[2:], f.One)
	return
}

func (f *Fuzz874) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadComplex64s(b[2:], l0)
	return nil
}

func (f *Fuzz875) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteComplex64s(b[3:], f.One)
	return
}

func (f *Fuzz875) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadComplex64s(b[3:], l0)
	return nil
}

func (f *Fuzz876) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteComplex64s(b[5:], f.One)
	return
}

func (f *Fuzz876) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadComplex64s(b[5:], l0)
	return nil
}

func (f *Fuzz877) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteComplex64s(b[9:], f.One)
	return
}

func (f *Fuzz877) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadComplex64s(b[9:], l0)
	return nil
}

func (f *Fuzz878) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz878) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz879) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz879) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz880) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+8*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz880) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz881) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz881) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz882) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz882) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz883) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz883) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz884) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz884) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz885) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz885) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz886) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz886) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz887) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz887) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz888) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz888) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz889) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteComplex64s(b[end:], f.One)
	return
}

func (f *Fuzz889) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex64s(b[at:], l1)
	return nil
}

func (f *Fuzz890) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz890) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz891) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz891) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz892) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz892) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz893) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz893) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz894) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz894) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz895) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz895) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz896) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteComplex64s(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz896) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadComplex64s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz897) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+16*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteComplex128s(b[2:], f.One)
	return
}

func (f *Fuzz897) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadComplex128s(b[2:], l0)
	return nil
}

func (f *Fuzz898) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+16*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteComplex128s(b[2:], f.One)
	return
}

func (f *Fuzz898) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadComplex128s(b[2:], l0)
	return nil
}

func (f *Fuzz899) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteComplex128s(b[9:], f.One)
	return
}

func (f *Fuzz899) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz900) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+16*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteComplex128s(b[17:], f.One)
	return
}

func (f *Fuzz900) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadComplex128s(b[17:], l0)
	return nil
}

func (f *Fuzz901) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+16*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteComplex128s(b[5:], f.One)
	return
}

func (f *Fuzz901) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadComplex128s(b[5:], l0)
	return nil
}

func (f *Fuzz902) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteComplex128s(b[9:], f.One)
	return
}

func (f *Fuzz902) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz903) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteComplex128s(b[9:], f.One)
	return
}

func (f *Fuzz903) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz904) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+16*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteComplex128s(b[2:], f.One)
	return
}

func (f *Fuzz904) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadComplex128s(b[2:], l0)
	return nil
}

func (f *Fuzz905) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+16*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteComplex128s(b[3:], f.One)
	return
}

func (f *Fuzz905) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadComplex128s(b[3:], l0)
	return nil
}

func (f *Fuzz906) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+16*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteComplex128s(b[5:], f.One)
	return
}

func (f *Fuzz906) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadComplex128s(b[5:], l0)
	return nil
}

func (f *Fuzz907) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteComplex128s(b[9:], f.One)
	return
}

func (f *Fuzz907) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz908) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+16*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteComplex128s(b[5:], f.One)
	return
}

func (f *Fuzz908) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadComplex128s(b[5:], l0)
	return nil
}

func (f *Fuzz909) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz909) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz910) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteComplex128s(b[9:], f.One)
	return
}

func (f *Fuzz910) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz911) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteComplex128s(b[9:], f.One)
	return
}

func (f *Fuzz911) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz912) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteComplex128s(b[9:], f.One)
	return
}

func (f *Fuzz912) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz913) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+16*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteComplex128s(b[2:], f.One)
	return
}

func (f *Fuzz913) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadComplex128s(b[2:], l0)
	return nil
}

func (f *Fuzz914) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+16*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteComplex128s(b[3:], f.One)
	return
}

func (f *Fuzz914) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadComplex128s(b[3:], l0)
	return nil
}

func (f *Fuzz915) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+16*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteComplex128s(b[5:], f.One)
	return
}

func (f *Fuzz915) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadComplex128s(b[5:], l0)
	return nil
}

func (f *Fuzz916) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+16*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteComplex128s(b[9:], f.One)
	return
}

func (f *Fuzz916) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+16*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadComplex128s(b[9:], l0)
	return nil
}

func (f *Fuzz917) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz917) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+16*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz918) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz918) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz919) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+8*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz919) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz920) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz920) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz921) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+8*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz921) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz922) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+8*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz922) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz923) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz923) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz924) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz924) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz925) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz925) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz926) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+8*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz926) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz927) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz927) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz928) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+16*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteComplex128s(b[end:], f.One)
	return
}

func (f *Fuzz928) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+16*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadComplex128s(b[at:], l1)
	return nil
}

func (f *Fuzz929) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+8*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz929) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz930) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+8*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz930) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz931) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+8*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz931) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz932) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz932) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz933) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz933) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz934) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz934) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz935) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l0+8*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*16
	jay.WriteComplex128s(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz935) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l0+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*16
	f.One = jay.ReadComplex128s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz936) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteFloat32s(b[2:], f.One, l0)
	return
}

func (f *Fuzz936) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadFloat32s(b[2:], l0)
	return nil
}

func (f *Fuzz937) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteFloat32s(b[2:], f.One, l0)
	return
}

func (f *Fuzz937) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadFloat32s(b[2:], l0)
	return nil
}

func (f *Fuzz938) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteFloat32s(b[9:], f.One, l0)
	return
}

func (f *Fuzz938) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz939) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteFloat32s(b[17:], f.One, l0)
	return
}

func (f *Fuzz939) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadFloat32s(b[17:], l0)
	return nil
}

func (f *Fuzz940) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteFloat32s(b[5:], f.One, l0)
	return
}

func (f *Fuzz940) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadFloat32s(b[5:], l0)
	return nil
}

func (f *Fuzz941) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteFloat32s(b[9:], f.One, l0)
	return
}

func (f *Fuzz941) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz942) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteFloat32s(b[9:], f.One, l0)
	return
}

func (f *Fuzz942) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz943) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteFloat32s(b[2:], f.One, l0)
	return
}

func (f *Fuzz943) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadFloat32s(b[2:], l0)
	return nil
}

func (f *Fuzz944) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteFloat32s(b[3:], f.One, l0)
	return
}

func (f *Fuzz944) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadFloat32s(b[3:], l0)
	return nil
}

func (f *Fuzz945) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteFloat32s(b[5:], f.One, l0)
	return
}

func (f *Fuzz945) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadFloat32s(b[5:], l0)
	return nil
}

func (f *Fuzz946) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteFloat32s(b[9:], f.One, l0)
	return
}

func (f *Fuzz946) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz947) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteFloat32s(b[5:], f.One, l0)
	return
}

func (f *Fuzz947) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadFloat32s(b[5:], l0)
	return nil
}

func (f *Fuzz948) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz948) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz949) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteFloat32s(b[9:], f.One, l0)
	return
}

func (f *Fuzz949) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz950) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteFloat32s(b[9:], f.One, l0)
	return
}

func (f *Fuzz950) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz951) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteFloat32s(b[9:], f.One, l0)
	return
}

func (f *Fuzz951) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz952) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteFloat32s(b[2:], f.One, l0)
	return
}

func (f *Fuzz952) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadFloat32s(b[2:], l0)
	return nil
}

func (f *Fuzz953) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteFloat32s(b[3:], f.One, l0)
	return
}

func (f *Fuzz953) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadFloat32s(b[3:], l0)
	return nil
}

func (f *Fuzz954) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteFloat32s(b[5:], f.One, l0)
	return
}

func (f *Fuzz954) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadFloat32s(b[5:], l0)
	return nil
}

func (f *Fuzz955) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteFloat32s(b[9:], f.One, l0)
	return
}

func (f *Fuzz955) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadFloat32s(b[9:], l0)
	return nil
}

func (f *Fuzz956) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz956) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz957) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz957) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz958) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz958) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz959) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz959) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz960) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz960) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz961) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz961) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz962) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz962) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz963) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz963) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz964) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz964) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz965) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz965) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz966) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz966) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz967) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+4*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteFloat32s(b[end:], f.One, l1)
	return
}

func (f *Fuzz967) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat32s(b[at:], l1)
	return nil
}

func (f *Fuzz968) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz968) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz969) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz969) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz970) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz970) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz971) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz971) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz972) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz972) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz973) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz973) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz974) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteFloat32s(b[at:end], f.One, l0)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz974) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadFloat32s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz975) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteFloat64s(b[2:], f.One, l0)
	return
}

func (f *Fuzz975) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadFloat64s(b[2:], l0)
	return nil
}

func (f *Fuzz976) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteFloat64s(b[2:], f.One, l0)
	return
}

func (f *Fuzz976) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadFloat64s(b[2:], l0)
	return nil
}

func (f *Fuzz977) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteFloat64s(b[9:], f.One, l0)
	return
}

func (f *Fuzz977) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz978) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteFloat64s(b[17:], f.One, l0)
	return
}

func (f *Fuzz978) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadFloat64s(b[17:], l0)
	return nil
}

func (f *Fuzz979) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteFloat64s(b[5:], f.One, l0)
	return
}

func (f *Fuzz979) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadFloat64s(b[5:], l0)
	return nil
}

func (f *Fuzz980) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteFloat64s(b[9:], f.One, l0)
	return
}

func (f *Fuzz980) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz981) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteFloat64s(b[9:], f.One, l0)
	return
}

func (f *Fuzz981) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz982) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteFloat64s(b[2:], f.One, l0)
	return
}

func (f *Fuzz982) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadFloat64s(b[2:], l0)
	return nil
}

func (f *Fuzz983) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteFloat64s(b[3:], f.One, l0)
	return
}

func (f *Fuzz983) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadFloat64s(b[3:], l0)
	return nil
}

func (f *Fuzz984) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteFloat64s(b[5:], f.One, l0)
	return
}

func (f *Fuzz984) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadFloat64s(b[5:], l0)
	return nil
}

func (f *Fuzz985) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteFloat64s(b[9:], f.One, l0)
	return
}

func (f *Fuzz985) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz986) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteFloat64s(b[5:], f.One, l0)
	return
}

func (f *Fuzz986) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadFloat64s(b[5:], l0)
	return nil
}

func (f *Fuzz987) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz987) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz988) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteFloat64s(b[9:], f.One, l0)
	return
}

func (f *Fuzz988) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz989) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteFloat64s(b[9:], f.One, l0)
	return
}

func (f *Fuzz989) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz990) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteFloat64s(b[9:], f.One, l0)
	return
}

func (f *Fuzz990) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz991) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteFloat64s(b[2:], f.One, l0)
	return
}

func (f *Fuzz991) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadFloat64s(b[2:], l0)
	return nil
}

func (f *Fuzz992) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteFloat64s(b[3:], f.One, l0)
	return
}

func (f *Fuzz992) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadFloat64s(b[3:], l0)
	return nil
}

func (f *Fuzz993) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteFloat64s(b[5:], f.One, l0)
	return
}

func (f *Fuzz993) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadFloat64s(b[5:], l0)
	return nil
}

func (f *Fuzz994) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteFloat64s(b[9:], f.One, l0)
	return
}

func (f *Fuzz994) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadFloat64s(b[9:], l0)
	return nil
}

func (f *Fuzz995) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz995) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz996) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz996) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz997) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz997) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz998) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+8*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz998) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz999) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz999) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1000) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1000) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1001) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1001) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1002) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1002) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1003) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1003) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1004) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1004) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1005) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1005) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1006) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteFloat64s(b[end:], f.One, l1)
	return
}

func (f *Fuzz1006) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadFloat64s(b[at:], l1)
	return nil
}

func (f *Fuzz1007) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1007) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1008) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1008) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1009) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1009) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1010) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1010) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1011) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1011) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1012) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1012) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1013) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteFloat64s(b[at:end], f.One, l0)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1013) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadFloat64s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1014) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteIntsX64(b[2:], f.One)
	return
}

func (f *Fuzz1014) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadIntsX64(b[2:], l0)
	return nil
}

func (f *Fuzz1015) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteIntsX64(b[2:], f.One)
	return
}

func (f *Fuzz1015) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadIntsX64(b[2:], l0)
	return nil
}

func (f *Fuzz1016) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteIntsX64(b[9:], f.One)
	return
}

func (f *Fuzz1016) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1017) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteIntsX64(b[17:], f.One)
	return
}

func (f *Fuzz1017) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadIntsX64(b[17:], l0)
	return nil
}

func (f *Fuzz1018) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteIntsX64(b[5:], f.One)
	return
}

func (f *Fuzz1018) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadIntsX64(b[5:], l0)
	return nil
}

func (f *Fuzz1019) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteIntsX64(b[9:], f.One)
	return
}

func (f *Fuzz1019) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1020) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteIntsX64(b[9:], f.One)
	return
}

func (f *Fuzz1020) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1021) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteIntsX64(b[2:], f.One)
	return
}

func (f *Fuzz1021) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadIntsX64(b[2:], l0)
	return nil
}

func (f *Fuzz1022) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteIntsX64(b[3:], f.One)
	return
}

func (f *Fuzz1022) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadIntsX64(b[3:], l0)
	return nil
}

func (f *Fuzz1023) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteIntsX64(b[5:], f.One)
	return
}

func (f *Fuzz1023) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadIntsX64(b[5:], l0)
	return nil
}

func (f *Fuzz1024) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteIntsX64(b[9:], f.One)
	return
}

func (f *Fuzz1024) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1025) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteIntsX64(b[5:], f.One)
	return
}

func (f *Fuzz1025) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadIntsX64(b[5:], l0)
	return nil
}

func (f *Fuzz1026) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1026) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1027) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteIntsX64(b[9:], f.One)
	return
}

func (f *Fuzz1027) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1028) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteIntsX64(b[9:], f.One)
	return
}

func (f *Fuzz1028) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1029) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteIntsX64(b[9:], f.One)
	return
}

func (f *Fuzz1029) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1030) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteIntsX64(b[2:], f.One)
	return
}

func (f *Fuzz1030) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadIntsX64(b[2:], l0)
	return nil
}

func (f *Fuzz1031) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteIntsX64(b[3:], f.One)
	return
}

func (f *Fuzz1031) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadIntsX64(b[3:], l0)
	return nil
}

func (f *Fuzz1032) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteIntsX64(b[5:], f.One)
	return
}

func (f *Fuzz1032) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadIntsX64(b[5:], l0)
	return nil
}

func (f *Fuzz1033) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteIntsX64(b[9:], f.One)
	return
}

func (f *Fuzz1033) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadIntsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1034) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1034) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1035) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1035) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1036) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1036) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1037) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+8*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1037) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1038) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1038) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1039) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1039) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1040) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1040) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1041) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1041) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1042) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1042) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1043) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1043) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1044) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1044) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1045) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteIntsX64(b[end:], f.One)
	return
}

func (f *Fuzz1045) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadIntsX64(b[at:], l1)
	return nil
}

func (f *Fuzz1046) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1046) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1047) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1047) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1048) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1048) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1049) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1049) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1050) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1050) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1051) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1051) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1052) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteIntsX64(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1052) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadIntsX64(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1053) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteInt8s(b[2:], f.One)
	return
}

func (f *Fuzz1053) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadInt8s(b[2:], l0)
	return nil
}

func (f *Fuzz1054) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt8s(b[2:], f.One)
	return
}

func (f *Fuzz1054) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt8s(b[2:], l0)
	return nil
}

func (f *Fuzz1055) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteInt8s(b[9:], f.One)
	return
}

func (f *Fuzz1055) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz1056) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteInt8s(b[17:], f.One)
	return
}

func (f *Fuzz1056) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadInt8s(b[17:], l0)
	return nil
}

func (f *Fuzz1057) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteInt8s(b[5:], f.One)
	return
}

func (f *Fuzz1057) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadInt8s(b[5:], l0)
	return nil
}

func (f *Fuzz1058) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteInt8s(b[9:], f.One)
	return
}

func (f *Fuzz1058) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz1059) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteInt8s(b[9:], f.One)
	return
}

func (f *Fuzz1059) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz1060) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteInt8s(b[2:], f.One)
	return
}

func (f *Fuzz1060) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadInt8s(b[2:], l0)
	return nil
}

func (f *Fuzz1061) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteInt8s(b[3:], f.One)
	return
}

func (f *Fuzz1061) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadInt8s(b[3:], l0)
	return nil
}

func (f *Fuzz1062) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt8s(b[5:], f.One)
	return
}

func (f *Fuzz1062) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt8s(b[5:], l0)
	return nil
}

func (f *Fuzz1063) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteInt8s(b[9:], f.One)
	return
}

func (f *Fuzz1063) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz1064) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt8s(b[5:], f.One)
	return
}

func (f *Fuzz1064) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt8s(b[5:], l0)
	return nil
}

func (f *Fuzz1065) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1065) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1066) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteInt8s(b[9:], f.One)
	return
}

func (f *Fuzz1066) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz1067) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteInt8s(b[9:], f.One)
	return
}

func (f *Fuzz1067) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz1068) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteInt8s(b[9:], f.One)
	return
}

func (f *Fuzz1068) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz1069) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt8s(b[2:], f.One)
	return
}

func (f *Fuzz1069) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt8s(b[2:], l0)
	return nil
}

func (f *Fuzz1070) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteInt8s(b[3:], f.One)
	return
}

func (f *Fuzz1070) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadInt8s(b[3:], l0)
	return nil
}

func (f *Fuzz1071) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteInt8s(b[5:], f.One)
	return
}

func (f *Fuzz1071) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadInt8s(b[5:], l0)
	return nil
}

func (f *Fuzz1072) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteInt8s(b[9:], f.One)
	return
}

func (f *Fuzz1072) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadInt8s(b[9:], l0)
	return nil
}

func (f *Fuzz1073) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1073) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1074) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1074) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1075) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1075) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1076) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1076) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1077) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1077) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1078) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1078) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1079) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1079) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1080) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1080) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1081) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1081) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1082) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1082) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1083) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1083) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1084) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+l0+l1)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteInt8s(b[end:], f.One)
	return
}

func (f *Fuzz1084) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt8s(b[at:], l1)
	return nil
}

func (f *Fuzz1085) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1085) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1086) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1086) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1087) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1087) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1088) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1088) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1089) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1089) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1090) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1090) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1091) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	jay.WriteInt8s(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1091) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	f.One = jay.ReadInt8s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1092) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteInt16s(b[2:], f.One, l0)
	return
}

func (f *Fuzz1092) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadInt16s(b[2:], l0)
	return nil
}

func (f *Fuzz1093) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt16s(b[2:], f.One, l0)
	return
}

func (f *Fuzz1093) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt16s(b[2:], l0)
	return nil
}

func (f *Fuzz1094) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteInt16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1094) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz1095) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+2*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteInt16s(b[17:], f.One, l0)
	return
}

func (f *Fuzz1095) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadInt16s(b[17:], l0)
	return nil
}

func (f *Fuzz1096) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteInt16s(b[5:], f.One, l0)
	return
}

func (f *Fuzz1096) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadInt16s(b[5:], l0)
	return nil
}

func (f *Fuzz1097) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteInt16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1097) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz1098) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteInt16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1098) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz1099) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteInt16s(b[2:], f.One, l0)
	return
}

func (f *Fuzz1099) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadInt16s(b[2:], l0)
	return nil
}

func (f *Fuzz1100) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+2*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteInt16s(b[3:], f.One, l0)
	return
}

func (f *Fuzz1100) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadInt16s(b[3:], l0)
	return nil
}

func (f *Fuzz1101) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt16s(b[5:], f.One, l0)
	return
}

func (f *Fuzz1101) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt16s(b[5:], l0)
	return nil
}

func (f *Fuzz1102) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteInt16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1102) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz1103) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt16s(b[5:], f.One, l0)
	return
}

func (f *Fuzz1103) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt16s(b[5:], l0)
	return nil
}

func (f *Fuzz1104) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1104) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1105) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteInt16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1105) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz1106) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteInt16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1106) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz1107) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteInt16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1107) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz1108) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt16s(b[2:], f.One, l0)
	return
}

func (f *Fuzz1108) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt16s(b[2:], l0)
	return nil
}

func (f *Fuzz1109) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+2*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteInt16s(b[3:], f.One, l0)
	return
}

func (f *Fuzz1109) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadInt16s(b[3:], l0)
	return nil
}

func (f *Fuzz1110) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteInt16s(b[5:], f.One, l0)
	return
}

func (f *Fuzz1110) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadInt16s(b[5:], l0)
	return nil
}

func (f *Fuzz1111) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteInt16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1111) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadInt16s(b[9:], l0)
	return nil
}

func (f *Fuzz1112) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1112) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1113) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1113) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1114) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1114) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1115) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1115) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1116) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1116) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1117) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1117) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1118) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1118) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1119) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1119) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1120) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1120) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1121) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1121) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1122) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1122) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1123) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+2*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteInt16s(b[end:], f.One, l1)
	return
}

func (f *Fuzz1123) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt16s(b[at:], l1)
	return nil
}

func (f *Fuzz1124) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1124) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1125) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1125) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1126) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1126) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1127) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1127) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1128) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1128) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1129) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1129) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1130) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteInt16s(b[at:end], f.One, l0)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1130) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadInt16s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1131) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteInt32s(b[2:], f.One)
	return
}

func (f *Fuzz1131) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz1132) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt32s(b[2:], f.One)
	return
}

func (f *Fuzz1132) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz1133) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1133) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1134) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteInt32s(b[17:], f.One)
	return
}

func (f *Fuzz1134) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadInt32s(b[17:], l0)
	return nil
}

func (f *Fuzz1135) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteInt32s(b[5:], f.One)
	return
}

func (f *Fuzz1135) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz1136) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1136) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1137) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1137) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1138) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteInt32s(b[2:], f.One)
	return
}

func (f *Fuzz1138) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz1139) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteInt32s(b[3:], f.One)
	return
}

func (f *Fuzz1139) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadInt32s(b[3:], l0)
	return nil
}

func (f *Fuzz1140) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt32s(b[5:], f.One)
	return
}

func (f *Fuzz1140) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz1141) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1141) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1142) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt32s(b[5:], f.One)
	return
}

func (f *Fuzz1142) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz1143) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1143) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1144) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1144) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1145) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1145) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1146) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1146) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1147) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt32s(b[2:], f.One)
	return
}

func (f *Fuzz1147) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz1148) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteInt32s(b[3:], f.One)
	return
}

func (f *Fuzz1148) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadInt32s(b[3:], l0)
	return nil
}

func (f *Fuzz1149) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteInt32s(b[5:], f.One)
	return
}

func (f *Fuzz1149) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz1150) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1150) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1151) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1151) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1152) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1152) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1153) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1153) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1154) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1154) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1155) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1155) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1156) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1156) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1157) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1157) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1158) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1158) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1159) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1159) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1160) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1160) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1161) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1161) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1162) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+4*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteInt32s(b[end:], f.One)
	return
}

func (f *Fuzz1162) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32s(b[at:], l1)
	return nil
}

func (f *Fuzz1163) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1163) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1164) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1164) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1165) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1165) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1166) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1166) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1167) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1167) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1168) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1168) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1169) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1169) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1170) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteInt64s(b[2:], f.One)
	return
}

func (f *Fuzz1170) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadInt64s(b[2:], l0)
	return nil
}

func (f *Fuzz1171) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt64s(b[2:], f.One)
	return
}

func (f *Fuzz1171) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt64s(b[2:], l0)
	return nil
}

func (f *Fuzz1172) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteInt64s(b[9:], f.One)
	return
}

func (f *Fuzz1172) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz1173) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteInt64s(b[17:], f.One)
	return
}

func (f *Fuzz1173) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadInt64s(b[17:], l0)
	return nil
}

func (f *Fuzz1174) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteInt64s(b[5:], f.One)
	return
}

func (f *Fuzz1174) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadInt64s(b[5:], l0)
	return nil
}

func (f *Fuzz1175) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteInt64s(b[9:], f.One)
	return
}

func (f *Fuzz1175) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz1176) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteInt64s(b[9:], f.One)
	return
}

func (f *Fuzz1176) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz1177) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteInt64s(b[2:], f.One)
	return
}

func (f *Fuzz1177) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadInt64s(b[2:], l0)
	return nil
}

func (f *Fuzz1178) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteInt64s(b[3:], f.One)
	return
}

func (f *Fuzz1178) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadInt64s(b[3:], l0)
	return nil
}

func (f *Fuzz1179) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt64s(b[5:], f.One)
	return
}

func (f *Fuzz1179) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt64s(b[5:], l0)
	return nil
}

func (f *Fuzz1180) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteInt64s(b[9:], f.One)
	return
}

func (f *Fuzz1180) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz1181) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt64s(b[5:], f.One)
	return
}

func (f *Fuzz1181) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt64s(b[5:], l0)
	return nil
}

func (f *Fuzz1182) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1182) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1183) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteInt64s(b[9:], f.One)
	return
}

func (f *Fuzz1183) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz1184) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteInt64s(b[9:], f.One)
	return
}

func (f *Fuzz1184) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz1185) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteInt64s(b[9:], f.One)
	return
}

func (f *Fuzz1185) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz1186) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt64s(b[2:], f.One)
	return
}

func (f *Fuzz1186) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt64s(b[2:], l0)
	return nil
}

func (f *Fuzz1187) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteInt64s(b[3:], f.One)
	return
}

func (f *Fuzz1187) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadInt64s(b[3:], l0)
	return nil
}

func (f *Fuzz1188) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteInt64s(b[5:], f.One)
	return
}

func (f *Fuzz1188) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadInt64s(b[5:], l0)
	return nil
}

func (f *Fuzz1189) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteInt64s(b[9:], f.One)
	return
}

func (f *Fuzz1189) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadInt64s(b[9:], l0)
	return nil
}

func (f *Fuzz1190) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1190) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1191) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1191) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1192) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1192) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1193) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+8*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1193) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1194) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1194) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1195) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1195) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1196) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1196) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1197) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1197) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1198) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1198) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1199) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1199) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1200) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1200) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1201) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteInt64s(b[end:], f.One)
	return
}

func (f *Fuzz1201) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt64s(b[at:], l1)
	return nil
}

func (f *Fuzz1202) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1202) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1203) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1203) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1204) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1204) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1205) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1205) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1206) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1206) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1207) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1207) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1208) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteInt64s(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1208) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadInt64s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1209) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteInt32s(b[2:], f.One)
	return
}

func (f *Fuzz1209) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz1210) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt32s(b[2:], f.One)
	return
}

func (f *Fuzz1210) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz1211) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1211) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1212) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteInt32s(b[17:], f.One)
	return
}

func (f *Fuzz1212) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadInt32s(b[17:], l0)
	return nil
}

func (f *Fuzz1213) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteInt32s(b[5:], f.One)
	return
}

func (f *Fuzz1213) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz1214) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1214) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1215) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1215) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1216) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteInt32s(b[2:], f.One)
	return
}

func (f *Fuzz1216) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz1217) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteInt32s(b[3:], f.One)
	return
}

func (f *Fuzz1217) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadInt32s(b[3:], l0)
	return nil
}

func (f *Fuzz1218) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt32s(b[5:], f.One)
	return
}

func (f *Fuzz1218) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz1219) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1219) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1220) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteInt32s(b[5:], f.One)
	return
}

func (f *Fuzz1220) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz1221) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1221) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1222) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1222) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1223) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1223) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1224) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1224) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1225) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteInt32s(b[2:], f.One)
	return
}

func (f *Fuzz1225) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadInt32s(b[2:], l0)
	return nil
}

func (f *Fuzz1226) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteInt32s(b[3:], f.One)
	return
}

func (f *Fuzz1226) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadInt32s(b[3:], l0)
	return nil
}

func (f *Fuzz1227) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteInt32s(b[5:], f.One)
	return
}

func (f *Fuzz1227) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadInt32s(b[5:], l0)
	return nil
}

func (f *Fuzz1228) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteInt32s(b[9:], f.One)
	return
}

func (f *Fuzz1228) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadInt32s(b[9:], l0)
	return nil
}

func (f *Fuzz1229) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1229) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1230) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1230) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1231) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1231) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1232) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1232) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1233) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1233) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1234) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1234) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1235) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1235) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1236) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1236) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1237) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1237) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1238) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1238) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1239) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1239) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1240) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+4*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteInt32s(b[end:], f.One)
	return
}

func (f *Fuzz1240) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadInt32s(b[at:], l1)
	return nil
}

func (f *Fuzz1241) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1241) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1242) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1242) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1243) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1243) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1244) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1244) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1245) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1245) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1246) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1246) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1247) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteInt32s(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1247) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadInt32s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1248) MarshalJ() (b []byte) {
	b = make([]byte, 2+jay.SizeStrings8(f.One))
	b[1] = jay.Bool1(f.Two)
	jay.WriteStrings8(b[2:], b[:1], f.One)
	return
}

func (f *Fuzz1248) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	return jay.ReadStrings8Err(b[2:], &f.One, b[0])
}

func (f *Fuzz1249) MarshalJ() (b []byte) {
	b = make([]byte, 2+jay.SizeStrings8(f.One))
	b[1] = f.Two
	jay.WriteStrings8(b[2:], b[:1], f.One)
	return
}

func (f *Fuzz1249) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	return jay.ReadStrings8Err(b[2:], &f.One, b[0])
}

func (f *Fuzz1250) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.One))
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteStrings8(b[9:], b[:1], f.One)
	return
}

func (f *Fuzz1250) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	return nil
}

func (f *Fuzz1251) MarshalJ() (b []byte) {
	b = make([]byte, 17+jay.SizeStrings8(f.One))
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteStrings8(b[17:], b[:1], f.One)
	return
}

func (f *Fuzz1251) UnmarshalJ(b []byte) error {
	if len(b) < 17 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[17:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	return nil
}

func (f *Fuzz1252) MarshalJ() (b []byte) {
	b = make([]byte, 5+jay.SizeStrings8(f.One))
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteStrings8(b[5:], b[:1], f.One)
	return
}

func (f *Fuzz1252) UnmarshalJ(b []byte) error {
	if len(b) < 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	return jay.ReadStrings8Err(b[5:], &f.One, b[0])
}

func (f *Fuzz1253) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.One))
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteStrings8(b[9:], b[:1], f.One)
	return
}

func (f *Fuzz1253) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	return nil
}

func (f *Fuzz1254) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.One))
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteStrings8(b[9:], b[:1], f.One)
	return
}

func (f *Fuzz1254) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	return nil
}

func (f *Fuzz1255) MarshalJ() (b []byte) {
	b = make([]byte, 2+jay.SizeStrings8(f.One))
	b[1] = byte(f.Two)
	jay.WriteStrings8(b[2:], b[:1], f.One)
	return
}

func (f *Fuzz1255) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	return jay.ReadStrings8Err(b[2:], &f.One, b[0])
}

func (f *Fuzz1256) MarshalJ() (b []byte) {
	b = make([]byte, 3+jay.SizeStrings8(f.One))
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteStrings8(b[3:], b[:1], f.One)
	return
}

func (f *Fuzz1256) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	return jay.ReadStrings8Err(b[3:], &f.One, b[0])
}

func (f *Fuzz1257) MarshalJ() (b []byte) {
	b = make([]byte, 5+jay.SizeStrings8(f.One))
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteStrings8(b[5:], b[:1], f.One)
	return
}

func (f *Fuzz1257) UnmarshalJ(b []byte) error {
	if len(b) < 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	return jay.ReadStrings8Err(b[5:], &f.One, b[0])
}

func (f *Fuzz1258) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.One))
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteStrings8(b[9:], b[:1], f.One)
	return
}

func (f *Fuzz1258) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	return nil
}

func (f *Fuzz1259) MarshalJ() (b []byte) {
	b = make([]byte, 5+jay.SizeStrings8(f.One))
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteStrings8(b[5:], b[:1], f.One)
	return
}

func (f *Fuzz1259) UnmarshalJ(b []byte) error {
	if len(b) < 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	return jay.ReadStrings8Err(b[5:], &f.One, b[0])
}

func (f *Fuzz1260) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1260) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = string(b[at:])
	return nil
}

func (f *Fuzz1261) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.One))
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteStrings8(b[9:], b[:1], f.One)
	return
}

func (f *Fuzz1261) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	return nil
}

func (f *Fuzz1262) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.One))
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteStrings8(b[9:], b[:1], f.One)
	return
}

func (f *Fuzz1262) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	return nil
}

func (f *Fuzz1263) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.One))
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteStrings8(b[9:], b[:1], f.One)
	return
}

func (f *Fuzz1263) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	return nil
}

func (f *Fuzz1264) MarshalJ() (b []byte) {
	b = make([]byte, 2+jay.SizeStrings8(f.One))
	b[1] = f.Two
	jay.WriteStrings8(b[2:], b[:1], f.One)
	return
}

func (f *Fuzz1264) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	return jay.ReadStrings8Err(b[2:], &f.One, b[0])
}

func (f *Fuzz1265) MarshalJ() (b []byte) {
	b = make([]byte, 3+jay.SizeStrings8(f.One))
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteStrings8(b[3:], b[:1], f.One)
	return
}

func (f *Fuzz1265) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	return jay.ReadStrings8Err(b[3:], &f.One, b[0])
}

func (f *Fuzz1266) MarshalJ() (b []byte) {
	b = make([]byte, 5+jay.SizeStrings8(f.One))
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteStrings8(b[5:], b[:1], f.One)
	return
}

func (f *Fuzz1266) UnmarshalJ(b []byte) error {
	if len(b) < 5 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	return jay.ReadStrings8Err(b[5:], &f.One, b[0])
}

func (f *Fuzz1267) MarshalJ() (b []byte) {
	b = make([]byte, 9+jay.SizeStrings8(f.One))
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteStrings8(b[9:], b[:1], f.One)
	return
}

func (f *Fuzz1267) UnmarshalJ(b []byte) error {
	if len(b) < 9 {
		return jay.ErrUnexpectedEOB
	}
	if !jay.ReadStrings8Ok(b[9:], &f.One, b[0]) {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	return nil
}

func (f *Fuzz1268) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+l0+jay.SizeBools(l1))
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1268) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 || l < 2+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBools8(b[at:], b[1])
	return nil
}

func (f *Fuzz1269) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1269) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	if l1 != 0 {
		f.Two = b[at:]
	}
	return nil
}

func (f *Fuzz1270) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1270) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64s(b[at:], l1)
	return nil
}

func (f *Fuzz1271) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1271) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+16*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128s(b[at:], l1)
	return nil
}

func (f *Fuzz1272) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1272) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32s(b[at:], l1)
	return nil
}

func (f *Fuzz1273) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1273) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64s(b[at:], l1)
	return nil
}

func (f *Fuzz1274) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1274) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntsX64(b[at:], l1)
	return nil
}

func (f *Fuzz1275) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1275) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt8s(b[at:], l1)
	return nil
}

func (f *Fuzz1276) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1276) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16s(b[at:], l1)
	return nil
}

func (f *Fuzz1277) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1277) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32s(b[at:], l1)
	return nil
}

func (f *Fuzz1278) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1278) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64s(b[at:], l1)
	return nil
}

func (f *Fuzz1279) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1279) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32s(b[at:], l1)
	return nil
}

func (f *Fuzz1280) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1280) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadDurations(b[at:], l1)
	return nil
}

func (f *Fuzz1281) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1281) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTimes(b[at:], l1)
	return nil
}

func (f *Fuzz1282) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1282) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintsX64(b[at:], l1)
	return nil
}

func (f *Fuzz1283) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1283) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	if l1 != 0 {
		f.Two = b[at:]
	}
	return nil
}

func (f *Fuzz1284) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1284) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16s(b[at:], l1)
	return nil
}

func (f *Fuzz1285) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1285) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32s(b[at:], l1)
	return nil
}

func (f *Fuzz1286) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1286) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.One, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64s(b[at:], l1)
	return nil
}

func (f *Fuzz1287) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteDurations(b[2:], f.One)
	return
}

func (f *Fuzz1287) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadDurations(b[2:], l0)
	return nil
}

func (f *Fuzz1288) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteDurations(b[2:], f.One)
	return
}

func (f *Fuzz1288) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadDurations(b[2:], l0)
	return nil
}

func (f *Fuzz1289) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteDurations(b[9:], f.One)
	return
}

func (f *Fuzz1289) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz1290) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteDurations(b[17:], f.One)
	return
}

func (f *Fuzz1290) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadDurations(b[17:], l0)
	return nil
}

func (f *Fuzz1291) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteDurations(b[5:], f.One)
	return
}

func (f *Fuzz1291) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadDurations(b[5:], l0)
	return nil
}

func (f *Fuzz1292) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteDurations(b[9:], f.One)
	return
}

func (f *Fuzz1292) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz1293) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteDurations(b[9:], f.One)
	return
}

func (f *Fuzz1293) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz1294) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteDurations(b[2:], f.One)
	return
}

func (f *Fuzz1294) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadDurations(b[2:], l0)
	return nil
}

func (f *Fuzz1295) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteDurations(b[3:], f.One)
	return
}

func (f *Fuzz1295) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadDurations(b[3:], l0)
	return nil
}

func (f *Fuzz1296) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteDurations(b[5:], f.One)
	return
}

func (f *Fuzz1296) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadDurations(b[5:], l0)
	return nil
}

func (f *Fuzz1297) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteDurations(b[9:], f.One)
	return
}

func (f *Fuzz1297) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz1298) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteDurations(b[5:], f.One)
	return
}

func (f *Fuzz1298) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadDurations(b[5:], l0)
	return nil
}

func (f *Fuzz1299) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1299) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1300) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteDurations(b[9:], f.One)
	return
}

func (f *Fuzz1300) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz1301) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteDurations(b[9:], f.One)
	return
}

func (f *Fuzz1301) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz1302) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteDurations(b[9:], f.One)
	return
}

func (f *Fuzz1302) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz1303) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteDurations(b[2:], f.One)
	return
}

func (f *Fuzz1303) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadDurations(b[2:], l0)
	return nil
}

func (f *Fuzz1304) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteDurations(b[3:], f.One)
	return
}

func (f *Fuzz1304) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadDurations(b[3:], l0)
	return nil
}

func (f *Fuzz1305) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteDurations(b[5:], f.One)
	return
}

func (f *Fuzz1305) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadDurations(b[5:], l0)
	return nil
}

func (f *Fuzz1306) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteDurations(b[9:], f.One)
	return
}

func (f *Fuzz1306) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadDurations(b[9:], l0)
	return nil
}

func (f *Fuzz1307) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1307) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1308) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1308) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1309) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1309) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1310) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+8*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1310) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1311) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1311) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1312) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1312) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1313) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1313) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1314) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1314) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1315) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1315) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1316) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1316) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1317) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1317) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1318) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1318) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1319) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteDurations(b[end:], f.One)
	return
}

func (f *Fuzz1319) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadDurations(b[at:], l1)
	return nil
}

func (f *Fuzz1320) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1320) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1321) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1321) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1322) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1322) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1323) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1323) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1324) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1324) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1325) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteDurations(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1325) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadDurations(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1326) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteTimes(b[2:], f.One)
	return
}

func (f *Fuzz1326) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadTimes(b[2:], l0)
	return nil
}

func (f *Fuzz1327) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteTimes(b[2:], f.One)
	return
}

func (f *Fuzz1327) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadTimes(b[2:], l0)
	return nil
}

func (f *Fuzz1328) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteTimes(b[9:], f.One)
	return
}

func (f *Fuzz1328) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz1329) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteTimes(b[17:], f.One)
	return
}

func (f *Fuzz1329) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadTimes(b[17:], l0)
	return nil
}

func (f *Fuzz1330) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteTimes(b[5:], f.One)
	return
}

func (f *Fuzz1330) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadTimes(b[5:], l0)
	return nil
}

func (f *Fuzz1331) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteTimes(b[9:], f.One)
	return
}

func (f *Fuzz1331) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz1332) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteTimes(b[9:], f.One)
	return
}

func (f *Fuzz1332) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz1333) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteTimes(b[2:], f.One)
	return
}

func (f *Fuzz1333) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadTimes(b[2:], l0)
	return nil
}

func (f *Fuzz1334) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteTimes(b[3:], f.One)
	return
}

func (f *Fuzz1334) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadTimes(b[3:], l0)
	return nil
}

func (f *Fuzz1335) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteTimes(b[5:], f.One)
	return
}

func (f *Fuzz1335) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadTimes(b[5:], l0)
	return nil
}

func (f *Fuzz1336) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteTimes(b[9:], f.One)
	return
}

func (f *Fuzz1336) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz1337) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteTimes(b[5:], f.One)
	return
}

func (f *Fuzz1337) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadTimes(b[5:], l0)
	return nil
}

func (f *Fuzz1338) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1338) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1339) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteTimes(b[9:], f.One)
	return
}

func (f *Fuzz1339) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz1340) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteTimes(b[9:], f.One)
	return
}

func (f *Fuzz1340) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz1341) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteTimes(b[9:], f.One)
	return
}

func (f *Fuzz1341) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz1342) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteTimes(b[2:], f.One)
	return
}

func (f *Fuzz1342) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadTimes(b[2:], l0)
	return nil
}

func (f *Fuzz1343) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteTimes(b[3:], f.One)
	return
}

func (f *Fuzz1343) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadTimes(b[3:], l0)
	return nil
}

func (f *Fuzz1344) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteTimes(b[5:], f.One)
	return
}

func (f *Fuzz1344) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadTimes(b[5:], l0)
	return nil
}

func (f *Fuzz1345) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteTimes(b[9:], f.One)
	return
}

func (f *Fuzz1345) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadTimes(b[9:], l0)
	return nil
}

func (f *Fuzz1346) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1346) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1347) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1347) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1348) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1348) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1349) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+8*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1349) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1350) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1350) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1351) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1351) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1352) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1352) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1353) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1353) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1354) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1354) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1355) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1355) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1356) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1356) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1357) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1357) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1358) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteTimes(b[end:], f.One)
	return
}

func (f *Fuzz1358) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadTimes(b[at:], l1)
	return nil
}

func (f *Fuzz1359) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1359) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1360) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1360) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1361) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1361) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1362) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1362) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1363) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1363) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1364) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteTimes(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1364) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadTimes(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1365) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteUintsX64(b[2:], f.One)
	return
}

func (f *Fuzz1365) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadUintsX64(b[2:], l0)
	return nil
}

func (f *Fuzz1366) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteUintsX64(b[2:], f.One)
	return
}

func (f *Fuzz1366) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadUintsX64(b[2:], l0)
	return nil
}

func (f *Fuzz1367) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteUintsX64(b[9:], f.One)
	return
}

func (f *Fuzz1367) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1368) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteUintsX64(b[17:], f.One)
	return
}

func (f *Fuzz1368) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadUintsX64(b[17:], l0)
	return nil
}

func (f *Fuzz1369) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteUintsX64(b[5:], f.One)
	return
}

func (f *Fuzz1369) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadUintsX64(b[5:], l0)
	return nil
}

func (f *Fuzz1370) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteUintsX64(b[9:], f.One)
	return
}

func (f *Fuzz1370) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1371) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteUintsX64(b[9:], f.One)
	return
}

func (f *Fuzz1371) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1372) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteUintsX64(b[2:], f.One)
	return
}

func (f *Fuzz1372) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadUintsX64(b[2:], l0)
	return nil
}

func (f *Fuzz1373) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteUintsX64(b[3:], f.One)
	return
}

func (f *Fuzz1373) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadUintsX64(b[3:], l0)
	return nil
}

func (f *Fuzz1374) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteUintsX64(b[5:], f.One)
	return
}

func (f *Fuzz1374) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadUintsX64(b[5:], l0)
	return nil
}

func (f *Fuzz1375) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteUintsX64(b[9:], f.One)
	return
}

func (f *Fuzz1375) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1376) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteUintsX64(b[5:], f.One)
	return
}

func (f *Fuzz1376) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadUintsX64(b[5:], l0)
	return nil
}

func (f *Fuzz1377) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1377) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1378) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteUintsX64(b[9:], f.One)
	return
}

func (f *Fuzz1378) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1379) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteUintsX64(b[9:], f.One)
	return
}

func (f *Fuzz1379) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1380) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteUintsX64(b[9:], f.One)
	return
}

func (f *Fuzz1380) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1381) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteUintsX64(b[2:], f.One)
	return
}

func (f *Fuzz1381) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadUintsX64(b[2:], l0)
	return nil
}

func (f *Fuzz1382) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteUintsX64(b[3:], f.One)
	return
}

func (f *Fuzz1382) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadUintsX64(b[3:], l0)
	return nil
}

func (f *Fuzz1383) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteUintsX64(b[5:], f.One)
	return
}

func (f *Fuzz1383) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadUintsX64(b[5:], l0)
	return nil
}

func (f *Fuzz1384) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteUintsX64(b[9:], f.One)
	return
}

func (f *Fuzz1384) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadUintsX64(b[9:], l0)
	return nil
}

func (f *Fuzz1385) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1385) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1386) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1386) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1387) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1387) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1388) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+8*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1388) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1389) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1389) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1390) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1390) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1391) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1391) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1392) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1392) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1393) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1393) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1394) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1394) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1395) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1395) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1396) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1396) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1397) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteUintsX64(b[end:], f.One)
	return
}

func (f *Fuzz1397) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUintsX64(b[at:], l1)
	return nil
}

func (f *Fuzz1398) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1398) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1399) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1399) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1400) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1400) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1401) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1401) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1402) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1402) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1403) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUintsX64(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1403) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUintsX64(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1404) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	if l0 != 0 {
		copy(b[2:], f.One)
	}
	return
}

func (f *Fuzz1404) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	if l0 != 0 {
		f.One = b[2:]
	}
	return nil
}

func (f *Fuzz1405) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.Two
	if l0 != 0 {
		copy(b[2:], f.One)
	}
	return
}

func (f *Fuzz1405) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	if l0 != 0 {
		f.One = b[2:]
	}
	return nil
}

func (f *Fuzz1406) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz1406) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz1407) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	if l0 != 0 {
		copy(b[17:], f.One)
	}
	return
}

func (f *Fuzz1407) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	if l0 != 0 {
		f.One = b[17:]
	}
	return nil
}

func (f *Fuzz1408) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	if l0 != 0 {
		copy(b[5:], f.One)
	}
	return
}

func (f *Fuzz1408) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	if l0 != 0 {
		f.One = b[5:]
	}
	return nil
}

func (f *Fuzz1409) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz1409) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz1410) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz1410) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz1411) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	if l0 != 0 {
		copy(b[2:], f.One)
	}
	return
}

func (f *Fuzz1411) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	if l0 != 0 {
		f.One = b[2:]
	}
	return nil
}

func (f *Fuzz1412) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	if l0 != 0 {
		copy(b[3:], f.One)
	}
	return
}

func (f *Fuzz1412) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	if l0 != 0 {
		f.One = b[3:]
	}
	return nil
}

func (f *Fuzz1413) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	if l0 != 0 {
		copy(b[5:], f.One)
	}
	return
}

func (f *Fuzz1413) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	if l0 != 0 {
		f.One = b[5:]
	}
	return nil
}

func (f *Fuzz1414) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz1414) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz1415) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	if l0 != 0 {
		copy(b[5:], f.One)
	}
	return
}

func (f *Fuzz1415) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	if l0 != 0 {
		f.One = b[5:]
	}
	return nil
}

func (f *Fuzz1416) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1416) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1417) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz1417) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz1418) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz1418) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz1419) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz1419) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz1420) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = f.Two
	if l0 != 0 {
		copy(b[2:], f.One)
	}
	return
}

func (f *Fuzz1420) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	if l0 != 0 {
		f.One = b[2:]
	}
	return nil
}

func (f *Fuzz1421) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	if l0 != 0 {
		copy(b[3:], f.One)
	}
	return
}

func (f *Fuzz1421) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	if l0 != 0 {
		f.One = b[3:]
	}
	return nil
}

func (f *Fuzz1422) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	if l0 != 0 {
		copy(b[5:], f.One)
	}
	return
}

func (f *Fuzz1422) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	if l0 != 0 {
		f.One = b[5:]
	}
	return nil
}

func (f *Fuzz1423) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	if l0 != 0 {
		copy(b[9:], f.One)
	}
	return
}

func (f *Fuzz1423) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	if l0 != 0 {
		f.One = b[9:]
	}
	return nil
}

func (f *Fuzz1424) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1424) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1425) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1425) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1426) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1426) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1427) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1427) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1428) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1428) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1429) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1429) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1430) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1430) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1431) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1431) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1432) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1432) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1433) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1433) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1434) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1434) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1435) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1435) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1436) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+l0+l1)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	if l1 != 0 {
		copy(b[end:], f.One)
	}
	return
}

func (f *Fuzz1436) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	if l1 != 0 {
		f.One = b[at:]
	}
	return nil
}

func (f *Fuzz1437) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1437) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1438) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1438) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1439) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1439) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1440) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1440) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1441) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1441) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1442) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0
	if l0 != 0 {
		copy(b[at:end], f.One)
	}
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1442) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0
	if l0 != 0 {
		f.One = b[at:end]
	}
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1443) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteUint16s(b[2:], f.One, l0)
	return
}

func (f *Fuzz1443) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadUint16s(b[2:], l0)
	return nil
}

func (f *Fuzz1444) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteUint16s(b[2:], f.One, l0)
	return
}

func (f *Fuzz1444) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadUint16s(b[2:], l0)
	return nil
}

func (f *Fuzz1445) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteUint16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1445) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz1446) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+2*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteUint16s(b[17:], f.One, l0)
	return
}

func (f *Fuzz1446) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadUint16s(b[17:], l0)
	return nil
}

func (f *Fuzz1447) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteUint16s(b[5:], f.One, l0)
	return
}

func (f *Fuzz1447) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadUint16s(b[5:], l0)
	return nil
}

func (f *Fuzz1448) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteUint16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1448) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz1449) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteUint16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1449) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz1450) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteUint16s(b[2:], f.One, l0)
	return
}

func (f *Fuzz1450) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadUint16s(b[2:], l0)
	return nil
}

func (f *Fuzz1451) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+2*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteUint16s(b[3:], f.One, l0)
	return
}

func (f *Fuzz1451) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadUint16s(b[3:], l0)
	return nil
}

func (f *Fuzz1452) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteUint16s(b[5:], f.One, l0)
	return
}

func (f *Fuzz1452) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadUint16s(b[5:], l0)
	return nil
}

func (f *Fuzz1453) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteUint16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1453) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz1454) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteUint16s(b[5:], f.One, l0)
	return
}

func (f *Fuzz1454) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadUint16s(b[5:], l0)
	return nil
}

func (f *Fuzz1455) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1455) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1456) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteUint16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1456) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz1457) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteUint16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1457) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz1458) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteUint16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1458) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz1459) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+2*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteUint16s(b[2:], f.One, l0)
	return
}

func (f *Fuzz1459) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadUint16s(b[2:], l0)
	return nil
}

func (f *Fuzz1460) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+2*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteUint16s(b[3:], f.One, l0)
	return
}

func (f *Fuzz1460) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadUint16s(b[3:], l0)
	return nil
}

func (f *Fuzz1461) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+2*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteUint16s(b[5:], f.One, l0)
	return
}

func (f *Fuzz1461) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadUint16s(b[5:], l0)
	return nil
}

func (f *Fuzz1462) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+2*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteUint16s(b[9:], f.One, l0)
	return
}

func (f *Fuzz1462) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadUint16s(b[9:], l0)
	return nil
}

func (f *Fuzz1463) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1463) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+2*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1464) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1464) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1465) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1465) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1466) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1466) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1467) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1467) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1468) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1468) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1469) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1469) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1470) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1470) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1471) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1471) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1472) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1472) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1473) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1473) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1474) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1474) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1475) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+2*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteUint16s(b[end:], f.One, l1)
	return
}

func (f *Fuzz1475) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint16s(b[at:], l1)
	return nil
}

func (f *Fuzz1476) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1476) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1477) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1477) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1478) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1478) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1479) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+2*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1479) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+2*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1480) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1480) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}

func (f *Fuzz1481) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+2*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*2
	jay.WriteUint16s(b[at:end], f.One, l0)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1481) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+2*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*2
	f.One = jay.ReadUint16s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1482) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteUint32s(b[2:], f.One)
	return
}

func (f *Fuzz1482) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadUint32s(b[2:], l0)
	return nil
}

func (f *Fuzz1483) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteUint32s(b[2:], f.One)
	return
}

func (f *Fuzz1483) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadUint32s(b[2:], l0)
	return nil
}

func (f *Fuzz1484) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteUint32s(b[9:], f.One)
	return
}

func (f *Fuzz1484) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz1485) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+4*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteUint32s(b[17:], f.One)
	return
}

func (f *Fuzz1485) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadUint32s(b[17:], l0)
	return nil
}

func (f *Fuzz1486) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteUint32s(b[5:], f.One)
	return
}

func (f *Fuzz1486) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadUint32s(b[5:], l0)
	return nil
}

func (f *Fuzz1487) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteUint32s(b[9:], f.One)
	return
}

func (f *Fuzz1487) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz1488) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteUint32s(b[9:], f.One)
	return
}

func (f *Fuzz1488) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz1489) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteUint32s(b[2:], f.One)
	return
}

func (f *Fuzz1489) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadUint32s(b[2:], l0)
	return nil
}

func (f *Fuzz1490) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteUint32s(b[3:], f.One)
	return
}

func (f *Fuzz1490) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadUint32s(b[3:], l0)
	return nil
}

func (f *Fuzz1491) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteUint32s(b[5:], f.One)
	return
}

func (f *Fuzz1491) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadUint32s(b[5:], l0)
	return nil
}

func (f *Fuzz1492) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteUint32s(b[9:], f.One)
	return
}

func (f *Fuzz1492) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz1493) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteUint32s(b[5:], f.One)
	return
}

func (f *Fuzz1493) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadUint32s(b[5:], l0)
	return nil
}

func (f *Fuzz1494) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1494) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1495) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteUint32s(b[9:], f.One)
	return
}

func (f *Fuzz1495) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz1496) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteUint32s(b[9:], f.One)
	return
}

func (f *Fuzz1496) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz1497) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteUint32s(b[9:], f.One)
	return
}

func (f *Fuzz1497) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz1498) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+4*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteUint32s(b[2:], f.One)
	return
}

func (f *Fuzz1498) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadUint32s(b[2:], l0)
	return nil
}

func (f *Fuzz1499) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+4*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteUint32s(b[3:], f.One)
	return
}

func (f *Fuzz1499) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadUint32s(b[3:], l0)
	return nil
}

func (f *Fuzz1500) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+4*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteUint32s(b[5:], f.One)
	return
}

func (f *Fuzz1500) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadUint32s(b[5:], l0)
	return nil
}

func (f *Fuzz1501) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+4*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteUint32s(b[9:], f.One)
	return
}

func (f *Fuzz1501) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadUint32s(b[9:], l0)
	return nil
}

func (f *Fuzz1502) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1502) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+4*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1503) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1503) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1504) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1504) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1505) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1505) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1506) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1506) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1507) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1507) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1508) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1508) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1509) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1509) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1510) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1510) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1511) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1511) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1512) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1512) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1513) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1513) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1514) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+4*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteUint32s(b[end:], f.One)
	return
}

func (f *Fuzz1514) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint32s(b[at:], l1)
	return nil
}

func (f *Fuzz1515) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1515) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1516) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1516) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1517) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1517) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1518) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1518) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1519) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+4*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1519) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+4*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1520) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l1+4*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*4
	jay.WriteUint32s(b[at:end], f.One)
	jay.WriteUint64s(b[end:], f.Two)
	return
}

func (f *Fuzz1520) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l1+4*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*4
	f.One = jay.ReadUint32s(b[at:end], l0)
	f.Two = jay.ReadUint64s(b[end:], l1)
	return nil
}

func (f *Fuzz1521) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = jay.Bool1(f.Two)
	jay.WriteUint64s(b[2:], f.One)
	return
}

func (f *Fuzz1521) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadBool1(b[1])
	f.One = jay.ReadUint64s(b[2:], l0)
	return nil
}

func (f *Fuzz1522) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteUint64s(b[2:], f.One)
	return
}

func (f *Fuzz1522) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadUint64s(b[2:], l0)
	return nil
}

func (f *Fuzz1523) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex64(b[1:9], f.Two)
	jay.WriteUint64s(b[9:], f.One)
	return
}

func (f *Fuzz1523) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex64(b[1:9])
	f.One = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz1524) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 17+8*l0)
	b[0] = byte(l0)
	jay.WriteComplex128(b[1:17], f.Two)
	jay.WriteUint64s(b[17:], f.One)
	return
}

func (f *Fuzz1524) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 17 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 17+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadComplex128(b[1:17])
	f.One = jay.ReadUint64s(b[17:], l0)
	return nil
}

func (f *Fuzz1525) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat32(b[1:5], f.Two)
	jay.WriteUint64s(b[5:], f.One)
	return
}

func (f *Fuzz1525) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat32(b[1:5])
	f.One = jay.ReadUint64s(b[5:], l0)
	return nil
}

func (f *Fuzz1526) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteFloat64(b[1:9], f.Two)
	jay.WriteUint64s(b[9:], f.One)
	return
}

func (f *Fuzz1526) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadFloat64(b[1:9])
	f.One = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz1527) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteIntX64(b[1:9], f.Two)
	jay.WriteUint64s(b[9:], f.One)
	return
}

func (f *Fuzz1527) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadIntX64(b[1:9])
	f.One = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz1528) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = byte(f.Two)
	jay.WriteUint64s(b[2:], f.One)
	return
}

func (f *Fuzz1528) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = int8(b[1])
	f.One = jay.ReadUint64s(b[2:], l0)
	return nil
}

func (f *Fuzz1529) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteInt16(b[1:3], f.Two)
	jay.WriteUint64s(b[3:], f.One)
	return
}

func (f *Fuzz1529) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt16(b[1:3])
	f.One = jay.ReadUint64s(b[3:], l0)
	return nil
}

func (f *Fuzz1530) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteUint64s(b[5:], f.One)
	return
}

func (f *Fuzz1530) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadUint64s(b[5:], l0)
	return nil
}

func (f *Fuzz1531) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], f.Two)
	jay.WriteUint64s(b[9:], f.One)
	return
}

func (f *Fuzz1531) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt64(b[1:9])
	f.One = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz1532) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteInt32(b[1:5], f.Two)
	jay.WriteUint64s(b[5:], f.One)
	return
}

func (f *Fuzz1532) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadInt32(b[1:5])
	f.One = jay.ReadUint64s(b[5:], l0)
	return nil
}

func (f *Fuzz1533) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	copy(b[end:], f.Two)
	return
}

func (f *Fuzz1533) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = string(b[end:])
	return nil
}

func (f *Fuzz1534) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteInt64(b[1:9], int64(f.Two))
	jay.WriteUint64s(b[9:], f.One)
	return
}

func (f *Fuzz1534) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = time.Duration(jay.ReadInt64(b[1:9]))
	f.One = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz1535) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteTime(b[1:9], f.Two)
	jay.WriteUint64s(b[9:], f.One)
	return
}

func (f *Fuzz1535) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadTime(b[1:9])
	f.One = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz1536) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUintX64(b[1:9], f.Two)
	jay.WriteUint64s(b[9:], f.One)
	return
}

func (f *Fuzz1536) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUintX64(b[1:9])
	f.One = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz1537) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 2+8*l0)
	b[0] = byte(l0)
	b[1] = f.Two
	jay.WriteUint64s(b[2:], f.One)
	return
}

func (f *Fuzz1537) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = b[1]
	f.One = jay.ReadUint64s(b[2:], l0)
	return nil
}

func (f *Fuzz1538) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 3+8*l0)
	b[0] = byte(l0)
	jay.WriteUint16(b[1:3], f.Two)
	jay.WriteUint64s(b[3:], f.One)
	return
}

func (f *Fuzz1538) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 3+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint16(b[1:3])
	f.One = jay.ReadUint64s(b[3:], l0)
	return nil
}

func (f *Fuzz1539) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 5+8*l0)
	b[0] = byte(l0)
	jay.WriteUint32(b[1:5], f.Two)
	jay.WriteUint64s(b[5:], f.One)
	return
}

func (f *Fuzz1539) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 5 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 5+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint32(b[1:5])
	f.One = jay.ReadUint64s(b[5:], l0)
	return nil
}

func (f *Fuzz1540) MarshalJ() (b []byte) {
	l0 := len(f.One)
	b = make([]byte, 9+8*l0)
	b[0] = byte(l0)
	jay.WriteUint64(b[1:9], f.Two)
	jay.WriteUint64s(b[9:], f.One)
	return
}

func (f *Fuzz1540) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 9 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 9+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	f.Two = jay.ReadUint64(b[1:9])
	f.One = jay.ReadUint64s(b[9:], l0)
	return nil
}

func (f *Fuzz1541) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+jay.SizeBools(l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteBools(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1541) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l != 2+8*l0+jay.SizeBools8(b[1]) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadBools8(b[end:], b[1])
	return nil
}

func (f *Fuzz1542) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1542) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1543) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteComplex64s(b[end:], f.Two)
	return
}

func (f *Fuzz1543) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadComplex64s(b[end:], l1)
	return nil
}

func (f *Fuzz1544) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+16*l1+8*l0)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteComplex128s(b[end:], f.Two)
	return
}

func (f *Fuzz1544) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+16*l1+8*l0 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadComplex128s(b[end:], l1)
	return nil
}

func (f *Fuzz1545) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteFloat32s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1545) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadFloat32s(b[end:], l1)
	return nil
}

func (f *Fuzz1546) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteFloat64s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1546) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadFloat64s(b[end:], l1)
	return nil
}

func (f *Fuzz1547) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteIntsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1547) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadIntsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1548) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteInt8s(b[end:], f.Two)
	return
}

func (f *Fuzz1548) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadInt8s(b[end:], l1)
	return nil
}

func (f *Fuzz1549) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteInt16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1549) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadInt16s(b[end:], l1)
	return nil
}

func (f *Fuzz1550) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1550) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1551) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteInt64s(b[end:], f.Two)
	return
}

func (f *Fuzz1551) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadInt64s(b[end:], l1)
	return nil
}

func (f *Fuzz1552) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteInt32s(b[end:], f.Two)
	return
}

func (f *Fuzz1552) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadInt32s(b[end:], l1)
	return nil
}

func (f *Fuzz1553) MarshalJ() (b []byte) {
	l0, l1 := jay.SizeStrings8(f.Two), len(f.One)
	b = make([]byte, 2+8*l1+l0)
	b[1] = byte(l1)
	at, end := 2, 2+l0
	jay.WriteStrings8(b[at:end], b[:1], f.Two)
	jay.WriteUint64s(b[end:], f.One)
	return
}

func (f *Fuzz1553) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l1 := int(b[1])
	if l < 2+8*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, ok := jay.ReadStrings8nbXt(b[2:], &f.Two, b[0], 2)
	if !ok {
		return jay.ErrUnexpectedEOB
	}
	f.One = jay.ReadUint64s(b[at:], l1)
	return nil
}

func (f *Fuzz1554) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteDurations(b[end:], f.Two)
	return
}

func (f *Fuzz1554) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadDurations(b[end:], l1)
	return nil
}

func (f *Fuzz1555) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteTimes(b[end:], f.Two)
	return
}

func (f *Fuzz1555) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadTimes(b[end:], l1)
	return nil
}

func (f *Fuzz1556) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*(l0+l1))
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteUintsX64(b[end:], f.Two)
	return
}

func (f *Fuzz1556) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*(l0+l1) {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadUintsX64(b[end:], l1)
	return nil
}

func (f *Fuzz1557) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	if l1 != 0 {
		copy(b[end:], f.Two)
	}
	return
}

func (f *Fuzz1557) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	if l1 != 0 {
		f.Two = b[end:]
	}
	return nil
}

func (f *Fuzz1558) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+2*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteUint16s(b[end:], f.Two, l1)
	return
}

func (f *Fuzz1558) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+2*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadUint16s(b[end:], l1)
	return nil
}

func (f *Fuzz1559) MarshalJ() (b []byte) {
	l0, l1 := len(f.One), len(f.Two)
	b = make([]byte, 2+8*l0+4*l1)
	b[0], b[1] = byte(l0), byte(l1)
	at, end := 2, 2+l0*8
	jay.WriteUint64s(b[at:end], f.One)
	jay.WriteUint32s(b[end:], f.Two)
	return
}

func (f *Fuzz1559) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l != 2+8*l0+4*l1 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 2, 2+l0*8
	f.One = jay.ReadUint64s(b[at:end], l0)
	f.Two = jay.ReadUint32s(b[end:], l1)
	return nil
}
