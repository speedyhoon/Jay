package main

import (
	"bytes"
	"fmt"
	"os"
	"github.com/speedyhoon/rando/types"
)

func main() {
	pkg := bytes.NewBufferString(`// Code generated by gen.go; DO NOT EDIT.

package main

import "time"
`)
	jayTest := bytes.NewBufferString(`// Code generated by gen.go; DO NOT EDIT.

package main

import (
	"testing"

	"github.com/speedyhoon/rando"
	"github.com/stretchr/testify/require"
)
`)

	var i uint
	for _, a := range types.SupportedList() {
		for _, b := range types.SupportedList() {
			if a == b {
				// Identical field types are already covered in other test directories.
				continue
			}

			_, _ = fmt.Fprintf(pkg, `
type Fuzz%d struct {
	One %s
	Two %s
}
`, i, a, b)
			_, _ = fmt.Fprintf(jayTest, `
func TestFuzz%[1]d(t *testing.T) {
	var expected, actual Fuzz%[1]d
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz%[1]d{}, expected)
	require.Equal(t, Fuzz%[1]d{}, actual)

	actual = Fuzz%[1]d{
		One: %[2]s,
		Two: %[3]s,
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}
`, i, types.TypeRandomFunc(a), types.TypeRandomFunc(b))
			i++
		}
	}

	const perm = 0666
	err := os.WriteFile("pkg.go", pkg.Bytes(), perm)
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("jay_test.go", jayTest.Bytes(), perm)
	if err != nil {
		panic(err)
	}
}
