// Code generated by gen.go; DO NOT EDIT.

package main

import (
	"testing"

	"github.com/speedyhoon/rando"
	"github.com/stretchr/testify/require"
)

func TestFuzz0(t *testing.T) {
	var expected, actual Fuzz0
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz0{}, expected)
	require.Equal(t, Fuzz0{}, actual)

	actual = Fuzz0{
		One: rando.Bool(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1(t *testing.T) {
	var expected, actual Fuzz1
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1{}, expected)
	require.Equal(t, Fuzz1{}, actual)

	actual = Fuzz1{
		One: rando.Bool(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz2(t *testing.T) {
	var expected, actual Fuzz2
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz2{}, expected)
	require.Equal(t, Fuzz2{}, actual)

	actual = Fuzz2{
		One: rando.Bool(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz3(t *testing.T) {
	var expected, actual Fuzz3
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz3{}, expected)
	require.Equal(t, Fuzz3{}, actual)

	actual = Fuzz3{
		One: rando.Bool(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz4(t *testing.T) {
	var expected, actual Fuzz4
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz4{}, expected)
	require.Equal(t, Fuzz4{}, actual)

	actual = Fuzz4{
		One: rando.Bool(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz5(t *testing.T) {
	var expected, actual Fuzz5
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz5{}, expected)
	require.Equal(t, Fuzz5{}, actual)

	actual = Fuzz5{
		One: rando.Bool(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz6(t *testing.T) {
	var expected, actual Fuzz6
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz6{}, expected)
	require.Equal(t, Fuzz6{}, actual)

	actual = Fuzz6{
		One: rando.Bool(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz7(t *testing.T) {
	var expected, actual Fuzz7
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz7{}, expected)
	require.Equal(t, Fuzz7{}, actual)

	actual = Fuzz7{
		One: rando.Bool(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz8(t *testing.T) {
	var expected, actual Fuzz8
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz8{}, expected)
	require.Equal(t, Fuzz8{}, actual)

	actual = Fuzz8{
		One: rando.Bool(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz9(t *testing.T) {
	var expected, actual Fuzz9
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz9{}, expected)
	require.Equal(t, Fuzz9{}, actual)

	actual = Fuzz9{
		One: rando.Bool(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz10(t *testing.T) {
	var expected, actual Fuzz10
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz10{}, expected)
	require.Equal(t, Fuzz10{}, actual)

	actual = Fuzz10{
		One: rando.Bool(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz11(t *testing.T) {
	var expected, actual Fuzz11
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz11{}, expected)
	require.Equal(t, Fuzz11{}, actual)

	actual = Fuzz11{
		One: rando.Bool(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz12(t *testing.T) {
	var expected, actual Fuzz12
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz12{}, expected)
	require.Equal(t, Fuzz12{}, actual)

	actual = Fuzz12{
		One: rando.Bool(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz13(t *testing.T) {
	var expected, actual Fuzz13
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz13{}, expected)
	require.Equal(t, Fuzz13{}, actual)

	actual = Fuzz13{
		One: rando.Bool(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz14(t *testing.T) {
	var expected, actual Fuzz14
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz14{}, expected)
	require.Equal(t, Fuzz14{}, actual)

	actual = Fuzz14{
		One: rando.Bool(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz15(t *testing.T) {
	var expected, actual Fuzz15
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz15{}, expected)
	require.Equal(t, Fuzz15{}, actual)

	actual = Fuzz15{
		One: rando.Bool(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz16(t *testing.T) {
	var expected, actual Fuzz16
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz16{}, expected)
	require.Equal(t, Fuzz16{}, actual)

	actual = Fuzz16{
		One: rando.Bool(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz17(t *testing.T) {
	var expected, actual Fuzz17
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz17{}, expected)
	require.Equal(t, Fuzz17{}, actual)

	actual = Fuzz17{
		One: rando.Bool(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz18(t *testing.T) {
	var expected, actual Fuzz18
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz18{}, expected)
	require.Equal(t, Fuzz18{}, actual)

	actual = Fuzz18{
		One: rando.Bool(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz19(t *testing.T) {
	var expected, actual Fuzz19
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz19{}, expected)
	require.Equal(t, Fuzz19{}, actual)

	actual = Fuzz19{
		One: rando.Bool(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz20(t *testing.T) {
	var expected, actual Fuzz20
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz20{}, expected)
	require.Equal(t, Fuzz20{}, actual)

	actual = Fuzz20{
		One: rando.Bool(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz21(t *testing.T) {
	var expected, actual Fuzz21
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz21{}, expected)
	require.Equal(t, Fuzz21{}, actual)

	actual = Fuzz21{
		One: rando.Bool(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz22(t *testing.T) {
	var expected, actual Fuzz22
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz22{}, expected)
	require.Equal(t, Fuzz22{}, actual)

	actual = Fuzz22{
		One: rando.Bool(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz23(t *testing.T) {
	var expected, actual Fuzz23
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz23{}, expected)
	require.Equal(t, Fuzz23{}, actual)

	actual = Fuzz23{
		One: rando.Bool(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz24(t *testing.T) {
	var expected, actual Fuzz24
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz24{}, expected)
	require.Equal(t, Fuzz24{}, actual)

	actual = Fuzz24{
		One: rando.Bool(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz25(t *testing.T) {
	var expected, actual Fuzz25
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz25{}, expected)
	require.Equal(t, Fuzz25{}, actual)

	actual = Fuzz25{
		One: rando.Bool(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz26(t *testing.T) {
	var expected, actual Fuzz26
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz26{}, expected)
	require.Equal(t, Fuzz26{}, actual)

	actual = Fuzz26{
		One: rando.Bool(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz27(t *testing.T) {
	var expected, actual Fuzz27
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz27{}, expected)
	require.Equal(t, Fuzz27{}, actual)

	actual = Fuzz27{
		One: rando.Bool(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz28(t *testing.T) {
	var expected, actual Fuzz28
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz28{}, expected)
	require.Equal(t, Fuzz28{}, actual)

	actual = Fuzz28{
		One: rando.Bool(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz29(t *testing.T) {
	var expected, actual Fuzz29
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz29{}, expected)
	require.Equal(t, Fuzz29{}, actual)

	actual = Fuzz29{
		One: rando.Bool(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz30(t *testing.T) {
	var expected, actual Fuzz30
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz30{}, expected)
	require.Equal(t, Fuzz30{}, actual)

	actual = Fuzz30{
		One: rando.Bool(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz31(t *testing.T) {
	var expected, actual Fuzz31
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz31{}, expected)
	require.Equal(t, Fuzz31{}, actual)

	actual = Fuzz31{
		One: rando.Bool(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz32(t *testing.T) {
	var expected, actual Fuzz32
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz32{}, expected)
	require.Equal(t, Fuzz32{}, actual)

	actual = Fuzz32{
		One: rando.Bools(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz33(t *testing.T) {
	var expected, actual Fuzz33
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz33{}, expected)
	require.Equal(t, Fuzz33{}, actual)

	actual = Fuzz33{
		One: rando.Bools(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz34(t *testing.T) {
	var expected, actual Fuzz34
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz34{}, expected)
	require.Equal(t, Fuzz34{}, actual)

	actual = Fuzz34{
		One: rando.Bools(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz35(t *testing.T) {
	var expected, actual Fuzz35
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz35{}, expected)
	require.Equal(t, Fuzz35{}, actual)

	actual = Fuzz35{
		One: rando.Bools(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz36(t *testing.T) {
	var expected, actual Fuzz36
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz36{}, expected)
	require.Equal(t, Fuzz36{}, actual)

	actual = Fuzz36{
		One: rando.Bools(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz37(t *testing.T) {
	var expected, actual Fuzz37
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz37{}, expected)
	require.Equal(t, Fuzz37{}, actual)

	actual = Fuzz37{
		One: rando.Bools(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz38(t *testing.T) {
	var expected, actual Fuzz38
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz38{}, expected)
	require.Equal(t, Fuzz38{}, actual)

	actual = Fuzz38{
		One: rando.Bools(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz39(t *testing.T) {
	var expected, actual Fuzz39
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz39{}, expected)
	require.Equal(t, Fuzz39{}, actual)

	actual = Fuzz39{
		One: rando.Bools(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz40(t *testing.T) {
	var expected, actual Fuzz40
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz40{}, expected)
	require.Equal(t, Fuzz40{}, actual)

	actual = Fuzz40{
		One: rando.Bools(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz41(t *testing.T) {
	var expected, actual Fuzz41
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz41{}, expected)
	require.Equal(t, Fuzz41{}, actual)

	actual = Fuzz41{
		One: rando.Bools(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz42(t *testing.T) {
	var expected, actual Fuzz42
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz42{}, expected)
	require.Equal(t, Fuzz42{}, actual)

	actual = Fuzz42{
		One: rando.Bools(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz43(t *testing.T) {
	var expected, actual Fuzz43
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz43{}, expected)
	require.Equal(t, Fuzz43{}, actual)

	actual = Fuzz43{
		One: rando.Bools(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz44(t *testing.T) {
	var expected, actual Fuzz44
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz44{}, expected)
	require.Equal(t, Fuzz44{}, actual)

	actual = Fuzz44{
		One: rando.Bools(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz45(t *testing.T) {
	var expected, actual Fuzz45
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz45{}, expected)
	require.Equal(t, Fuzz45{}, actual)

	actual = Fuzz45{
		One: rando.Bools(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz46(t *testing.T) {
	var expected, actual Fuzz46
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz46{}, expected)
	require.Equal(t, Fuzz46{}, actual)

	actual = Fuzz46{
		One: rando.Bools(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz47(t *testing.T) {
	var expected, actual Fuzz47
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz47{}, expected)
	require.Equal(t, Fuzz47{}, actual)

	actual = Fuzz47{
		One: rando.Bools(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz48(t *testing.T) {
	var expected, actual Fuzz48
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz48{}, expected)
	require.Equal(t, Fuzz48{}, actual)

	actual = Fuzz48{
		One: rando.Bools(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz49(t *testing.T) {
	var expected, actual Fuzz49
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz49{}, expected)
	require.Equal(t, Fuzz49{}, actual)

	actual = Fuzz49{
		One: rando.Bools(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz50(t *testing.T) {
	var expected, actual Fuzz50
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz50{}, expected)
	require.Equal(t, Fuzz50{}, actual)

	actual = Fuzz50{
		One: rando.Bools(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz51(t *testing.T) {
	var expected, actual Fuzz51
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz51{}, expected)
	require.Equal(t, Fuzz51{}, actual)

	actual = Fuzz51{
		One: rando.Bools(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz52(t *testing.T) {
	var expected, actual Fuzz52
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz52{}, expected)
	require.Equal(t, Fuzz52{}, actual)

	actual = Fuzz52{
		One: rando.Bools(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz53(t *testing.T) {
	var expected, actual Fuzz53
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz53{}, expected)
	require.Equal(t, Fuzz53{}, actual)

	actual = Fuzz53{
		One: rando.Bools(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz54(t *testing.T) {
	var expected, actual Fuzz54
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz54{}, expected)
	require.Equal(t, Fuzz54{}, actual)

	actual = Fuzz54{
		One: rando.Bools(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz55(t *testing.T) {
	var expected, actual Fuzz55
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz55{}, expected)
	require.Equal(t, Fuzz55{}, actual)

	actual = Fuzz55{
		One: rando.Bools(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz56(t *testing.T) {
	var expected, actual Fuzz56
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz56{}, expected)
	require.Equal(t, Fuzz56{}, actual)

	actual = Fuzz56{
		One: rando.Bools(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz57(t *testing.T) {
	var expected, actual Fuzz57
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz57{}, expected)
	require.Equal(t, Fuzz57{}, actual)

	actual = Fuzz57{
		One: rando.Bools(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz58(t *testing.T) {
	var expected, actual Fuzz58
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz58{}, expected)
	require.Equal(t, Fuzz58{}, actual)

	actual = Fuzz58{
		One: rando.Bools(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz59(t *testing.T) {
	var expected, actual Fuzz59
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz59{}, expected)
	require.Equal(t, Fuzz59{}, actual)

	actual = Fuzz59{
		One: rando.Bools(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz60(t *testing.T) {
	var expected, actual Fuzz60
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz60{}, expected)
	require.Equal(t, Fuzz60{}, actual)

	actual = Fuzz60{
		One: rando.Bools(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz61(t *testing.T) {
	var expected, actual Fuzz61
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz61{}, expected)
	require.Equal(t, Fuzz61{}, actual)

	actual = Fuzz61{
		One: rando.Bools(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz62(t *testing.T) {
	var expected, actual Fuzz62
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz62{}, expected)
	require.Equal(t, Fuzz62{}, actual)

	actual = Fuzz62{
		One: rando.Bools(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz63(t *testing.T) {
	var expected, actual Fuzz63
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz63{}, expected)
	require.Equal(t, Fuzz63{}, actual)

	actual = Fuzz63{
		One: rando.Bools(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

/*
func TestFuzz64(t *testing.T) {
	var expected, actual Fuzz64
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz64{}, expected)
	require.Equal(t, Fuzz64{}, actual)

	actual = Fuzz64{
		One: rando.Byte(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz65(t *testing.T) {
	var expected, actual Fuzz65
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz65{}, expected)
	require.Equal(t, Fuzz65{}, actual)

	actual = Fuzz65{
		One: rando.Byte(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz66(t *testing.T) {
	var expected, actual Fuzz66
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz66{}, expected)
	require.Equal(t, Fuzz66{}, actual)

	actual = Fuzz66{
		One: rando.Byte(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz67(t *testing.T) {
	var expected, actual Fuzz67
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz67{}, expected)
	require.Equal(t, Fuzz67{}, actual)

	actual = Fuzz67{
		One: rando.Byte(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz68(t *testing.T) {
	var expected, actual Fuzz68
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz68{}, expected)
	require.Equal(t, Fuzz68{}, actual)

	actual = Fuzz68{
		One: rando.Byte(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz69(t *testing.T) {
	var expected, actual Fuzz69
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz69{}, expected)
	require.Equal(t, Fuzz69{}, actual)

	actual = Fuzz69{
		One: rando.Byte(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz70(t *testing.T) {
	var expected, actual Fuzz70
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz70{}, expected)
	require.Equal(t, Fuzz70{}, actual)

	actual = Fuzz70{
		One: rando.Byte(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz71(t *testing.T) {
	var expected, actual Fuzz71
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz71{}, expected)
	require.Equal(t, Fuzz71{}, actual)

	actual = Fuzz71{
		One: rando.Byte(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz72(t *testing.T) {
	var expected, actual Fuzz72
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz72{}, expected)
	require.Equal(t, Fuzz72{}, actual)

	actual = Fuzz72{
		One: rando.Byte(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz73(t *testing.T) {
	var expected, actual Fuzz73
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz73{}, expected)
	require.Equal(t, Fuzz73{}, actual)

	actual = Fuzz73{
		One: rando.Byte(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz74(t *testing.T) {
	var expected, actual Fuzz74
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz74{}, expected)
	require.Equal(t, Fuzz74{}, actual)

	actual = Fuzz74{
		One: rando.Byte(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz75(t *testing.T) {
	var expected, actual Fuzz75
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz75{}, expected)
	require.Equal(t, Fuzz75{}, actual)

	actual = Fuzz75{
		One: rando.Byte(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz76(t *testing.T) {
	var expected, actual Fuzz76
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz76{}, expected)
	require.Equal(t, Fuzz76{}, actual)

	actual = Fuzz76{
		One: rando.Byte(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz77(t *testing.T) {
	var expected, actual Fuzz77
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz77{}, expected)
	require.Equal(t, Fuzz77{}, actual)

	actual = Fuzz77{
		One: rando.Byte(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz78(t *testing.T) {
	var expected, actual Fuzz78
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz78{}, expected)
	require.Equal(t, Fuzz78{}, actual)

	actual = Fuzz78{
		One: rando.Byte(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz79(t *testing.T) {
	var expected, actual Fuzz79
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz79{}, expected)
	require.Equal(t, Fuzz79{}, actual)

	actual = Fuzz79{
		One: rando.Byte(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz80(t *testing.T) {
	var expected, actual Fuzz80
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz80{}, expected)
	require.Equal(t, Fuzz80{}, actual)

	actual = Fuzz80{
		One: rando.Byte(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz81(t *testing.T) {
	var expected, actual Fuzz81
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz81{}, expected)
	require.Equal(t, Fuzz81{}, actual)

	actual = Fuzz81{
		One: rando.Byte(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz82(t *testing.T) {
	var expected, actual Fuzz82
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz82{}, expected)
	require.Equal(t, Fuzz82{}, actual)

	actual = Fuzz82{
		One: rando.Byte(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz83(t *testing.T) {
	var expected, actual Fuzz83
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz83{}, expected)
	require.Equal(t, Fuzz83{}, actual)

	actual = Fuzz83{
		One: rando.Byte(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz84(t *testing.T) {
	var expected, actual Fuzz84
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz84{}, expected)
	require.Equal(t, Fuzz84{}, actual)

	actual = Fuzz84{
		One: rando.Byte(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz85(t *testing.T) {
	var expected, actual Fuzz85
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz85{}, expected)
	require.Equal(t, Fuzz85{}, actual)

	actual = Fuzz85{
		One: rando.Byte(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz86(t *testing.T) {
	var expected, actual Fuzz86
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz86{}, expected)
	require.Equal(t, Fuzz86{}, actual)

	actual = Fuzz86{
		One: rando.Byte(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz87(t *testing.T) {
	var expected, actual Fuzz87
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz87{}, expected)
	require.Equal(t, Fuzz87{}, actual)

	actual = Fuzz87{
		One: rando.Byte(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz88(t *testing.T) {
	var expected, actual Fuzz88
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz88{}, expected)
	require.Equal(t, Fuzz88{}, actual)

	actual = Fuzz88{
		One: rando.Byte(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz89(t *testing.T) {
	var expected, actual Fuzz89
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz89{}, expected)
	require.Equal(t, Fuzz89{}, actual)

	actual = Fuzz89{
		One: rando.Byte(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz90(t *testing.T) {
	var expected, actual Fuzz90
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz90{}, expected)
	require.Equal(t, Fuzz90{}, actual)

	actual = Fuzz90{
		One: rando.Byte(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz91(t *testing.T) {
	var expected, actual Fuzz91
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz91{}, expected)
	require.Equal(t, Fuzz91{}, actual)

	actual = Fuzz91{
		One: rando.Byte(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz92(t *testing.T) {
	var expected, actual Fuzz92
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz92{}, expected)
	require.Equal(t, Fuzz92{}, actual)

	actual = Fuzz92{
		One: rando.Byte(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz93(t *testing.T) {
	var expected, actual Fuzz93
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz93{}, expected)
	require.Equal(t, Fuzz93{}, actual)

	actual = Fuzz93{
		One: rando.Byte(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz94(t *testing.T) {
	var expected, actual Fuzz94
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz94{}, expected)
	require.Equal(t, Fuzz94{}, actual)

	actual = Fuzz94{
		One: rando.Byte(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz95(t *testing.T) {
	var expected, actual Fuzz95
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz95{}, expected)
	require.Equal(t, Fuzz95{}, actual)

	actual = Fuzz95{
		One: rando.Byte(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz96(t *testing.T) {
	var expected, actual Fuzz96
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz96{}, expected)
	require.Equal(t, Fuzz96{}, actual)

	actual = Fuzz96{
		One: rando.Bytes(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz97(t *testing.T) {
	var expected, actual Fuzz97
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz97{}, expected)
	require.Equal(t, Fuzz97{}, actual)

	actual = Fuzz97{
		One: rando.Bytes(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz98(t *testing.T) {
	var expected, actual Fuzz98
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz98{}, expected)
	require.Equal(t, Fuzz98{}, actual)

	actual = Fuzz98{
		One: rando.Bytes(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz99(t *testing.T) {
	var expected, actual Fuzz99
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz99{}, expected)
	require.Equal(t, Fuzz99{}, actual)

	actual = Fuzz99{
		One: rando.Bytes(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz100(t *testing.T) {
	var expected, actual Fuzz100
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz100{}, expected)
	require.Equal(t, Fuzz100{}, actual)

	actual = Fuzz100{
		One: rando.Bytes(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz101(t *testing.T) {
	var expected, actual Fuzz101
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz101{}, expected)
	require.Equal(t, Fuzz101{}, actual)

	actual = Fuzz101{
		One: rando.Bytes(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz102(t *testing.T) {
	var expected, actual Fuzz102
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz102{}, expected)
	require.Equal(t, Fuzz102{}, actual)

	actual = Fuzz102{
		One: rando.Bytes(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz103(t *testing.T) {
	var expected, actual Fuzz103
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz103{}, expected)
	require.Equal(t, Fuzz103{}, actual)

	actual = Fuzz103{
		One: rando.Bytes(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz104(t *testing.T) {
	var expected, actual Fuzz104
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz104{}, expected)
	require.Equal(t, Fuzz104{}, actual)

	actual = Fuzz104{
		One: rando.Bytes(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz105(t *testing.T) {
	var expected, actual Fuzz105
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz105{}, expected)
	require.Equal(t, Fuzz105{}, actual)

	actual = Fuzz105{
		One: rando.Bytes(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz106(t *testing.T) {
	var expected, actual Fuzz106
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz106{}, expected)
	require.Equal(t, Fuzz106{}, actual)

	actual = Fuzz106{
		One: rando.Bytes(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz107(t *testing.T) {
	var expected, actual Fuzz107
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz107{}, expected)
	require.Equal(t, Fuzz107{}, actual)

	actual = Fuzz107{
		One: rando.Bytes(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz108(t *testing.T) {
	var expected, actual Fuzz108
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz108{}, expected)
	require.Equal(t, Fuzz108{}, actual)

	actual = Fuzz108{
		One: rando.Bytes(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz109(t *testing.T) {
	var expected, actual Fuzz109
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz109{}, expected)
	require.Equal(t, Fuzz109{}, actual)

	actual = Fuzz109{
		One: rando.Bytes(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz110(t *testing.T) {
	var expected, actual Fuzz110
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz110{}, expected)
	require.Equal(t, Fuzz110{}, actual)

	actual = Fuzz110{
		One: rando.Bytes(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz111(t *testing.T) {
	var expected, actual Fuzz111
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz111{}, expected)
	require.Equal(t, Fuzz111{}, actual)

	actual = Fuzz111{
		One: rando.Bytes(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz112(t *testing.T) {
	var expected, actual Fuzz112
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz112{}, expected)
	require.Equal(t, Fuzz112{}, actual)

	actual = Fuzz112{
		One: rando.Bytes(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz113(t *testing.T) {
	var expected, actual Fuzz113
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz113{}, expected)
	require.Equal(t, Fuzz113{}, actual)

	actual = Fuzz113{
		One: rando.Bytes(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz114(t *testing.T) {
	var expected, actual Fuzz114
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz114{}, expected)
	require.Equal(t, Fuzz114{}, actual)

	actual = Fuzz114{
		One: rando.Bytes(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz115(t *testing.T) {
	var expected, actual Fuzz115
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz115{}, expected)
	require.Equal(t, Fuzz115{}, actual)

	actual = Fuzz115{
		One: rando.Bytes(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz116(t *testing.T) {
	var expected, actual Fuzz116
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz116{}, expected)
	require.Equal(t, Fuzz116{}, actual)

	actual = Fuzz116{
		One: rando.Bytes(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz117(t *testing.T) {
	var expected, actual Fuzz117
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz117{}, expected)
	require.Equal(t, Fuzz117{}, actual)

	actual = Fuzz117{
		One: rando.Bytes(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz118(t *testing.T) {
	var expected, actual Fuzz118
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz118{}, expected)
	require.Equal(t, Fuzz118{}, actual)

	actual = Fuzz118{
		One: rando.Bytes(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz119(t *testing.T) {
	var expected, actual Fuzz119
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz119{}, expected)
	require.Equal(t, Fuzz119{}, actual)

	actual = Fuzz119{
		One: rando.Bytes(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz120(t *testing.T) {
	var expected, actual Fuzz120
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz120{}, expected)
	require.Equal(t, Fuzz120{}, actual)

	actual = Fuzz120{
		One: rando.Bytes(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz121(t *testing.T) {
	var expected, actual Fuzz121
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz121{}, expected)
	require.Equal(t, Fuzz121{}, actual)

	actual = Fuzz121{
		One: rando.Bytes(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz122(t *testing.T) {
	var expected, actual Fuzz122
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz122{}, expected)
	require.Equal(t, Fuzz122{}, actual)

	actual = Fuzz122{
		One: rando.Bytes(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz123(t *testing.T) {
	var expected, actual Fuzz123
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz123{}, expected)
	require.Equal(t, Fuzz123{}, actual)

	actual = Fuzz123{
		One: rando.Bytes(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz124(t *testing.T) {
	var expected, actual Fuzz124
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz124{}, expected)
	require.Equal(t, Fuzz124{}, actual)

	actual = Fuzz124{
		One: rando.Bytes(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz125(t *testing.T) {
	var expected, actual Fuzz125
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz125{}, expected)
	require.Equal(t, Fuzz125{}, actual)

	actual = Fuzz125{
		One: rando.Bytes(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz126(t *testing.T) {
	var expected, actual Fuzz126
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz126{}, expected)
	require.Equal(t, Fuzz126{}, actual)

	actual = Fuzz126{
		One: rando.Bytes(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz127(t *testing.T) {
	var expected, actual Fuzz127
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz127{}, expected)
	require.Equal(t, Fuzz127{}, actual)

	actual = Fuzz127{
		One: rando.Bytes(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz128(t *testing.T) {
	var expected, actual Fuzz128
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz128{}, expected)
	require.Equal(t, Fuzz128{}, actual)

	actual = Fuzz128{
		One: rando.Float32(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz129(t *testing.T) {
	var expected, actual Fuzz129
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz129{}, expected)
	require.Equal(t, Fuzz129{}, actual)

	actual = Fuzz129{
		One: rando.Float32(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz130(t *testing.T) {
	var expected, actual Fuzz130
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz130{}, expected)
	require.Equal(t, Fuzz130{}, actual)

	actual = Fuzz130{
		One: rando.Float32(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz131(t *testing.T) {
	var expected, actual Fuzz131
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz131{}, expected)
	require.Equal(t, Fuzz131{}, actual)

	actual = Fuzz131{
		One: rando.Float32(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz132(t *testing.T) {
	var expected, actual Fuzz132
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz132{}, expected)
	require.Equal(t, Fuzz132{}, actual)

	actual = Fuzz132{
		One: rando.Float32(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz133(t *testing.T) {
	var expected, actual Fuzz133
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz133{}, expected)
	require.Equal(t, Fuzz133{}, actual)

	actual = Fuzz133{
		One: rando.Float32(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz134(t *testing.T) {
	var expected, actual Fuzz134
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz134{}, expected)
	require.Equal(t, Fuzz134{}, actual)

	actual = Fuzz134{
		One: rando.Float32(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz135(t *testing.T) {
	var expected, actual Fuzz135
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz135{}, expected)
	require.Equal(t, Fuzz135{}, actual)

	actual = Fuzz135{
		One: rando.Float32(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz136(t *testing.T) {
	var expected, actual Fuzz136
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz136{}, expected)
	require.Equal(t, Fuzz136{}, actual)

	actual = Fuzz136{
		One: rando.Float32(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz137(t *testing.T) {
	var expected, actual Fuzz137
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz137{}, expected)
	require.Equal(t, Fuzz137{}, actual)

	actual = Fuzz137{
		One: rando.Float32(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz138(t *testing.T) {
	var expected, actual Fuzz138
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz138{}, expected)
	require.Equal(t, Fuzz138{}, actual)

	actual = Fuzz138{
		One: rando.Float32(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz139(t *testing.T) {
	var expected, actual Fuzz139
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz139{}, expected)
	require.Equal(t, Fuzz139{}, actual)

	actual = Fuzz139{
		One: rando.Float32(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz140(t *testing.T) {
	var expected, actual Fuzz140
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz140{}, expected)
	require.Equal(t, Fuzz140{}, actual)

	actual = Fuzz140{
		One: rando.Float32(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz141(t *testing.T) {
	var expected, actual Fuzz141
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz141{}, expected)
	require.Equal(t, Fuzz141{}, actual)

	actual = Fuzz141{
		One: rando.Float32(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz142(t *testing.T) {
	var expected, actual Fuzz142
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz142{}, expected)
	require.Equal(t, Fuzz142{}, actual)

	actual = Fuzz142{
		One: rando.Float32(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz143(t *testing.T) {
	var expected, actual Fuzz143
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz143{}, expected)
	require.Equal(t, Fuzz143{}, actual)

	actual = Fuzz143{
		One: rando.Float32(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz144(t *testing.T) {
	var expected, actual Fuzz144
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz144{}, expected)
	require.Equal(t, Fuzz144{}, actual)

	actual = Fuzz144{
		One: rando.Float32(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz145(t *testing.T) {
	var expected, actual Fuzz145
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz145{}, expected)
	require.Equal(t, Fuzz145{}, actual)

	actual = Fuzz145{
		One: rando.Float32(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz146(t *testing.T) {
	var expected, actual Fuzz146
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz146{}, expected)
	require.Equal(t, Fuzz146{}, actual)

	actual = Fuzz146{
		One: rando.Float32(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz147(t *testing.T) {
	var expected, actual Fuzz147
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz147{}, expected)
	require.Equal(t, Fuzz147{}, actual)

	actual = Fuzz147{
		One: rando.Float32(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz148(t *testing.T) {
	var expected, actual Fuzz148
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz148{}, expected)
	require.Equal(t, Fuzz148{}, actual)

	actual = Fuzz148{
		One: rando.Float32(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz149(t *testing.T) {
	var expected, actual Fuzz149
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz149{}, expected)
	require.Equal(t, Fuzz149{}, actual)

	actual = Fuzz149{
		One: rando.Float32(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz150(t *testing.T) {
	var expected, actual Fuzz150
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz150{}, expected)
	require.Equal(t, Fuzz150{}, actual)

	actual = Fuzz150{
		One: rando.Float32(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz151(t *testing.T) {
	var expected, actual Fuzz151
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz151{}, expected)
	require.Equal(t, Fuzz151{}, actual)

	actual = Fuzz151{
		One: rando.Float32(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz152(t *testing.T) {
	var expected, actual Fuzz152
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz152{}, expected)
	require.Equal(t, Fuzz152{}, actual)

	actual = Fuzz152{
		One: rando.Float32(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz153(t *testing.T) {
	var expected, actual Fuzz153
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz153{}, expected)
	require.Equal(t, Fuzz153{}, actual)

	actual = Fuzz153{
		One: rando.Float32(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz154(t *testing.T) {
	var expected, actual Fuzz154
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz154{}, expected)
	require.Equal(t, Fuzz154{}, actual)

	actual = Fuzz154{
		One: rando.Float32(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz155(t *testing.T) {
	var expected, actual Fuzz155
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz155{}, expected)
	require.Equal(t, Fuzz155{}, actual)

	actual = Fuzz155{
		One: rando.Float32(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz156(t *testing.T) {
	var expected, actual Fuzz156
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz156{}, expected)
	require.Equal(t, Fuzz156{}, actual)

	actual = Fuzz156{
		One: rando.Float32(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz157(t *testing.T) {
	var expected, actual Fuzz157
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz157{}, expected)
	require.Equal(t, Fuzz157{}, actual)

	actual = Fuzz157{
		One: rando.Float32(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz158(t *testing.T) {
	var expected, actual Fuzz158
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz158{}, expected)
	require.Equal(t, Fuzz158{}, actual)

	actual = Fuzz158{
		One: rando.Float32(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz159(t *testing.T) {
	var expected, actual Fuzz159
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz159{}, expected)
	require.Equal(t, Fuzz159{}, actual)

	actual = Fuzz159{
		One: rando.Float32(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz160(t *testing.T) {
	var expected, actual Fuzz160
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz160{}, expected)
	require.Equal(t, Fuzz160{}, actual)

	actual = Fuzz160{
		One: rando.Float32s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz161(t *testing.T) {
	var expected, actual Fuzz161
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz161{}, expected)
	require.Equal(t, Fuzz161{}, actual)

	actual = Fuzz161{
		One: rando.Float32s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz162(t *testing.T) {
	var expected, actual Fuzz162
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz162{}, expected)
	require.Equal(t, Fuzz162{}, actual)

	actual = Fuzz162{
		One: rando.Float32s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz163(t *testing.T) {
	var expected, actual Fuzz163
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz163{}, expected)
	require.Equal(t, Fuzz163{}, actual)

	actual = Fuzz163{
		One: rando.Float32s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz164(t *testing.T) {
	var expected, actual Fuzz164
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz164{}, expected)
	require.Equal(t, Fuzz164{}, actual)

	actual = Fuzz164{
		One: rando.Float32s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz165(t *testing.T) {
	var expected, actual Fuzz165
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz165{}, expected)
	require.Equal(t, Fuzz165{}, actual)

	actual = Fuzz165{
		One: rando.Float32s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz166(t *testing.T) {
	var expected, actual Fuzz166
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz166{}, expected)
	require.Equal(t, Fuzz166{}, actual)

	actual = Fuzz166{
		One: rando.Float32s(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz167(t *testing.T) {
	var expected, actual Fuzz167
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz167{}, expected)
	require.Equal(t, Fuzz167{}, actual)

	actual = Fuzz167{
		One: rando.Float32s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz168(t *testing.T) {
	var expected, actual Fuzz168
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz168{}, expected)
	require.Equal(t, Fuzz168{}, actual)

	actual = Fuzz168{
		One: rando.Float32s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz169(t *testing.T) {
	var expected, actual Fuzz169
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz169{}, expected)
	require.Equal(t, Fuzz169{}, actual)

	actual = Fuzz169{
		One: rando.Float32s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz170(t *testing.T) {
	var expected, actual Fuzz170
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz170{}, expected)
	require.Equal(t, Fuzz170{}, actual)

	actual = Fuzz170{
		One: rando.Float32s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz171(t *testing.T) {
	var expected, actual Fuzz171
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz171{}, expected)
	require.Equal(t, Fuzz171{}, actual)

	actual = Fuzz171{
		One: rando.Float32s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz172(t *testing.T) {
	var expected, actual Fuzz172
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz172{}, expected)
	require.Equal(t, Fuzz172{}, actual)

	actual = Fuzz172{
		One: rando.Float32s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz173(t *testing.T) {
	var expected, actual Fuzz173
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz173{}, expected)
	require.Equal(t, Fuzz173{}, actual)

	actual = Fuzz173{
		One: rando.Float32s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz174(t *testing.T) {
	var expected, actual Fuzz174
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz174{}, expected)
	require.Equal(t, Fuzz174{}, actual)

	actual = Fuzz174{
		One: rando.Float32s(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz175(t *testing.T) {
	var expected, actual Fuzz175
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz175{}, expected)
	require.Equal(t, Fuzz175{}, actual)

	actual = Fuzz175{
		One: rando.Float32s(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz176(t *testing.T) {
	var expected, actual Fuzz176
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz176{}, expected)
	require.Equal(t, Fuzz176{}, actual)

	actual = Fuzz176{
		One: rando.Float32s(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz177(t *testing.T) {
	var expected, actual Fuzz177
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz177{}, expected)
	require.Equal(t, Fuzz177{}, actual)

	actual = Fuzz177{
		One: rando.Float32s(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz178(t *testing.T) {
	var expected, actual Fuzz178
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz178{}, expected)
	require.Equal(t, Fuzz178{}, actual)

	actual = Fuzz178{
		One: rando.Float32s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz179(t *testing.T) {
	var expected, actual Fuzz179
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz179{}, expected)
	require.Equal(t, Fuzz179{}, actual)

	actual = Fuzz179{
		One: rando.Float32s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz180(t *testing.T) {
	var expected, actual Fuzz180
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz180{}, expected)
	require.Equal(t, Fuzz180{}, actual)

	actual = Fuzz180{
		One: rando.Float32s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz181(t *testing.T) {
	var expected, actual Fuzz181
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz181{}, expected)
	require.Equal(t, Fuzz181{}, actual)

	actual = Fuzz181{
		One: rando.Float32s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz182(t *testing.T) {
	var expected, actual Fuzz182
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz182{}, expected)
	require.Equal(t, Fuzz182{}, actual)

	actual = Fuzz182{
		One: rando.Float32s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz183(t *testing.T) {
	var expected, actual Fuzz183
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz183{}, expected)
	require.Equal(t, Fuzz183{}, actual)

	actual = Fuzz183{
		One: rando.Float32s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz184(t *testing.T) {
	var expected, actual Fuzz184
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz184{}, expected)
	require.Equal(t, Fuzz184{}, actual)

	actual = Fuzz184{
		One: rando.Float32s(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz185(t *testing.T) {
	var expected, actual Fuzz185
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz185{}, expected)
	require.Equal(t, Fuzz185{}, actual)

	actual = Fuzz185{
		One: rando.Float32s(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz186(t *testing.T) {
	var expected, actual Fuzz186
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz186{}, expected)
	require.Equal(t, Fuzz186{}, actual)

	actual = Fuzz186{
		One: rando.Float32s(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz187(t *testing.T) {
	var expected, actual Fuzz187
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz187{}, expected)
	require.Equal(t, Fuzz187{}, actual)

	actual = Fuzz187{
		One: rando.Float32s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz188(t *testing.T) {
	var expected, actual Fuzz188
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz188{}, expected)
	require.Equal(t, Fuzz188{}, actual)

	actual = Fuzz188{
		One: rando.Float32s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz189(t *testing.T) {
	var expected, actual Fuzz189
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz189{}, expected)
	require.Equal(t, Fuzz189{}, actual)

	actual = Fuzz189{
		One: rando.Float32s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz190(t *testing.T) {
	var expected, actual Fuzz190
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz190{}, expected)
	require.Equal(t, Fuzz190{}, actual)

	actual = Fuzz190{
		One: rando.Float32s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz191(t *testing.T) {
	var expected, actual Fuzz191
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz191{}, expected)
	require.Equal(t, Fuzz191{}, actual)

	actual = Fuzz191{
		One: rando.Float32s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz192(t *testing.T) {
	var expected, actual Fuzz192
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz192{}, expected)
	require.Equal(t, Fuzz192{}, actual)

	actual = Fuzz192{
		One: rando.Float64(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz193(t *testing.T) {
	var expected, actual Fuzz193
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz193{}, expected)
	require.Equal(t, Fuzz193{}, actual)

	actual = Fuzz193{
		One: rando.Float64(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz194(t *testing.T) {
	var expected, actual Fuzz194
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz194{}, expected)
	require.Equal(t, Fuzz194{}, actual)

	actual = Fuzz194{
		One: rando.Float64(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz195(t *testing.T) {
	var expected, actual Fuzz195
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz195{}, expected)
	require.Equal(t, Fuzz195{}, actual)

	actual = Fuzz195{
		One: rando.Float64(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz196(t *testing.T) {
	var expected, actual Fuzz196
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz196{}, expected)
	require.Equal(t, Fuzz196{}, actual)

	actual = Fuzz196{
		One: rando.Float64(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz197(t *testing.T) {
	var expected, actual Fuzz197
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz197{}, expected)
	require.Equal(t, Fuzz197{}, actual)

	actual = Fuzz197{
		One: rando.Float64(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz198(t *testing.T) {
	var expected, actual Fuzz198
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz198{}, expected)
	require.Equal(t, Fuzz198{}, actual)

	actual = Fuzz198{
		One: rando.Float64(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz199(t *testing.T) {
	var expected, actual Fuzz199
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz199{}, expected)
	require.Equal(t, Fuzz199{}, actual)

	actual = Fuzz199{
		One: rando.Float64(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz200(t *testing.T) {
	var expected, actual Fuzz200
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz200{}, expected)
	require.Equal(t, Fuzz200{}, actual)

	actual = Fuzz200{
		One: rando.Float64(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz201(t *testing.T) {
	var expected, actual Fuzz201
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz201{}, expected)
	require.Equal(t, Fuzz201{}, actual)

	actual = Fuzz201{
		One: rando.Float64(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz202(t *testing.T) {
	var expected, actual Fuzz202
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz202{}, expected)
	require.Equal(t, Fuzz202{}, actual)

	actual = Fuzz202{
		One: rando.Float64(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz203(t *testing.T) {
	var expected, actual Fuzz203
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz203{}, expected)
	require.Equal(t, Fuzz203{}, actual)

	actual = Fuzz203{
		One: rando.Float64(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz204(t *testing.T) {
	var expected, actual Fuzz204
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz204{}, expected)
	require.Equal(t, Fuzz204{}, actual)

	actual = Fuzz204{
		One: rando.Float64(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz205(t *testing.T) {
	var expected, actual Fuzz205
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz205{}, expected)
	require.Equal(t, Fuzz205{}, actual)

	actual = Fuzz205{
		One: rando.Float64(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz206(t *testing.T) {
	var expected, actual Fuzz206
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz206{}, expected)
	require.Equal(t, Fuzz206{}, actual)

	actual = Fuzz206{
		One: rando.Float64(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz207(t *testing.T) {
	var expected, actual Fuzz207
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz207{}, expected)
	require.Equal(t, Fuzz207{}, actual)

	actual = Fuzz207{
		One: rando.Float64(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz208(t *testing.T) {
	var expected, actual Fuzz208
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz208{}, expected)
	require.Equal(t, Fuzz208{}, actual)

	actual = Fuzz208{
		One: rando.Float64(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz209(t *testing.T) {
	var expected, actual Fuzz209
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz209{}, expected)
	require.Equal(t, Fuzz209{}, actual)

	actual = Fuzz209{
		One: rando.Float64(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz210(t *testing.T) {
	var expected, actual Fuzz210
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz210{}, expected)
	require.Equal(t, Fuzz210{}, actual)

	actual = Fuzz210{
		One: rando.Float64(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz211(t *testing.T) {
	var expected, actual Fuzz211
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz211{}, expected)
	require.Equal(t, Fuzz211{}, actual)

	actual = Fuzz211{
		One: rando.Float64(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz212(t *testing.T) {
	var expected, actual Fuzz212
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz212{}, expected)
	require.Equal(t, Fuzz212{}, actual)

	actual = Fuzz212{
		One: rando.Float64(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz213(t *testing.T) {
	var expected, actual Fuzz213
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz213{}, expected)
	require.Equal(t, Fuzz213{}, actual)

	actual = Fuzz213{
		One: rando.Float64(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz214(t *testing.T) {
	var expected, actual Fuzz214
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz214{}, expected)
	require.Equal(t, Fuzz214{}, actual)

	actual = Fuzz214{
		One: rando.Float64(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz215(t *testing.T) {
	var expected, actual Fuzz215
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz215{}, expected)
	require.Equal(t, Fuzz215{}, actual)

	actual = Fuzz215{
		One: rando.Float64(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz216(t *testing.T) {
	var expected, actual Fuzz216
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz216{}, expected)
	require.Equal(t, Fuzz216{}, actual)

	actual = Fuzz216{
		One: rando.Float64(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz217(t *testing.T) {
	var expected, actual Fuzz217
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz217{}, expected)
	require.Equal(t, Fuzz217{}, actual)

	actual = Fuzz217{
		One: rando.Float64(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz218(t *testing.T) {
	var expected, actual Fuzz218
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz218{}, expected)
	require.Equal(t, Fuzz218{}, actual)

	actual = Fuzz218{
		One: rando.Float64(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz219(t *testing.T) {
	var expected, actual Fuzz219
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz219{}, expected)
	require.Equal(t, Fuzz219{}, actual)

	actual = Fuzz219{
		One: rando.Float64(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz220(t *testing.T) {
	var expected, actual Fuzz220
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz220{}, expected)
	require.Equal(t, Fuzz220{}, actual)

	actual = Fuzz220{
		One: rando.Float64(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz221(t *testing.T) {
	var expected, actual Fuzz221
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz221{}, expected)
	require.Equal(t, Fuzz221{}, actual)

	actual = Fuzz221{
		One: rando.Float64(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz222(t *testing.T) {
	var expected, actual Fuzz222
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz222{}, expected)
	require.Equal(t, Fuzz222{}, actual)

	actual = Fuzz222{
		One: rando.Float64(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz223(t *testing.T) {
	var expected, actual Fuzz223
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz223{}, expected)
	require.Equal(t, Fuzz223{}, actual)

	actual = Fuzz223{
		One: rando.Float64(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz224(t *testing.T) {
	var expected, actual Fuzz224
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz224{}, expected)
	require.Equal(t, Fuzz224{}, actual)

	actual = Fuzz224{
		One: rando.Float64s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz225(t *testing.T) {
	var expected, actual Fuzz225
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz225{}, expected)
	require.Equal(t, Fuzz225{}, actual)

	actual = Fuzz225{
		One: rando.Float64s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz226(t *testing.T) {
	var expected, actual Fuzz226
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz226{}, expected)
	require.Equal(t, Fuzz226{}, actual)

	actual = Fuzz226{
		One: rando.Float64s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz227(t *testing.T) {
	var expected, actual Fuzz227
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz227{}, expected)
	require.Equal(t, Fuzz227{}, actual)

	actual = Fuzz227{
		One: rando.Float64s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz228(t *testing.T) {
	var expected, actual Fuzz228
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz228{}, expected)
	require.Equal(t, Fuzz228{}, actual)

	actual = Fuzz228{
		One: rando.Float64s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz229(t *testing.T) {
	var expected, actual Fuzz229
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz229{}, expected)
	require.Equal(t, Fuzz229{}, actual)

	actual = Fuzz229{
		One: rando.Float64s(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz230(t *testing.T) {
	var expected, actual Fuzz230
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz230{}, expected)
	require.Equal(t, Fuzz230{}, actual)

	actual = Fuzz230{
		One: rando.Float64s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz231(t *testing.T) {
	var expected, actual Fuzz231
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz231{}, expected)
	require.Equal(t, Fuzz231{}, actual)

	actual = Fuzz231{
		One: rando.Float64s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz232(t *testing.T) {
	var expected, actual Fuzz232
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz232{}, expected)
	require.Equal(t, Fuzz232{}, actual)

	actual = Fuzz232{
		One: rando.Float64s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz233(t *testing.T) {
	var expected, actual Fuzz233
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz233{}, expected)
	require.Equal(t, Fuzz233{}, actual)

	actual = Fuzz233{
		One: rando.Float64s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz234(t *testing.T) {
	var expected, actual Fuzz234
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz234{}, expected)
	require.Equal(t, Fuzz234{}, actual)

	actual = Fuzz234{
		One: rando.Float64s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz235(t *testing.T) {
	var expected, actual Fuzz235
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz235{}, expected)
	require.Equal(t, Fuzz235{}, actual)

	actual = Fuzz235{
		One: rando.Float64s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz236(t *testing.T) {
	var expected, actual Fuzz236
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz236{}, expected)
	require.Equal(t, Fuzz236{}, actual)

	actual = Fuzz236{
		One: rando.Float64s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz237(t *testing.T) {
	var expected, actual Fuzz237
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz237{}, expected)
	require.Equal(t, Fuzz237{}, actual)

	actual = Fuzz237{
		One: rando.Float64s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz238(t *testing.T) {
	var expected, actual Fuzz238
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz238{}, expected)
	require.Equal(t, Fuzz238{}, actual)

	actual = Fuzz238{
		One: rando.Float64s(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz239(t *testing.T) {
	var expected, actual Fuzz239
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz239{}, expected)
	require.Equal(t, Fuzz239{}, actual)

	actual = Fuzz239{
		One: rando.Float64s(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz240(t *testing.T) {
	var expected, actual Fuzz240
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz240{}, expected)
	require.Equal(t, Fuzz240{}, actual)

	actual = Fuzz240{
		One: rando.Float64s(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz241(t *testing.T) {
	var expected, actual Fuzz241
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz241{}, expected)
	require.Equal(t, Fuzz241{}, actual)

	actual = Fuzz241{
		One: rando.Float64s(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz242(t *testing.T) {
	var expected, actual Fuzz242
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz242{}, expected)
	require.Equal(t, Fuzz242{}, actual)

	actual = Fuzz242{
		One: rando.Float64s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz243(t *testing.T) {
	var expected, actual Fuzz243
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz243{}, expected)
	require.Equal(t, Fuzz243{}, actual)

	actual = Fuzz243{
		One: rando.Float64s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz244(t *testing.T) {
	var expected, actual Fuzz244
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz244{}, expected)
	require.Equal(t, Fuzz244{}, actual)

	actual = Fuzz244{
		One: rando.Float64s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz245(t *testing.T) {
	var expected, actual Fuzz245
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz245{}, expected)
	require.Equal(t, Fuzz245{}, actual)

	actual = Fuzz245{
		One: rando.Float64s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz246(t *testing.T) {
	var expected, actual Fuzz246
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz246{}, expected)
	require.Equal(t, Fuzz246{}, actual)

	actual = Fuzz246{
		One: rando.Float64s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz247(t *testing.T) {
	var expected, actual Fuzz247
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz247{}, expected)
	require.Equal(t, Fuzz247{}, actual)

	actual = Fuzz247{
		One: rando.Float64s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz248(t *testing.T) {
	var expected, actual Fuzz248
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz248{}, expected)
	require.Equal(t, Fuzz248{}, actual)

	actual = Fuzz248{
		One: rando.Float64s(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz249(t *testing.T) {
	var expected, actual Fuzz249
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz249{}, expected)
	require.Equal(t, Fuzz249{}, actual)

	actual = Fuzz249{
		One: rando.Float64s(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz250(t *testing.T) {
	var expected, actual Fuzz250
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz250{}, expected)
	require.Equal(t, Fuzz250{}, actual)

	actual = Fuzz250{
		One: rando.Float64s(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz251(t *testing.T) {
	var expected, actual Fuzz251
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz251{}, expected)
	require.Equal(t, Fuzz251{}, actual)

	actual = Fuzz251{
		One: rando.Float64s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz252(t *testing.T) {
	var expected, actual Fuzz252
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz252{}, expected)
	require.Equal(t, Fuzz252{}, actual)

	actual = Fuzz252{
		One: rando.Float64s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz253(t *testing.T) {
	var expected, actual Fuzz253
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz253{}, expected)
	require.Equal(t, Fuzz253{}, actual)

	actual = Fuzz253{
		One: rando.Float64s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz254(t *testing.T) {
	var expected, actual Fuzz254
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz254{}, expected)
	require.Equal(t, Fuzz254{}, actual)

	actual = Fuzz254{
		One: rando.Float64s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz255(t *testing.T) {
	var expected, actual Fuzz255
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz255{}, expected)
	require.Equal(t, Fuzz255{}, actual)

	actual = Fuzz255{
		One: rando.Float64s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz256(t *testing.T) {
	var expected, actual Fuzz256
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz256{}, expected)
	require.Equal(t, Fuzz256{}, actual)

	actual = Fuzz256{
		One: rando.Int(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz257(t *testing.T) {
	var expected, actual Fuzz257
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz257{}, expected)
	require.Equal(t, Fuzz257{}, actual)

	actual = Fuzz257{
		One: rando.Int(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz258(t *testing.T) {
	var expected, actual Fuzz258
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz258{}, expected)
	require.Equal(t, Fuzz258{}, actual)

	actual = Fuzz258{
		One: rando.Int(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz259(t *testing.T) {
	var expected, actual Fuzz259
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz259{}, expected)
	require.Equal(t, Fuzz259{}, actual)

	actual = Fuzz259{
		One: rando.Int(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz260(t *testing.T) {
	var expected, actual Fuzz260
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz260{}, expected)
	require.Equal(t, Fuzz260{}, actual)

	actual = Fuzz260{
		One: rando.Int(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz261(t *testing.T) {
	var expected, actual Fuzz261
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz261{}, expected)
	require.Equal(t, Fuzz261{}, actual)

	actual = Fuzz261{
		One: rando.Int(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz262(t *testing.T) {
	var expected, actual Fuzz262
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz262{}, expected)
	require.Equal(t, Fuzz262{}, actual)

	actual = Fuzz262{
		One: rando.Int(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz263(t *testing.T) {
	var expected, actual Fuzz263
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz263{}, expected)
	require.Equal(t, Fuzz263{}, actual)

	actual = Fuzz263{
		One: rando.Int(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz264(t *testing.T) {
	var expected, actual Fuzz264
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz264{}, expected)
	require.Equal(t, Fuzz264{}, actual)

	actual = Fuzz264{
		One: rando.Int(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz265(t *testing.T) {
	var expected, actual Fuzz265
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz265{}, expected)
	require.Equal(t, Fuzz265{}, actual)

	actual = Fuzz265{
		One: rando.Int(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz266(t *testing.T) {
	var expected, actual Fuzz266
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz266{}, expected)
	require.Equal(t, Fuzz266{}, actual)

	actual = Fuzz266{
		One: rando.Int(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz267(t *testing.T) {
	var expected, actual Fuzz267
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz267{}, expected)
	require.Equal(t, Fuzz267{}, actual)

	actual = Fuzz267{
		One: rando.Int(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz268(t *testing.T) {
	var expected, actual Fuzz268
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz268{}, expected)
	require.Equal(t, Fuzz268{}, actual)

	actual = Fuzz268{
		One: rando.Int(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz269(t *testing.T) {
	var expected, actual Fuzz269
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz269{}, expected)
	require.Equal(t, Fuzz269{}, actual)

	actual = Fuzz269{
		One: rando.Int(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz270(t *testing.T) {
	var expected, actual Fuzz270
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz270{}, expected)
	require.Equal(t, Fuzz270{}, actual)

	actual = Fuzz270{
		One: rando.Int(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz271(t *testing.T) {
	var expected, actual Fuzz271
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz271{}, expected)
	require.Equal(t, Fuzz271{}, actual)

	actual = Fuzz271{
		One: rando.Int(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz272(t *testing.T) {
	var expected, actual Fuzz272
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz272{}, expected)
	require.Equal(t, Fuzz272{}, actual)

	actual = Fuzz272{
		One: rando.Int(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz273(t *testing.T) {
	var expected, actual Fuzz273
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz273{}, expected)
	require.Equal(t, Fuzz273{}, actual)

	actual = Fuzz273{
		One: rando.Int(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz274(t *testing.T) {
	var expected, actual Fuzz274
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz274{}, expected)
	require.Equal(t, Fuzz274{}, actual)

	actual = Fuzz274{
		One: rando.Int(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz275(t *testing.T) {
	var expected, actual Fuzz275
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz275{}, expected)
	require.Equal(t, Fuzz275{}, actual)

	actual = Fuzz275{
		One: rando.Int(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz276(t *testing.T) {
	var expected, actual Fuzz276
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz276{}, expected)
	require.Equal(t, Fuzz276{}, actual)

	actual = Fuzz276{
		One: rando.Int(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz277(t *testing.T) {
	var expected, actual Fuzz277
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz277{}, expected)
	require.Equal(t, Fuzz277{}, actual)

	actual = Fuzz277{
		One: rando.Int(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz278(t *testing.T) {
	var expected, actual Fuzz278
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz278{}, expected)
	require.Equal(t, Fuzz278{}, actual)

	actual = Fuzz278{
		One: rando.Int(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz279(t *testing.T) {
	var expected, actual Fuzz279
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz279{}, expected)
	require.Equal(t, Fuzz279{}, actual)

	actual = Fuzz279{
		One: rando.Int(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz280(t *testing.T) {
	var expected, actual Fuzz280
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz280{}, expected)
	require.Equal(t, Fuzz280{}, actual)

	actual = Fuzz280{
		One: rando.Int(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz281(t *testing.T) {
	var expected, actual Fuzz281
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz281{}, expected)
	require.Equal(t, Fuzz281{}, actual)

	actual = Fuzz281{
		One: rando.Int(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz282(t *testing.T) {
	var expected, actual Fuzz282
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz282{}, expected)
	require.Equal(t, Fuzz282{}, actual)

	actual = Fuzz282{
		One: rando.Int(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz283(t *testing.T) {
	var expected, actual Fuzz283
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz283{}, expected)
	require.Equal(t, Fuzz283{}, actual)

	actual = Fuzz283{
		One: rando.Int(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz284(t *testing.T) {
	var expected, actual Fuzz284
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz284{}, expected)
	require.Equal(t, Fuzz284{}, actual)

	actual = Fuzz284{
		One: rando.Int(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz285(t *testing.T) {
	var expected, actual Fuzz285
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz285{}, expected)
	require.Equal(t, Fuzz285{}, actual)

	actual = Fuzz285{
		One: rando.Int(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz286(t *testing.T) {
	var expected, actual Fuzz286
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz286{}, expected)
	require.Equal(t, Fuzz286{}, actual)

	actual = Fuzz286{
		One: rando.Int(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz287(t *testing.T) {
	var expected, actual Fuzz287
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz287{}, expected)
	require.Equal(t, Fuzz287{}, actual)

	actual = Fuzz287{
		One: rando.Int(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz288(t *testing.T) {
	var expected, actual Fuzz288
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz288{}, expected)
	require.Equal(t, Fuzz288{}, actual)

	actual = Fuzz288{
		One: rando.Int8(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz289(t *testing.T) {
	var expected, actual Fuzz289
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz289{}, expected)
	require.Equal(t, Fuzz289{}, actual)

	actual = Fuzz289{
		One: rando.Int8(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz290(t *testing.T) {
	var expected, actual Fuzz290
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz290{}, expected)
	require.Equal(t, Fuzz290{}, actual)

	actual = Fuzz290{
		One: rando.Int8(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz291(t *testing.T) {
	var expected, actual Fuzz291
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz291{}, expected)
	require.Equal(t, Fuzz291{}, actual)

	actual = Fuzz291{
		One: rando.Int8(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz292(t *testing.T) {
	var expected, actual Fuzz292
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz292{}, expected)
	require.Equal(t, Fuzz292{}, actual)

	actual = Fuzz292{
		One: rando.Int8(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz293(t *testing.T) {
	var expected, actual Fuzz293
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz293{}, expected)
	require.Equal(t, Fuzz293{}, actual)

	actual = Fuzz293{
		One: rando.Int8(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz294(t *testing.T) {
	var expected, actual Fuzz294
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz294{}, expected)
	require.Equal(t, Fuzz294{}, actual)

	actual = Fuzz294{
		One: rando.Int8(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz295(t *testing.T) {
	var expected, actual Fuzz295
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz295{}, expected)
	require.Equal(t, Fuzz295{}, actual)

	actual = Fuzz295{
		One: rando.Int8(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz296(t *testing.T) {
	var expected, actual Fuzz296
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz296{}, expected)
	require.Equal(t, Fuzz296{}, actual)

	actual = Fuzz296{
		One: rando.Int8(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz297(t *testing.T) {
	var expected, actual Fuzz297
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz297{}, expected)
	require.Equal(t, Fuzz297{}, actual)

	actual = Fuzz297{
		One: rando.Int8(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz298(t *testing.T) {
	var expected, actual Fuzz298
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz298{}, expected)
	require.Equal(t, Fuzz298{}, actual)

	actual = Fuzz298{
		One: rando.Int8(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz299(t *testing.T) {
	var expected, actual Fuzz299
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz299{}, expected)
	require.Equal(t, Fuzz299{}, actual)

	actual = Fuzz299{
		One: rando.Int8(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz300(t *testing.T) {
	var expected, actual Fuzz300
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz300{}, expected)
	require.Equal(t, Fuzz300{}, actual)

	actual = Fuzz300{
		One: rando.Int8(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz301(t *testing.T) {
	var expected, actual Fuzz301
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz301{}, expected)
	require.Equal(t, Fuzz301{}, actual)

	actual = Fuzz301{
		One: rando.Int8(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz302(t *testing.T) {
	var expected, actual Fuzz302
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz302{}, expected)
	require.Equal(t, Fuzz302{}, actual)

	actual = Fuzz302{
		One: rando.Int8(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz303(t *testing.T) {
	var expected, actual Fuzz303
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz303{}, expected)
	require.Equal(t, Fuzz303{}, actual)

	actual = Fuzz303{
		One: rando.Int8(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz304(t *testing.T) {
	var expected, actual Fuzz304
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz304{}, expected)
	require.Equal(t, Fuzz304{}, actual)

	actual = Fuzz304{
		One: rando.Int8(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz305(t *testing.T) {
	var expected, actual Fuzz305
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz305{}, expected)
	require.Equal(t, Fuzz305{}, actual)

	actual = Fuzz305{
		One: rando.Int8(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz306(t *testing.T) {
	var expected, actual Fuzz306
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz306{}, expected)
	require.Equal(t, Fuzz306{}, actual)

	actual = Fuzz306{
		One: rando.Int8(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz307(t *testing.T) {
	var expected, actual Fuzz307
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz307{}, expected)
	require.Equal(t, Fuzz307{}, actual)

	actual = Fuzz307{
		One: rando.Int8(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz308(t *testing.T) {
	var expected, actual Fuzz308
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz308{}, expected)
	require.Equal(t, Fuzz308{}, actual)

	actual = Fuzz308{
		One: rando.Int8(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz309(t *testing.T) {
	var expected, actual Fuzz309
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz309{}, expected)
	require.Equal(t, Fuzz309{}, actual)

	actual = Fuzz309{
		One: rando.Int8(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz310(t *testing.T) {
	var expected, actual Fuzz310
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz310{}, expected)
	require.Equal(t, Fuzz310{}, actual)

	actual = Fuzz310{
		One: rando.Int8(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz311(t *testing.T) {
	var expected, actual Fuzz311
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz311{}, expected)
	require.Equal(t, Fuzz311{}, actual)

	actual = Fuzz311{
		One: rando.Int8(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz312(t *testing.T) {
	var expected, actual Fuzz312
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz312{}, expected)
	require.Equal(t, Fuzz312{}, actual)

	actual = Fuzz312{
		One: rando.Int8(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz313(t *testing.T) {
	var expected, actual Fuzz313
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz313{}, expected)
	require.Equal(t, Fuzz313{}, actual)

	actual = Fuzz313{
		One: rando.Int8(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz314(t *testing.T) {
	var expected, actual Fuzz314
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz314{}, expected)
	require.Equal(t, Fuzz314{}, actual)

	actual = Fuzz314{
		One: rando.Int8(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz315(t *testing.T) {
	var expected, actual Fuzz315
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz315{}, expected)
	require.Equal(t, Fuzz315{}, actual)

	actual = Fuzz315{
		One: rando.Int8(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz316(t *testing.T) {
	var expected, actual Fuzz316
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz316{}, expected)
	require.Equal(t, Fuzz316{}, actual)

	actual = Fuzz316{
		One: rando.Int8(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz317(t *testing.T) {
	var expected, actual Fuzz317
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz317{}, expected)
	require.Equal(t, Fuzz317{}, actual)

	actual = Fuzz317{
		One: rando.Int8(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz318(t *testing.T) {
	var expected, actual Fuzz318
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz318{}, expected)
	require.Equal(t, Fuzz318{}, actual)

	actual = Fuzz318{
		One: rando.Int8(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz319(t *testing.T) {
	var expected, actual Fuzz319
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz319{}, expected)
	require.Equal(t, Fuzz319{}, actual)

	actual = Fuzz319{
		One: rando.Int8(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz320(t *testing.T) {
	var expected, actual Fuzz320
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz320{}, expected)
	require.Equal(t, Fuzz320{}, actual)

	actual = Fuzz320{
		One: rando.Int16(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz321(t *testing.T) {
	var expected, actual Fuzz321
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz321{}, expected)
	require.Equal(t, Fuzz321{}, actual)

	actual = Fuzz321{
		One: rando.Int16(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz322(t *testing.T) {
	var expected, actual Fuzz322
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz322{}, expected)
	require.Equal(t, Fuzz322{}, actual)

	actual = Fuzz322{
		One: rando.Int16(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz323(t *testing.T) {
	var expected, actual Fuzz323
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz323{}, expected)
	require.Equal(t, Fuzz323{}, actual)

	actual = Fuzz323{
		One: rando.Int16(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz324(t *testing.T) {
	var expected, actual Fuzz324
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz324{}, expected)
	require.Equal(t, Fuzz324{}, actual)

	actual = Fuzz324{
		One: rando.Int16(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz325(t *testing.T) {
	var expected, actual Fuzz325
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz325{}, expected)
	require.Equal(t, Fuzz325{}, actual)

	actual = Fuzz325{
		One: rando.Int16(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz326(t *testing.T) {
	var expected, actual Fuzz326
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz326{}, expected)
	require.Equal(t, Fuzz326{}, actual)

	actual = Fuzz326{
		One: rando.Int16(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz327(t *testing.T) {
	var expected, actual Fuzz327
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz327{}, expected)
	require.Equal(t, Fuzz327{}, actual)

	actual = Fuzz327{
		One: rando.Int16(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz328(t *testing.T) {
	var expected, actual Fuzz328
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz328{}, expected)
	require.Equal(t, Fuzz328{}, actual)

	actual = Fuzz328{
		One: rando.Int16(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz329(t *testing.T) {
	var expected, actual Fuzz329
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz329{}, expected)
	require.Equal(t, Fuzz329{}, actual)

	actual = Fuzz329{
		One: rando.Int16(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz330(t *testing.T) {
	var expected, actual Fuzz330
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz330{}, expected)
	require.Equal(t, Fuzz330{}, actual)

	actual = Fuzz330{
		One: rando.Int16(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz331(t *testing.T) {
	var expected, actual Fuzz331
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz331{}, expected)
	require.Equal(t, Fuzz331{}, actual)

	actual = Fuzz331{
		One: rando.Int16(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz332(t *testing.T) {
	var expected, actual Fuzz332
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz332{}, expected)
	require.Equal(t, Fuzz332{}, actual)

	actual = Fuzz332{
		One: rando.Int16(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz333(t *testing.T) {
	var expected, actual Fuzz333
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz333{}, expected)
	require.Equal(t, Fuzz333{}, actual)

	actual = Fuzz333{
		One: rando.Int16(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz334(t *testing.T) {
	var expected, actual Fuzz334
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz334{}, expected)
	require.Equal(t, Fuzz334{}, actual)

	actual = Fuzz334{
		One: rando.Int16(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz335(t *testing.T) {
	var expected, actual Fuzz335
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz335{}, expected)
	require.Equal(t, Fuzz335{}, actual)

	actual = Fuzz335{
		One: rando.Int16(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz336(t *testing.T) {
	var expected, actual Fuzz336
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz336{}, expected)
	require.Equal(t, Fuzz336{}, actual)

	actual = Fuzz336{
		One: rando.Int16(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz337(t *testing.T) {
	var expected, actual Fuzz337
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz337{}, expected)
	require.Equal(t, Fuzz337{}, actual)

	actual = Fuzz337{
		One: rando.Int16(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz338(t *testing.T) {
	var expected, actual Fuzz338
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz338{}, expected)
	require.Equal(t, Fuzz338{}, actual)

	actual = Fuzz338{
		One: rando.Int16(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz339(t *testing.T) {
	var expected, actual Fuzz339
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz339{}, expected)
	require.Equal(t, Fuzz339{}, actual)

	actual = Fuzz339{
		One: rando.Int16(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz340(t *testing.T) {
	var expected, actual Fuzz340
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz340{}, expected)
	require.Equal(t, Fuzz340{}, actual)

	actual = Fuzz340{
		One: rando.Int16(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz341(t *testing.T) {
	var expected, actual Fuzz341
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz341{}, expected)
	require.Equal(t, Fuzz341{}, actual)

	actual = Fuzz341{
		One: rando.Int16(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz342(t *testing.T) {
	var expected, actual Fuzz342
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz342{}, expected)
	require.Equal(t, Fuzz342{}, actual)

	actual = Fuzz342{
		One: rando.Int16(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz343(t *testing.T) {
	var expected, actual Fuzz343
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz343{}, expected)
	require.Equal(t, Fuzz343{}, actual)

	actual = Fuzz343{
		One: rando.Int16(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz344(t *testing.T) {
	var expected, actual Fuzz344
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz344{}, expected)
	require.Equal(t, Fuzz344{}, actual)

	actual = Fuzz344{
		One: rando.Int16(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz345(t *testing.T) {
	var expected, actual Fuzz345
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz345{}, expected)
	require.Equal(t, Fuzz345{}, actual)

	actual = Fuzz345{
		One: rando.Int16(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz346(t *testing.T) {
	var expected, actual Fuzz346
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz346{}, expected)
	require.Equal(t, Fuzz346{}, actual)

	actual = Fuzz346{
		One: rando.Int16(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz347(t *testing.T) {
	var expected, actual Fuzz347
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz347{}, expected)
	require.Equal(t, Fuzz347{}, actual)

	actual = Fuzz347{
		One: rando.Int16(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz348(t *testing.T) {
	var expected, actual Fuzz348
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz348{}, expected)
	require.Equal(t, Fuzz348{}, actual)

	actual = Fuzz348{
		One: rando.Int16(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz349(t *testing.T) {
	var expected, actual Fuzz349
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz349{}, expected)
	require.Equal(t, Fuzz349{}, actual)

	actual = Fuzz349{
		One: rando.Int16(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz350(t *testing.T) {
	var expected, actual Fuzz350
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz350{}, expected)
	require.Equal(t, Fuzz350{}, actual)

	actual = Fuzz350{
		One: rando.Int16(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz351(t *testing.T) {
	var expected, actual Fuzz351
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz351{}, expected)
	require.Equal(t, Fuzz351{}, actual)

	actual = Fuzz351{
		One: rando.Int16(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz352(t *testing.T) {
	var expected, actual Fuzz352
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz352{}, expected)
	require.Equal(t, Fuzz352{}, actual)

	actual = Fuzz352{
		One: rando.Int32(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz353(t *testing.T) {
	var expected, actual Fuzz353
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz353{}, expected)
	require.Equal(t, Fuzz353{}, actual)

	actual = Fuzz353{
		One: rando.Int32(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz354(t *testing.T) {
	var expected, actual Fuzz354
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz354{}, expected)
	require.Equal(t, Fuzz354{}, actual)

	actual = Fuzz354{
		One: rando.Int32(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz355(t *testing.T) {
	var expected, actual Fuzz355
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz355{}, expected)
	require.Equal(t, Fuzz355{}, actual)

	actual = Fuzz355{
		One: rando.Int32(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz356(t *testing.T) {
	var expected, actual Fuzz356
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz356{}, expected)
	require.Equal(t, Fuzz356{}, actual)

	actual = Fuzz356{
		One: rando.Int32(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz357(t *testing.T) {
	var expected, actual Fuzz357
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz357{}, expected)
	require.Equal(t, Fuzz357{}, actual)

	actual = Fuzz357{
		One: rando.Int32(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz358(t *testing.T) {
	var expected, actual Fuzz358
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz358{}, expected)
	require.Equal(t, Fuzz358{}, actual)

	actual = Fuzz358{
		One: rando.Int32(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz359(t *testing.T) {
	var expected, actual Fuzz359
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz359{}, expected)
	require.Equal(t, Fuzz359{}, actual)

	actual = Fuzz359{
		One: rando.Int32(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz360(t *testing.T) {
	var expected, actual Fuzz360
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz360{}, expected)
	require.Equal(t, Fuzz360{}, actual)

	actual = Fuzz360{
		One: rando.Int32(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz361(t *testing.T) {
	var expected, actual Fuzz361
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz361{}, expected)
	require.Equal(t, Fuzz361{}, actual)

	actual = Fuzz361{
		One: rando.Int32(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz362(t *testing.T) {
	var expected, actual Fuzz362
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz362{}, expected)
	require.Equal(t, Fuzz362{}, actual)

	actual = Fuzz362{
		One: rando.Int32(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz363(t *testing.T) {
	var expected, actual Fuzz363
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz363{}, expected)
	require.Equal(t, Fuzz363{}, actual)

	actual = Fuzz363{
		One: rando.Int32(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz364(t *testing.T) {
	var expected, actual Fuzz364
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz364{}, expected)
	require.Equal(t, Fuzz364{}, actual)

	actual = Fuzz364{
		One: rando.Int32(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz365(t *testing.T) {
	var expected, actual Fuzz365
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz365{}, expected)
	require.Equal(t, Fuzz365{}, actual)

	actual = Fuzz365{
		One: rando.Int32(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz366(t *testing.T) {
	var expected, actual Fuzz366
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz366{}, expected)
	require.Equal(t, Fuzz366{}, actual)

	actual = Fuzz366{
		One: rando.Int32(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz367(t *testing.T) {
	var expected, actual Fuzz367
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz367{}, expected)
	require.Equal(t, Fuzz367{}, actual)

	actual = Fuzz367{
		One: rando.Int32(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz368(t *testing.T) {
	var expected, actual Fuzz368
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz368{}, expected)
	require.Equal(t, Fuzz368{}, actual)

	actual = Fuzz368{
		One: rando.Int32(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz369(t *testing.T) {
	var expected, actual Fuzz369
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz369{}, expected)
	require.Equal(t, Fuzz369{}, actual)

	actual = Fuzz369{
		One: rando.Int32(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz370(t *testing.T) {
	var expected, actual Fuzz370
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz370{}, expected)
	require.Equal(t, Fuzz370{}, actual)

	actual = Fuzz370{
		One: rando.Int32(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz371(t *testing.T) {
	var expected, actual Fuzz371
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz371{}, expected)
	require.Equal(t, Fuzz371{}, actual)

	actual = Fuzz371{
		One: rando.Int32(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz372(t *testing.T) {
	var expected, actual Fuzz372
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz372{}, expected)
	require.Equal(t, Fuzz372{}, actual)

	actual = Fuzz372{
		One: rando.Int32(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz373(t *testing.T) {
	var expected, actual Fuzz373
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz373{}, expected)
	require.Equal(t, Fuzz373{}, actual)

	actual = Fuzz373{
		One: rando.Int32(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz374(t *testing.T) {
	var expected, actual Fuzz374
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz374{}, expected)
	require.Equal(t, Fuzz374{}, actual)

	actual = Fuzz374{
		One: rando.Int32(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz375(t *testing.T) {
	var expected, actual Fuzz375
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz375{}, expected)
	require.Equal(t, Fuzz375{}, actual)

	actual = Fuzz375{
		One: rando.Int32(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz376(t *testing.T) {
	var expected, actual Fuzz376
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz376{}, expected)
	require.Equal(t, Fuzz376{}, actual)

	actual = Fuzz376{
		One: rando.Int32(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz377(t *testing.T) {
	var expected, actual Fuzz377
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz377{}, expected)
	require.Equal(t, Fuzz377{}, actual)

	actual = Fuzz377{
		One: rando.Int32(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz378(t *testing.T) {
	var expected, actual Fuzz378
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz378{}, expected)
	require.Equal(t, Fuzz378{}, actual)

	actual = Fuzz378{
		One: rando.Int32(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz379(t *testing.T) {
	var expected, actual Fuzz379
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz379{}, expected)
	require.Equal(t, Fuzz379{}, actual)

	actual = Fuzz379{
		One: rando.Int32(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz380(t *testing.T) {
	var expected, actual Fuzz380
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz380{}, expected)
	require.Equal(t, Fuzz380{}, actual)

	actual = Fuzz380{
		One: rando.Int32(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz381(t *testing.T) {
	var expected, actual Fuzz381
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz381{}, expected)
	require.Equal(t, Fuzz381{}, actual)

	actual = Fuzz381{
		One: rando.Int32(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz382(t *testing.T) {
	var expected, actual Fuzz382
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz382{}, expected)
	require.Equal(t, Fuzz382{}, actual)

	actual = Fuzz382{
		One: rando.Int32(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz383(t *testing.T) {
	var expected, actual Fuzz383
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz383{}, expected)
	require.Equal(t, Fuzz383{}, actual)

	actual = Fuzz383{
		One: rando.Int32(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz384(t *testing.T) {
	var expected, actual Fuzz384
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz384{}, expected)
	require.Equal(t, Fuzz384{}, actual)

	actual = Fuzz384{
		One: rando.Rune(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz385(t *testing.T) {
	var expected, actual Fuzz385
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz385{}, expected)
	require.Equal(t, Fuzz385{}, actual)

	actual = Fuzz385{
		One: rando.Rune(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz386(t *testing.T) {
	var expected, actual Fuzz386
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz386{}, expected)
	require.Equal(t, Fuzz386{}, actual)

	actual = Fuzz386{
		One: rando.Rune(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz387(t *testing.T) {
	var expected, actual Fuzz387
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz387{}, expected)
	require.Equal(t, Fuzz387{}, actual)

	actual = Fuzz387{
		One: rando.Rune(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz388(t *testing.T) {
	var expected, actual Fuzz388
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz388{}, expected)
	require.Equal(t, Fuzz388{}, actual)

	actual = Fuzz388{
		One: rando.Rune(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz389(t *testing.T) {
	var expected, actual Fuzz389
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz389{}, expected)
	require.Equal(t, Fuzz389{}, actual)

	actual = Fuzz389{
		One: rando.Rune(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz390(t *testing.T) {
	var expected, actual Fuzz390
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz390{}, expected)
	require.Equal(t, Fuzz390{}, actual)

	actual = Fuzz390{
		One: rando.Rune(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz391(t *testing.T) {
	var expected, actual Fuzz391
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz391{}, expected)
	require.Equal(t, Fuzz391{}, actual)

	actual = Fuzz391{
		One: rando.Rune(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz392(t *testing.T) {
	var expected, actual Fuzz392
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz392{}, expected)
	require.Equal(t, Fuzz392{}, actual)

	actual = Fuzz392{
		One: rando.Rune(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz393(t *testing.T) {
	var expected, actual Fuzz393
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz393{}, expected)
	require.Equal(t, Fuzz393{}, actual)

	actual = Fuzz393{
		One: rando.Rune(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz394(t *testing.T) {
	var expected, actual Fuzz394
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz394{}, expected)
	require.Equal(t, Fuzz394{}, actual)

	actual = Fuzz394{
		One: rando.Rune(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz395(t *testing.T) {
	var expected, actual Fuzz395
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz395{}, expected)
	require.Equal(t, Fuzz395{}, actual)

	actual = Fuzz395{
		One: rando.Rune(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz396(t *testing.T) {
	var expected, actual Fuzz396
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz396{}, expected)
	require.Equal(t, Fuzz396{}, actual)

	actual = Fuzz396{
		One: rando.Rune(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz397(t *testing.T) {
	var expected, actual Fuzz397
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz397{}, expected)
	require.Equal(t, Fuzz397{}, actual)

	actual = Fuzz397{
		One: rando.Rune(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz398(t *testing.T) {
	var expected, actual Fuzz398
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz398{}, expected)
	require.Equal(t, Fuzz398{}, actual)

	actual = Fuzz398{
		One: rando.Rune(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz399(t *testing.T) {
	var expected, actual Fuzz399
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz399{}, expected)
	require.Equal(t, Fuzz399{}, actual)

	actual = Fuzz399{
		One: rando.Rune(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz400(t *testing.T) {
	var expected, actual Fuzz400
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz400{}, expected)
	require.Equal(t, Fuzz400{}, actual)

	actual = Fuzz400{
		One: rando.Rune(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz401(t *testing.T) {
	var expected, actual Fuzz401
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz401{}, expected)
	require.Equal(t, Fuzz401{}, actual)

	actual = Fuzz401{
		One: rando.Rune(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz402(t *testing.T) {
	var expected, actual Fuzz402
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz402{}, expected)
	require.Equal(t, Fuzz402{}, actual)

	actual = Fuzz402{
		One: rando.Rune(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz403(t *testing.T) {
	var expected, actual Fuzz403
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz403{}, expected)
	require.Equal(t, Fuzz403{}, actual)

	actual = Fuzz403{
		One: rando.Rune(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz404(t *testing.T) {
	var expected, actual Fuzz404
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz404{}, expected)
	require.Equal(t, Fuzz404{}, actual)

	actual = Fuzz404{
		One: rando.Rune(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz405(t *testing.T) {
	var expected, actual Fuzz405
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz405{}, expected)
	require.Equal(t, Fuzz405{}, actual)

	actual = Fuzz405{
		One: rando.Rune(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz406(t *testing.T) {
	var expected, actual Fuzz406
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz406{}, expected)
	require.Equal(t, Fuzz406{}, actual)

	actual = Fuzz406{
		One: rando.Rune(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz407(t *testing.T) {
	var expected, actual Fuzz407
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz407{}, expected)
	require.Equal(t, Fuzz407{}, actual)

	actual = Fuzz407{
		One: rando.Rune(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz408(t *testing.T) {
	var expected, actual Fuzz408
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz408{}, expected)
	require.Equal(t, Fuzz408{}, actual)

	actual = Fuzz408{
		One: rando.Rune(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz409(t *testing.T) {
	var expected, actual Fuzz409
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz409{}, expected)
	require.Equal(t, Fuzz409{}, actual)

	actual = Fuzz409{
		One: rando.Rune(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz410(t *testing.T) {
	var expected, actual Fuzz410
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz410{}, expected)
	require.Equal(t, Fuzz410{}, actual)

	actual = Fuzz410{
		One: rando.Rune(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz411(t *testing.T) {
	var expected, actual Fuzz411
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz411{}, expected)
	require.Equal(t, Fuzz411{}, actual)

	actual = Fuzz411{
		One: rando.Rune(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz412(t *testing.T) {
	var expected, actual Fuzz412
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz412{}, expected)
	require.Equal(t, Fuzz412{}, actual)

	actual = Fuzz412{
		One: rando.Rune(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz413(t *testing.T) {
	var expected, actual Fuzz413
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz413{}, expected)
	require.Equal(t, Fuzz413{}, actual)

	actual = Fuzz413{
		One: rando.Rune(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz414(t *testing.T) {
	var expected, actual Fuzz414
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz414{}, expected)
	require.Equal(t, Fuzz414{}, actual)

	actual = Fuzz414{
		One: rando.Rune(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz415(t *testing.T) {
	var expected, actual Fuzz415
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz415{}, expected)
	require.Equal(t, Fuzz415{}, actual)

	actual = Fuzz415{
		One: rando.Rune(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz416(t *testing.T) {
	var expected, actual Fuzz416
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz416{}, expected)
	require.Equal(t, Fuzz416{}, actual)

	actual = Fuzz416{
		One: rando.Int64(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz417(t *testing.T) {
	var expected, actual Fuzz417
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz417{}, expected)
	require.Equal(t, Fuzz417{}, actual)

	actual = Fuzz417{
		One: rando.Int64(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz418(t *testing.T) {
	var expected, actual Fuzz418
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz418{}, expected)
	require.Equal(t, Fuzz418{}, actual)

	actual = Fuzz418{
		One: rando.Int64(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz419(t *testing.T) {
	var expected, actual Fuzz419
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz419{}, expected)
	require.Equal(t, Fuzz419{}, actual)

	actual = Fuzz419{
		One: rando.Int64(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz420(t *testing.T) {
	var expected, actual Fuzz420
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz420{}, expected)
	require.Equal(t, Fuzz420{}, actual)

	actual = Fuzz420{
		One: rando.Int64(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz421(t *testing.T) {
	var expected, actual Fuzz421
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz421{}, expected)
	require.Equal(t, Fuzz421{}, actual)

	actual = Fuzz421{
		One: rando.Int64(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz422(t *testing.T) {
	var expected, actual Fuzz422
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz422{}, expected)
	require.Equal(t, Fuzz422{}, actual)

	actual = Fuzz422{
		One: rando.Int64(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz423(t *testing.T) {
	var expected, actual Fuzz423
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz423{}, expected)
	require.Equal(t, Fuzz423{}, actual)

	actual = Fuzz423{
		One: rando.Int64(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz424(t *testing.T) {
	var expected, actual Fuzz424
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz424{}, expected)
	require.Equal(t, Fuzz424{}, actual)

	actual = Fuzz424{
		One: rando.Int64(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz425(t *testing.T) {
	var expected, actual Fuzz425
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz425{}, expected)
	require.Equal(t, Fuzz425{}, actual)

	actual = Fuzz425{
		One: rando.Int64(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz426(t *testing.T) {
	var expected, actual Fuzz426
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz426{}, expected)
	require.Equal(t, Fuzz426{}, actual)

	actual = Fuzz426{
		One: rando.Int64(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz427(t *testing.T) {
	var expected, actual Fuzz427
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz427{}, expected)
	require.Equal(t, Fuzz427{}, actual)

	actual = Fuzz427{
		One: rando.Int64(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz428(t *testing.T) {
	var expected, actual Fuzz428
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz428{}, expected)
	require.Equal(t, Fuzz428{}, actual)

	actual = Fuzz428{
		One: rando.Int64(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz429(t *testing.T) {
	var expected, actual Fuzz429
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz429{}, expected)
	require.Equal(t, Fuzz429{}, actual)

	actual = Fuzz429{
		One: rando.Int64(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz430(t *testing.T) {
	var expected, actual Fuzz430
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz430{}, expected)
	require.Equal(t, Fuzz430{}, actual)

	actual = Fuzz430{
		One: rando.Int64(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz431(t *testing.T) {
	var expected, actual Fuzz431
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz431{}, expected)
	require.Equal(t, Fuzz431{}, actual)

	actual = Fuzz431{
		One: rando.Int64(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz432(t *testing.T) {
	var expected, actual Fuzz432
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz432{}, expected)
	require.Equal(t, Fuzz432{}, actual)

	actual = Fuzz432{
		One: rando.Int64(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz433(t *testing.T) {
	var expected, actual Fuzz433
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz433{}, expected)
	require.Equal(t, Fuzz433{}, actual)

	actual = Fuzz433{
		One: rando.Int64(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz434(t *testing.T) {
	var expected, actual Fuzz434
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz434{}, expected)
	require.Equal(t, Fuzz434{}, actual)

	actual = Fuzz434{
		One: rando.Int64(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz435(t *testing.T) {
	var expected, actual Fuzz435
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz435{}, expected)
	require.Equal(t, Fuzz435{}, actual)

	actual = Fuzz435{
		One: rando.Int64(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz436(t *testing.T) {
	var expected, actual Fuzz436
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz436{}, expected)
	require.Equal(t, Fuzz436{}, actual)

	actual = Fuzz436{
		One: rando.Int64(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz437(t *testing.T) {
	var expected, actual Fuzz437
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz437{}, expected)
	require.Equal(t, Fuzz437{}, actual)

	actual = Fuzz437{
		One: rando.Int64(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz438(t *testing.T) {
	var expected, actual Fuzz438
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz438{}, expected)
	require.Equal(t, Fuzz438{}, actual)

	actual = Fuzz438{
		One: rando.Int64(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz439(t *testing.T) {
	var expected, actual Fuzz439
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz439{}, expected)
	require.Equal(t, Fuzz439{}, actual)

	actual = Fuzz439{
		One: rando.Int64(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz440(t *testing.T) {
	var expected, actual Fuzz440
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz440{}, expected)
	require.Equal(t, Fuzz440{}, actual)

	actual = Fuzz440{
		One: rando.Int64(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz441(t *testing.T) {
	var expected, actual Fuzz441
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz441{}, expected)
	require.Equal(t, Fuzz441{}, actual)

	actual = Fuzz441{
		One: rando.Int64(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz442(t *testing.T) {
	var expected, actual Fuzz442
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz442{}, expected)
	require.Equal(t, Fuzz442{}, actual)

	actual = Fuzz442{
		One: rando.Int64(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz443(t *testing.T) {
	var expected, actual Fuzz443
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz443{}, expected)
	require.Equal(t, Fuzz443{}, actual)

	actual = Fuzz443{
		One: rando.Int64(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz444(t *testing.T) {
	var expected, actual Fuzz444
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz444{}, expected)
	require.Equal(t, Fuzz444{}, actual)

	actual = Fuzz444{
		One: rando.Int64(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz445(t *testing.T) {
	var expected, actual Fuzz445
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz445{}, expected)
	require.Equal(t, Fuzz445{}, actual)

	actual = Fuzz445{
		One: rando.Int64(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz446(t *testing.T) {
	var expected, actual Fuzz446
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz446{}, expected)
	require.Equal(t, Fuzz446{}, actual)

	actual = Fuzz446{
		One: rando.Int64(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz447(t *testing.T) {
	var expected, actual Fuzz447
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz447{}, expected)
	require.Equal(t, Fuzz447{}, actual)

	actual = Fuzz447{
		One: rando.Int64(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz448(t *testing.T) {
	var expected, actual Fuzz448
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz448{}, expected)
	require.Equal(t, Fuzz448{}, actual)

	actual = Fuzz448{
		One: rando.Ints(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz449(t *testing.T) {
	var expected, actual Fuzz449
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz449{}, expected)
	require.Equal(t, Fuzz449{}, actual)

	actual = Fuzz449{
		One: rando.Ints(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz450(t *testing.T) {
	var expected, actual Fuzz450
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz450{}, expected)
	require.Equal(t, Fuzz450{}, actual)

	actual = Fuzz450{
		One: rando.Ints(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz451(t *testing.T) {
	var expected, actual Fuzz451
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz451{}, expected)
	require.Equal(t, Fuzz451{}, actual)

	actual = Fuzz451{
		One: rando.Ints(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz452(t *testing.T) {
	var expected, actual Fuzz452
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz452{}, expected)
	require.Equal(t, Fuzz452{}, actual)

	actual = Fuzz452{
		One: rando.Ints(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz453(t *testing.T) {
	var expected, actual Fuzz453
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz453{}, expected)
	require.Equal(t, Fuzz453{}, actual)

	actual = Fuzz453{
		One: rando.Ints(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz454(t *testing.T) {
	var expected, actual Fuzz454
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz454{}, expected)
	require.Equal(t, Fuzz454{}, actual)

	actual = Fuzz454{
		One: rando.Ints(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz455(t *testing.T) {
	var expected, actual Fuzz455
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz455{}, expected)
	require.Equal(t, Fuzz455{}, actual)

	actual = Fuzz455{
		One: rando.Ints(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz456(t *testing.T) {
	var expected, actual Fuzz456
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz456{}, expected)
	require.Equal(t, Fuzz456{}, actual)

	actual = Fuzz456{
		One: rando.Ints(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz457(t *testing.T) {
	var expected, actual Fuzz457
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz457{}, expected)
	require.Equal(t, Fuzz457{}, actual)

	actual = Fuzz457{
		One: rando.Ints(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz458(t *testing.T) {
	var expected, actual Fuzz458
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz458{}, expected)
	require.Equal(t, Fuzz458{}, actual)

	actual = Fuzz458{
		One: rando.Ints(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz459(t *testing.T) {
	var expected, actual Fuzz459
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz459{}, expected)
	require.Equal(t, Fuzz459{}, actual)

	actual = Fuzz459{
		One: rando.Ints(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz460(t *testing.T) {
	var expected, actual Fuzz460
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz460{}, expected)
	require.Equal(t, Fuzz460{}, actual)

	actual = Fuzz460{
		One: rando.Ints(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz461(t *testing.T) {
	var expected, actual Fuzz461
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz461{}, expected)
	require.Equal(t, Fuzz461{}, actual)

	actual = Fuzz461{
		One: rando.Ints(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz462(t *testing.T) {
	var expected, actual Fuzz462
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz462{}, expected)
	require.Equal(t, Fuzz462{}, actual)

	actual = Fuzz462{
		One: rando.Ints(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz463(t *testing.T) {
	var expected, actual Fuzz463
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz463{}, expected)
	require.Equal(t, Fuzz463{}, actual)

	actual = Fuzz463{
		One: rando.Ints(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz464(t *testing.T) {
	var expected, actual Fuzz464
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz464{}, expected)
	require.Equal(t, Fuzz464{}, actual)

	actual = Fuzz464{
		One: rando.Ints(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz465(t *testing.T) {
	var expected, actual Fuzz465
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz465{}, expected)
	require.Equal(t, Fuzz465{}, actual)

	actual = Fuzz465{
		One: rando.Ints(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz466(t *testing.T) {
	var expected, actual Fuzz466
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz466{}, expected)
	require.Equal(t, Fuzz466{}, actual)

	actual = Fuzz466{
		One: rando.Ints(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz467(t *testing.T) {
	var expected, actual Fuzz467
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz467{}, expected)
	require.Equal(t, Fuzz467{}, actual)

	actual = Fuzz467{
		One: rando.Ints(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz468(t *testing.T) {
	var expected, actual Fuzz468
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz468{}, expected)
	require.Equal(t, Fuzz468{}, actual)

	actual = Fuzz468{
		One: rando.Ints(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz469(t *testing.T) {
	var expected, actual Fuzz469
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz469{}, expected)
	require.Equal(t, Fuzz469{}, actual)

	actual = Fuzz469{
		One: rando.Ints(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz470(t *testing.T) {
	var expected, actual Fuzz470
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz470{}, expected)
	require.Equal(t, Fuzz470{}, actual)

	actual = Fuzz470{
		One: rando.Ints(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz471(t *testing.T) {
	var expected, actual Fuzz471
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz471{}, expected)
	require.Equal(t, Fuzz471{}, actual)

	actual = Fuzz471{
		One: rando.Ints(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz472(t *testing.T) {
	var expected, actual Fuzz472
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz472{}, expected)
	require.Equal(t, Fuzz472{}, actual)

	actual = Fuzz472{
		One: rando.Ints(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz473(t *testing.T) {
	var expected, actual Fuzz473
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz473{}, expected)
	require.Equal(t, Fuzz473{}, actual)

	actual = Fuzz473{
		One: rando.Ints(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz474(t *testing.T) {
	var expected, actual Fuzz474
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz474{}, expected)
	require.Equal(t, Fuzz474{}, actual)

	actual = Fuzz474{
		One: rando.Ints(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz475(t *testing.T) {
	var expected, actual Fuzz475
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz475{}, expected)
	require.Equal(t, Fuzz475{}, actual)

	actual = Fuzz475{
		One: rando.Ints(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz476(t *testing.T) {
	var expected, actual Fuzz476
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz476{}, expected)
	require.Equal(t, Fuzz476{}, actual)

	actual = Fuzz476{
		One: rando.Ints(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz477(t *testing.T) {
	var expected, actual Fuzz477
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz477{}, expected)
	require.Equal(t, Fuzz477{}, actual)

	actual = Fuzz477{
		One: rando.Ints(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz478(t *testing.T) {
	var expected, actual Fuzz478
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz478{}, expected)
	require.Equal(t, Fuzz478{}, actual)

	actual = Fuzz478{
		One: rando.Ints(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz479(t *testing.T) {
	var expected, actual Fuzz479
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz479{}, expected)
	require.Equal(t, Fuzz479{}, actual)

	actual = Fuzz479{
		One: rando.Ints(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz480(t *testing.T) {
	var expected, actual Fuzz480
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz480{}, expected)
	require.Equal(t, Fuzz480{}, actual)

	actual = Fuzz480{
		One: rando.Int8s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz481(t *testing.T) {
	var expected, actual Fuzz481
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz481{}, expected)
	require.Equal(t, Fuzz481{}, actual)

	actual = Fuzz481{
		One: rando.Int8s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz482(t *testing.T) {
	var expected, actual Fuzz482
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz482{}, expected)
	require.Equal(t, Fuzz482{}, actual)

	actual = Fuzz482{
		One: rando.Int8s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz483(t *testing.T) {
	var expected, actual Fuzz483
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz483{}, expected)
	require.Equal(t, Fuzz483{}, actual)

	actual = Fuzz483{
		One: rando.Int8s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz484(t *testing.T) {
	var expected, actual Fuzz484
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz484{}, expected)
	require.Equal(t, Fuzz484{}, actual)

	actual = Fuzz484{
		One: rando.Int8s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz485(t *testing.T) {
	var expected, actual Fuzz485
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz485{}, expected)
	require.Equal(t, Fuzz485{}, actual)

	actual = Fuzz485{
		One: rando.Int8s(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz486(t *testing.T) {
	var expected, actual Fuzz486
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz486{}, expected)
	require.Equal(t, Fuzz486{}, actual)

	actual = Fuzz486{
		One: rando.Int8s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz487(t *testing.T) {
	var expected, actual Fuzz487
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz487{}, expected)
	require.Equal(t, Fuzz487{}, actual)

	actual = Fuzz487{
		One: rando.Int8s(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz488(t *testing.T) {
	var expected, actual Fuzz488
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz488{}, expected)
	require.Equal(t, Fuzz488{}, actual)

	actual = Fuzz488{
		One: rando.Int8s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz489(t *testing.T) {
	var expected, actual Fuzz489
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz489{}, expected)
	require.Equal(t, Fuzz489{}, actual)

	actual = Fuzz489{
		One: rando.Int8s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz490(t *testing.T) {
	var expected, actual Fuzz490
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz490{}, expected)
	require.Equal(t, Fuzz490{}, actual)

	actual = Fuzz490{
		One: rando.Int8s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz491(t *testing.T) {
	var expected, actual Fuzz491
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz491{}, expected)
	require.Equal(t, Fuzz491{}, actual)

	actual = Fuzz491{
		One: rando.Int8s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz492(t *testing.T) {
	var expected, actual Fuzz492
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz492{}, expected)
	require.Equal(t, Fuzz492{}, actual)

	actual = Fuzz492{
		One: rando.Int8s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz493(t *testing.T) {
	var expected, actual Fuzz493
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz493{}, expected)
	require.Equal(t, Fuzz493{}, actual)

	actual = Fuzz493{
		One: rando.Int8s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz494(t *testing.T) {
	var expected, actual Fuzz494
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz494{}, expected)
	require.Equal(t, Fuzz494{}, actual)

	actual = Fuzz494{
		One: rando.Int8s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz495(t *testing.T) {
	var expected, actual Fuzz495
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz495{}, expected)
	require.Equal(t, Fuzz495{}, actual)

	actual = Fuzz495{
		One: rando.Int8s(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz496(t *testing.T) {
	var expected, actual Fuzz496
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz496{}, expected)
	require.Equal(t, Fuzz496{}, actual)

	actual = Fuzz496{
		One: rando.Int8s(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz497(t *testing.T) {
	var expected, actual Fuzz497
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz497{}, expected)
	require.Equal(t, Fuzz497{}, actual)

	actual = Fuzz497{
		One: rando.Int8s(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz498(t *testing.T) {
	var expected, actual Fuzz498
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz498{}, expected)
	require.Equal(t, Fuzz498{}, actual)

	actual = Fuzz498{
		One: rando.Int8s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz499(t *testing.T) {
	var expected, actual Fuzz499
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz499{}, expected)
	require.Equal(t, Fuzz499{}, actual)

	actual = Fuzz499{
		One: rando.Int8s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz500(t *testing.T) {
	var expected, actual Fuzz500
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz500{}, expected)
	require.Equal(t, Fuzz500{}, actual)

	actual = Fuzz500{
		One: rando.Int8s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz501(t *testing.T) {
	var expected, actual Fuzz501
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz501{}, expected)
	require.Equal(t, Fuzz501{}, actual)

	actual = Fuzz501{
		One: rando.Int8s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz502(t *testing.T) {
	var expected, actual Fuzz502
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz502{}, expected)
	require.Equal(t, Fuzz502{}, actual)

	actual = Fuzz502{
		One: rando.Int8s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz503(t *testing.T) {
	var expected, actual Fuzz503
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz503{}, expected)
	require.Equal(t, Fuzz503{}, actual)

	actual = Fuzz503{
		One: rando.Int8s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz504(t *testing.T) {
	var expected, actual Fuzz504
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz504{}, expected)
	require.Equal(t, Fuzz504{}, actual)

	actual = Fuzz504{
		One: rando.Int8s(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz505(t *testing.T) {
	var expected, actual Fuzz505
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz505{}, expected)
	require.Equal(t, Fuzz505{}, actual)

	actual = Fuzz505{
		One: rando.Int8s(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz506(t *testing.T) {
	var expected, actual Fuzz506
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz506{}, expected)
	require.Equal(t, Fuzz506{}, actual)

	actual = Fuzz506{
		One: rando.Int8s(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz507(t *testing.T) {
	var expected, actual Fuzz507
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz507{}, expected)
	require.Equal(t, Fuzz507{}, actual)

	actual = Fuzz507{
		One: rando.Int8s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz508(t *testing.T) {
	var expected, actual Fuzz508
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz508{}, expected)
	require.Equal(t, Fuzz508{}, actual)

	actual = Fuzz508{
		One: rando.Int8s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz509(t *testing.T) {
	var expected, actual Fuzz509
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz509{}, expected)
	require.Equal(t, Fuzz509{}, actual)

	actual = Fuzz509{
		One: rando.Int8s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz510(t *testing.T) {
	var expected, actual Fuzz510
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz510{}, expected)
	require.Equal(t, Fuzz510{}, actual)

	actual = Fuzz510{
		One: rando.Int8s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz511(t *testing.T) {
	var expected, actual Fuzz511
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz511{}, expected)
	require.Equal(t, Fuzz511{}, actual)

	actual = Fuzz511{
		One: rando.Int8s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz512(t *testing.T) {
	var expected, actual Fuzz512
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz512{}, expected)
	require.Equal(t, Fuzz512{}, actual)

	actual = Fuzz512{
		One: rando.Int16s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz513(t *testing.T) {
	var expected, actual Fuzz513
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz513{}, expected)
	require.Equal(t, Fuzz513{}, actual)

	actual = Fuzz513{
		One: rando.Int16s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz514(t *testing.T) {
	var expected, actual Fuzz514
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz514{}, expected)
	require.Equal(t, Fuzz514{}, actual)

	actual = Fuzz514{
		One: rando.Int16s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz515(t *testing.T) {
	var expected, actual Fuzz515
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz515{}, expected)
	require.Equal(t, Fuzz515{}, actual)

	actual = Fuzz515{
		One: rando.Int16s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz516(t *testing.T) {
	var expected, actual Fuzz516
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz516{}, expected)
	require.Equal(t, Fuzz516{}, actual)

	actual = Fuzz516{
		One: rando.Int16s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz517(t *testing.T) {
	var expected, actual Fuzz517
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz517{}, expected)
	require.Equal(t, Fuzz517{}, actual)

	actual = Fuzz517{
		One: rando.Int16s(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz518(t *testing.T) {
	var expected, actual Fuzz518
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz518{}, expected)
	require.Equal(t, Fuzz518{}, actual)

	actual = Fuzz518{
		One: rando.Int16s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz519(t *testing.T) {
	var expected, actual Fuzz519
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz519{}, expected)
	require.Equal(t, Fuzz519{}, actual)

	actual = Fuzz519{
		One: rando.Int16s(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz520(t *testing.T) {
	var expected, actual Fuzz520
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz520{}, expected)
	require.Equal(t, Fuzz520{}, actual)

	actual = Fuzz520{
		One: rando.Int16s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz521(t *testing.T) {
	var expected, actual Fuzz521
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz521{}, expected)
	require.Equal(t, Fuzz521{}, actual)

	actual = Fuzz521{
		One: rando.Int16s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz522(t *testing.T) {
	var expected, actual Fuzz522
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz522{}, expected)
	require.Equal(t, Fuzz522{}, actual)

	actual = Fuzz522{
		One: rando.Int16s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz523(t *testing.T) {
	var expected, actual Fuzz523
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz523{}, expected)
	require.Equal(t, Fuzz523{}, actual)

	actual = Fuzz523{
		One: rando.Int16s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz524(t *testing.T) {
	var expected, actual Fuzz524
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz524{}, expected)
	require.Equal(t, Fuzz524{}, actual)

	actual = Fuzz524{
		One: rando.Int16s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz525(t *testing.T) {
	var expected, actual Fuzz525
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz525{}, expected)
	require.Equal(t, Fuzz525{}, actual)

	actual = Fuzz525{
		One: rando.Int16s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz526(t *testing.T) {
	var expected, actual Fuzz526
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz526{}, expected)
	require.Equal(t, Fuzz526{}, actual)

	actual = Fuzz526{
		One: rando.Int16s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz527(t *testing.T) {
	var expected, actual Fuzz527
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz527{}, expected)
	require.Equal(t, Fuzz527{}, actual)

	actual = Fuzz527{
		One: rando.Int16s(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz528(t *testing.T) {
	var expected, actual Fuzz528
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz528{}, expected)
	require.Equal(t, Fuzz528{}, actual)

	actual = Fuzz528{
		One: rando.Int16s(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz529(t *testing.T) {
	var expected, actual Fuzz529
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz529{}, expected)
	require.Equal(t, Fuzz529{}, actual)

	actual = Fuzz529{
		One: rando.Int16s(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz530(t *testing.T) {
	var expected, actual Fuzz530
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz530{}, expected)
	require.Equal(t, Fuzz530{}, actual)

	actual = Fuzz530{
		One: rando.Int16s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz531(t *testing.T) {
	var expected, actual Fuzz531
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz531{}, expected)
	require.Equal(t, Fuzz531{}, actual)

	actual = Fuzz531{
		One: rando.Int16s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz532(t *testing.T) {
	var expected, actual Fuzz532
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz532{}, expected)
	require.Equal(t, Fuzz532{}, actual)

	actual = Fuzz532{
		One: rando.Int16s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz533(t *testing.T) {
	var expected, actual Fuzz533
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz533{}, expected)
	require.Equal(t, Fuzz533{}, actual)

	actual = Fuzz533{
		One: rando.Int16s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz534(t *testing.T) {
	var expected, actual Fuzz534
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz534{}, expected)
	require.Equal(t, Fuzz534{}, actual)

	actual = Fuzz534{
		One: rando.Int16s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz535(t *testing.T) {
	var expected, actual Fuzz535
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz535{}, expected)
	require.Equal(t, Fuzz535{}, actual)

	actual = Fuzz535{
		One: rando.Int16s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz536(t *testing.T) {
	var expected, actual Fuzz536
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz536{}, expected)
	require.Equal(t, Fuzz536{}, actual)

	actual = Fuzz536{
		One: rando.Int16s(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz537(t *testing.T) {
	var expected, actual Fuzz537
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz537{}, expected)
	require.Equal(t, Fuzz537{}, actual)

	actual = Fuzz537{
		One: rando.Int16s(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz538(t *testing.T) {
	var expected, actual Fuzz538
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz538{}, expected)
	require.Equal(t, Fuzz538{}, actual)

	actual = Fuzz538{
		One: rando.Int16s(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz539(t *testing.T) {
	var expected, actual Fuzz539
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz539{}, expected)
	require.Equal(t, Fuzz539{}, actual)

	actual = Fuzz539{
		One: rando.Int16s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz540(t *testing.T) {
	var expected, actual Fuzz540
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz540{}, expected)
	require.Equal(t, Fuzz540{}, actual)

	actual = Fuzz540{
		One: rando.Int16s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz541(t *testing.T) {
	var expected, actual Fuzz541
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz541{}, expected)
	require.Equal(t, Fuzz541{}, actual)

	actual = Fuzz541{
		One: rando.Int16s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz542(t *testing.T) {
	var expected, actual Fuzz542
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz542{}, expected)
	require.Equal(t, Fuzz542{}, actual)

	actual = Fuzz542{
		One: rando.Int16s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz543(t *testing.T) {
	var expected, actual Fuzz543
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz543{}, expected)
	require.Equal(t, Fuzz543{}, actual)

	actual = Fuzz543{
		One: rando.Int16s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz544(t *testing.T) {
	var expected, actual Fuzz544
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz544{}, expected)
	require.Equal(t, Fuzz544{}, actual)

	actual = Fuzz544{
		One: rando.Int32s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz545(t *testing.T) {
	var expected, actual Fuzz545
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz545{}, expected)
	require.Equal(t, Fuzz545{}, actual)

	actual = Fuzz545{
		One: rando.Int32s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz546(t *testing.T) {
	var expected, actual Fuzz546
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz546{}, expected)
	require.Equal(t, Fuzz546{}, actual)

	actual = Fuzz546{
		One: rando.Int32s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz547(t *testing.T) {
	var expected, actual Fuzz547
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz547{}, expected)
	require.Equal(t, Fuzz547{}, actual)

	actual = Fuzz547{
		One: rando.Int32s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz548(t *testing.T) {
	var expected, actual Fuzz548
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz548{}, expected)
	require.Equal(t, Fuzz548{}, actual)

	actual = Fuzz548{
		One: rando.Int32s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz549(t *testing.T) {
	var expected, actual Fuzz549
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz549{}, expected)
	require.Equal(t, Fuzz549{}, actual)

	actual = Fuzz549{
		One: rando.Int32s(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz550(t *testing.T) {
	var expected, actual Fuzz550
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz550{}, expected)
	require.Equal(t, Fuzz550{}, actual)

	actual = Fuzz550{
		One: rando.Int32s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz551(t *testing.T) {
	var expected, actual Fuzz551
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz551{}, expected)
	require.Equal(t, Fuzz551{}, actual)

	actual = Fuzz551{
		One: rando.Int32s(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz552(t *testing.T) {
	var expected, actual Fuzz552
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz552{}, expected)
	require.Equal(t, Fuzz552{}, actual)

	actual = Fuzz552{
		One: rando.Int32s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz553(t *testing.T) {
	var expected, actual Fuzz553
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz553{}, expected)
	require.Equal(t, Fuzz553{}, actual)

	actual = Fuzz553{
		One: rando.Int32s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz554(t *testing.T) {
	var expected, actual Fuzz554
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz554{}, expected)
	require.Equal(t, Fuzz554{}, actual)

	actual = Fuzz554{
		One: rando.Int32s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz555(t *testing.T) {
	var expected, actual Fuzz555
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz555{}, expected)
	require.Equal(t, Fuzz555{}, actual)

	actual = Fuzz555{
		One: rando.Int32s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz556(t *testing.T) {
	var expected, actual Fuzz556
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz556{}, expected)
	require.Equal(t, Fuzz556{}, actual)

	actual = Fuzz556{
		One: rando.Int32s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz557(t *testing.T) {
	var expected, actual Fuzz557
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz557{}, expected)
	require.Equal(t, Fuzz557{}, actual)

	actual = Fuzz557{
		One: rando.Int32s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz558(t *testing.T) {
	var expected, actual Fuzz558
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz558{}, expected)
	require.Equal(t, Fuzz558{}, actual)

	actual = Fuzz558{
		One: rando.Int32s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz559(t *testing.T) {
	var expected, actual Fuzz559
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz559{}, expected)
	require.Equal(t, Fuzz559{}, actual)

	actual = Fuzz559{
		One: rando.Int32s(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz560(t *testing.T) {
	var expected, actual Fuzz560
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz560{}, expected)
	require.Equal(t, Fuzz560{}, actual)

	actual = Fuzz560{
		One: rando.Int32s(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz561(t *testing.T) {
	var expected, actual Fuzz561
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz561{}, expected)
	require.Equal(t, Fuzz561{}, actual)

	actual = Fuzz561{
		One: rando.Int32s(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz562(t *testing.T) {
	var expected, actual Fuzz562
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz562{}, expected)
	require.Equal(t, Fuzz562{}, actual)

	actual = Fuzz562{
		One: rando.Int32s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz563(t *testing.T) {
	var expected, actual Fuzz563
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz563{}, expected)
	require.Equal(t, Fuzz563{}, actual)

	actual = Fuzz563{
		One: rando.Int32s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz564(t *testing.T) {
	var expected, actual Fuzz564
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz564{}, expected)
	require.Equal(t, Fuzz564{}, actual)

	actual = Fuzz564{
		One: rando.Int32s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz565(t *testing.T) {
	var expected, actual Fuzz565
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz565{}, expected)
	require.Equal(t, Fuzz565{}, actual)

	actual = Fuzz565{
		One: rando.Int32s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz566(t *testing.T) {
	var expected, actual Fuzz566
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz566{}, expected)
	require.Equal(t, Fuzz566{}, actual)

	actual = Fuzz566{
		One: rando.Int32s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz567(t *testing.T) {
	var expected, actual Fuzz567
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz567{}, expected)
	require.Equal(t, Fuzz567{}, actual)

	actual = Fuzz567{
		One: rando.Int32s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz568(t *testing.T) {
	var expected, actual Fuzz568
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz568{}, expected)
	require.Equal(t, Fuzz568{}, actual)

	actual = Fuzz568{
		One: rando.Int32s(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz569(t *testing.T) {
	var expected, actual Fuzz569
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz569{}, expected)
	require.Equal(t, Fuzz569{}, actual)

	actual = Fuzz569{
		One: rando.Int32s(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz570(t *testing.T) {
	var expected, actual Fuzz570
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz570{}, expected)
	require.Equal(t, Fuzz570{}, actual)

	actual = Fuzz570{
		One: rando.Int32s(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz571(t *testing.T) {
	var expected, actual Fuzz571
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz571{}, expected)
	require.Equal(t, Fuzz571{}, actual)

	actual = Fuzz571{
		One: rando.Int32s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz572(t *testing.T) {
	var expected, actual Fuzz572
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz572{}, expected)
	require.Equal(t, Fuzz572{}, actual)

	actual = Fuzz572{
		One: rando.Int32s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz573(t *testing.T) {
	var expected, actual Fuzz573
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz573{}, expected)
	require.Equal(t, Fuzz573{}, actual)

	actual = Fuzz573{
		One: rando.Int32s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz574(t *testing.T) {
	var expected, actual Fuzz574
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz574{}, expected)
	require.Equal(t, Fuzz574{}, actual)

	actual = Fuzz574{
		One: rando.Int32s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz575(t *testing.T) {
	var expected, actual Fuzz575
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz575{}, expected)
	require.Equal(t, Fuzz575{}, actual)

	actual = Fuzz575{
		One: rando.Int32s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz576(t *testing.T) {
	var expected, actual Fuzz576
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz576{}, expected)
	require.Equal(t, Fuzz576{}, actual)

	actual = Fuzz576{
		One: rando.Int64s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz577(t *testing.T) {
	var expected, actual Fuzz577
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz577{}, expected)
	require.Equal(t, Fuzz577{}, actual)

	actual = Fuzz577{
		One: rando.Int64s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz578(t *testing.T) {
	var expected, actual Fuzz578
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz578{}, expected)
	require.Equal(t, Fuzz578{}, actual)

	actual = Fuzz578{
		One: rando.Int64s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz579(t *testing.T) {
	var expected, actual Fuzz579
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz579{}, expected)
	require.Equal(t, Fuzz579{}, actual)

	actual = Fuzz579{
		One: rando.Int64s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz580(t *testing.T) {
	var expected, actual Fuzz580
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz580{}, expected)
	require.Equal(t, Fuzz580{}, actual)

	actual = Fuzz580{
		One: rando.Int64s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz581(t *testing.T) {
	var expected, actual Fuzz581
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz581{}, expected)
	require.Equal(t, Fuzz581{}, actual)

	actual = Fuzz581{
		One: rando.Int64s(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz582(t *testing.T) {
	var expected, actual Fuzz582
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz582{}, expected)
	require.Equal(t, Fuzz582{}, actual)

	actual = Fuzz582{
		One: rando.Int64s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz583(t *testing.T) {
	var expected, actual Fuzz583
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz583{}, expected)
	require.Equal(t, Fuzz583{}, actual)

	actual = Fuzz583{
		One: rando.Int64s(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz584(t *testing.T) {
	var expected, actual Fuzz584
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz584{}, expected)
	require.Equal(t, Fuzz584{}, actual)

	actual = Fuzz584{
		One: rando.Int64s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz585(t *testing.T) {
	var expected, actual Fuzz585
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz585{}, expected)
	require.Equal(t, Fuzz585{}, actual)

	actual = Fuzz585{
		One: rando.Int64s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz586(t *testing.T) {
	var expected, actual Fuzz586
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz586{}, expected)
	require.Equal(t, Fuzz586{}, actual)

	actual = Fuzz586{
		One: rando.Int64s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz587(t *testing.T) {
	var expected, actual Fuzz587
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz587{}, expected)
	require.Equal(t, Fuzz587{}, actual)

	actual = Fuzz587{
		One: rando.Int64s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz588(t *testing.T) {
	var expected, actual Fuzz588
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz588{}, expected)
	require.Equal(t, Fuzz588{}, actual)

	actual = Fuzz588{
		One: rando.Int64s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz589(t *testing.T) {
	var expected, actual Fuzz589
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz589{}, expected)
	require.Equal(t, Fuzz589{}, actual)

	actual = Fuzz589{
		One: rando.Int64s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz590(t *testing.T) {
	var expected, actual Fuzz590
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz590{}, expected)
	require.Equal(t, Fuzz590{}, actual)

	actual = Fuzz590{
		One: rando.Int64s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz591(t *testing.T) {
	var expected, actual Fuzz591
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz591{}, expected)
	require.Equal(t, Fuzz591{}, actual)

	actual = Fuzz591{
		One: rando.Int64s(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz592(t *testing.T) {
	var expected, actual Fuzz592
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz592{}, expected)
	require.Equal(t, Fuzz592{}, actual)

	actual = Fuzz592{
		One: rando.Int64s(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz593(t *testing.T) {
	var expected, actual Fuzz593
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz593{}, expected)
	require.Equal(t, Fuzz593{}, actual)

	actual = Fuzz593{
		One: rando.Int64s(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz594(t *testing.T) {
	var expected, actual Fuzz594
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz594{}, expected)
	require.Equal(t, Fuzz594{}, actual)

	actual = Fuzz594{
		One: rando.Int64s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz595(t *testing.T) {
	var expected, actual Fuzz595
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz595{}, expected)
	require.Equal(t, Fuzz595{}, actual)

	actual = Fuzz595{
		One: rando.Int64s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz596(t *testing.T) {
	var expected, actual Fuzz596
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz596{}, expected)
	require.Equal(t, Fuzz596{}, actual)

	actual = Fuzz596{
		One: rando.Int64s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz597(t *testing.T) {
	var expected, actual Fuzz597
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz597{}, expected)
	require.Equal(t, Fuzz597{}, actual)

	actual = Fuzz597{
		One: rando.Int64s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz598(t *testing.T) {
	var expected, actual Fuzz598
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz598{}, expected)
	require.Equal(t, Fuzz598{}, actual)

	actual = Fuzz598{
		One: rando.Int64s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz599(t *testing.T) {
	var expected, actual Fuzz599
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz599{}, expected)
	require.Equal(t, Fuzz599{}, actual)

	actual = Fuzz599{
		One: rando.Int64s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz600(t *testing.T) {
	var expected, actual Fuzz600
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz600{}, expected)
	require.Equal(t, Fuzz600{}, actual)

	actual = Fuzz600{
		One: rando.Int64s(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz601(t *testing.T) {
	var expected, actual Fuzz601
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz601{}, expected)
	require.Equal(t, Fuzz601{}, actual)

	actual = Fuzz601{
		One: rando.Int64s(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz602(t *testing.T) {
	var expected, actual Fuzz602
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz602{}, expected)
	require.Equal(t, Fuzz602{}, actual)

	actual = Fuzz602{
		One: rando.Int64s(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz603(t *testing.T) {
	var expected, actual Fuzz603
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz603{}, expected)
	require.Equal(t, Fuzz603{}, actual)

	actual = Fuzz603{
		One: rando.Int64s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz604(t *testing.T) {
	var expected, actual Fuzz604
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz604{}, expected)
	require.Equal(t, Fuzz604{}, actual)

	actual = Fuzz604{
		One: rando.Int64s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz605(t *testing.T) {
	var expected, actual Fuzz605
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz605{}, expected)
	require.Equal(t, Fuzz605{}, actual)

	actual = Fuzz605{
		One: rando.Int64s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz606(t *testing.T) {
	var expected, actual Fuzz606
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz606{}, expected)
	require.Equal(t, Fuzz606{}, actual)

	actual = Fuzz606{
		One: rando.Int64s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz607(t *testing.T) {
	var expected, actual Fuzz607
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz607{}, expected)
	require.Equal(t, Fuzz607{}, actual)

	actual = Fuzz607{
		One: rando.Int64s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz608(t *testing.T) {
	var expected, actual Fuzz608
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz608{}, expected)
	require.Equal(t, Fuzz608{}, actual)

	actual = Fuzz608{
		One: rando.Uint(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz609(t *testing.T) {
	var expected, actual Fuzz609
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz609{}, expected)
	require.Equal(t, Fuzz609{}, actual)

	actual = Fuzz609{
		One: rando.Uint(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz610(t *testing.T) {
	var expected, actual Fuzz610
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz610{}, expected)
	require.Equal(t, Fuzz610{}, actual)

	actual = Fuzz610{
		One: rando.Uint(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz611(t *testing.T) {
	var expected, actual Fuzz611
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz611{}, expected)
	require.Equal(t, Fuzz611{}, actual)

	actual = Fuzz611{
		One: rando.Uint(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz612(t *testing.T) {
	var expected, actual Fuzz612
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz612{}, expected)
	require.Equal(t, Fuzz612{}, actual)

	actual = Fuzz612{
		One: rando.Uint(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz613(t *testing.T) {
	var expected, actual Fuzz613
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz613{}, expected)
	require.Equal(t, Fuzz613{}, actual)

	actual = Fuzz613{
		One: rando.Uint(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz614(t *testing.T) {
	var expected, actual Fuzz614
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz614{}, expected)
	require.Equal(t, Fuzz614{}, actual)

	actual = Fuzz614{
		One: rando.Uint(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz615(t *testing.T) {
	var expected, actual Fuzz615
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz615{}, expected)
	require.Equal(t, Fuzz615{}, actual)

	actual = Fuzz615{
		One: rando.Uint(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz616(t *testing.T) {
	var expected, actual Fuzz616
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz616{}, expected)
	require.Equal(t, Fuzz616{}, actual)

	actual = Fuzz616{
		One: rando.Uint(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz617(t *testing.T) {
	var expected, actual Fuzz617
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz617{}, expected)
	require.Equal(t, Fuzz617{}, actual)

	actual = Fuzz617{
		One: rando.Uint(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz618(t *testing.T) {
	var expected, actual Fuzz618
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz618{}, expected)
	require.Equal(t, Fuzz618{}, actual)

	actual = Fuzz618{
		One: rando.Uint(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz619(t *testing.T) {
	var expected, actual Fuzz619
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz619{}, expected)
	require.Equal(t, Fuzz619{}, actual)

	actual = Fuzz619{
		One: rando.Uint(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz620(t *testing.T) {
	var expected, actual Fuzz620
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz620{}, expected)
	require.Equal(t, Fuzz620{}, actual)

	actual = Fuzz620{
		One: rando.Uint(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz621(t *testing.T) {
	var expected, actual Fuzz621
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz621{}, expected)
	require.Equal(t, Fuzz621{}, actual)

	actual = Fuzz621{
		One: rando.Uint(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz622(t *testing.T) {
	var expected, actual Fuzz622
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz622{}, expected)
	require.Equal(t, Fuzz622{}, actual)

	actual = Fuzz622{
		One: rando.Uint(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz623(t *testing.T) {
	var expected, actual Fuzz623
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz623{}, expected)
	require.Equal(t, Fuzz623{}, actual)

	actual = Fuzz623{
		One: rando.Uint(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz624(t *testing.T) {
	var expected, actual Fuzz624
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz624{}, expected)
	require.Equal(t, Fuzz624{}, actual)

	actual = Fuzz624{
		One: rando.Uint(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz625(t *testing.T) {
	var expected, actual Fuzz625
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz625{}, expected)
	require.Equal(t, Fuzz625{}, actual)

	actual = Fuzz625{
		One: rando.Uint(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz626(t *testing.T) {
	var expected, actual Fuzz626
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz626{}, expected)
	require.Equal(t, Fuzz626{}, actual)

	actual = Fuzz626{
		One: rando.Uint(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz627(t *testing.T) {
	var expected, actual Fuzz627
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz627{}, expected)
	require.Equal(t, Fuzz627{}, actual)

	actual = Fuzz627{
		One: rando.Uint(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz628(t *testing.T) {
	var expected, actual Fuzz628
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz628{}, expected)
	require.Equal(t, Fuzz628{}, actual)

	actual = Fuzz628{
		One: rando.Uint(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz629(t *testing.T) {
	var expected, actual Fuzz629
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz629{}, expected)
	require.Equal(t, Fuzz629{}, actual)

	actual = Fuzz629{
		One: rando.Uint(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz630(t *testing.T) {
	var expected, actual Fuzz630
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz630{}, expected)
	require.Equal(t, Fuzz630{}, actual)

	actual = Fuzz630{
		One: rando.Uint(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz631(t *testing.T) {
	var expected, actual Fuzz631
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz631{}, expected)
	require.Equal(t, Fuzz631{}, actual)

	actual = Fuzz631{
		One: rando.Uint(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz632(t *testing.T) {
	var expected, actual Fuzz632
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz632{}, expected)
	require.Equal(t, Fuzz632{}, actual)

	actual = Fuzz632{
		One: rando.Uint(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz633(t *testing.T) {
	var expected, actual Fuzz633
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz633{}, expected)
	require.Equal(t, Fuzz633{}, actual)

	actual = Fuzz633{
		One: rando.Uint(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz634(t *testing.T) {
	var expected, actual Fuzz634
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz634{}, expected)
	require.Equal(t, Fuzz634{}, actual)

	actual = Fuzz634{
		One: rando.Uint(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz635(t *testing.T) {
	var expected, actual Fuzz635
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz635{}, expected)
	require.Equal(t, Fuzz635{}, actual)

	actual = Fuzz635{
		One: rando.Uint(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz636(t *testing.T) {
	var expected, actual Fuzz636
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz636{}, expected)
	require.Equal(t, Fuzz636{}, actual)

	actual = Fuzz636{
		One: rando.Uint(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz637(t *testing.T) {
	var expected, actual Fuzz637
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz637{}, expected)
	require.Equal(t, Fuzz637{}, actual)

	actual = Fuzz637{
		One: rando.Uint(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz638(t *testing.T) {
	var expected, actual Fuzz638
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz638{}, expected)
	require.Equal(t, Fuzz638{}, actual)

	actual = Fuzz638{
		One: rando.Uint(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz639(t *testing.T) {
	var expected, actual Fuzz639
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz639{}, expected)
	require.Equal(t, Fuzz639{}, actual)

	actual = Fuzz639{
		One: rando.Uint(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz640(t *testing.T) {
	var expected, actual Fuzz640
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz640{}, expected)
	require.Equal(t, Fuzz640{}, actual)

	actual = Fuzz640{
		One: rando.Uint8(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz641(t *testing.T) {
	var expected, actual Fuzz641
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz641{}, expected)
	require.Equal(t, Fuzz641{}, actual)

	actual = Fuzz641{
		One: rando.Uint8(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz642(t *testing.T) {
	var expected, actual Fuzz642
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz642{}, expected)
	require.Equal(t, Fuzz642{}, actual)

	actual = Fuzz642{
		One: rando.Uint8(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz643(t *testing.T) {
	var expected, actual Fuzz643
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz643{}, expected)
	require.Equal(t, Fuzz643{}, actual)

	actual = Fuzz643{
		One: rando.Uint8(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz644(t *testing.T) {
	var expected, actual Fuzz644
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz644{}, expected)
	require.Equal(t, Fuzz644{}, actual)

	actual = Fuzz644{
		One: rando.Uint8(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz645(t *testing.T) {
	var expected, actual Fuzz645
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz645{}, expected)
	require.Equal(t, Fuzz645{}, actual)

	actual = Fuzz645{
		One: rando.Uint8(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz646(t *testing.T) {
	var expected, actual Fuzz646
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz646{}, expected)
	require.Equal(t, Fuzz646{}, actual)

	actual = Fuzz646{
		One: rando.Uint8(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz647(t *testing.T) {
	var expected, actual Fuzz647
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz647{}, expected)
	require.Equal(t, Fuzz647{}, actual)

	actual = Fuzz647{
		One: rando.Uint8(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz648(t *testing.T) {
	var expected, actual Fuzz648
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz648{}, expected)
	require.Equal(t, Fuzz648{}, actual)

	actual = Fuzz648{
		One: rando.Uint8(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz649(t *testing.T) {
	var expected, actual Fuzz649
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz649{}, expected)
	require.Equal(t, Fuzz649{}, actual)

	actual = Fuzz649{
		One: rando.Uint8(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz650(t *testing.T) {
	var expected, actual Fuzz650
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz650{}, expected)
	require.Equal(t, Fuzz650{}, actual)

	actual = Fuzz650{
		One: rando.Uint8(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz651(t *testing.T) {
	var expected, actual Fuzz651
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz651{}, expected)
	require.Equal(t, Fuzz651{}, actual)

	actual = Fuzz651{
		One: rando.Uint8(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz652(t *testing.T) {
	var expected, actual Fuzz652
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz652{}, expected)
	require.Equal(t, Fuzz652{}, actual)

	actual = Fuzz652{
		One: rando.Uint8(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz653(t *testing.T) {
	var expected, actual Fuzz653
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz653{}, expected)
	require.Equal(t, Fuzz653{}, actual)

	actual = Fuzz653{
		One: rando.Uint8(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz654(t *testing.T) {
	var expected, actual Fuzz654
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz654{}, expected)
	require.Equal(t, Fuzz654{}, actual)

	actual = Fuzz654{
		One: rando.Uint8(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz655(t *testing.T) {
	var expected, actual Fuzz655
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz655{}, expected)
	require.Equal(t, Fuzz655{}, actual)

	actual = Fuzz655{
		One: rando.Uint8(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz656(t *testing.T) {
	var expected, actual Fuzz656
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz656{}, expected)
	require.Equal(t, Fuzz656{}, actual)

	actual = Fuzz656{
		One: rando.Uint8(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz657(t *testing.T) {
	var expected, actual Fuzz657
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz657{}, expected)
	require.Equal(t, Fuzz657{}, actual)

	actual = Fuzz657{
		One: rando.Uint8(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz658(t *testing.T) {
	var expected, actual Fuzz658
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz658{}, expected)
	require.Equal(t, Fuzz658{}, actual)

	actual = Fuzz658{
		One: rando.Uint8(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz659(t *testing.T) {
	var expected, actual Fuzz659
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz659{}, expected)
	require.Equal(t, Fuzz659{}, actual)

	actual = Fuzz659{
		One: rando.Uint8(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz660(t *testing.T) {
	var expected, actual Fuzz660
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz660{}, expected)
	require.Equal(t, Fuzz660{}, actual)

	actual = Fuzz660{
		One: rando.Uint8(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz661(t *testing.T) {
	var expected, actual Fuzz661
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz661{}, expected)
	require.Equal(t, Fuzz661{}, actual)

	actual = Fuzz661{
		One: rando.Uint8(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz662(t *testing.T) {
	var expected, actual Fuzz662
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz662{}, expected)
	require.Equal(t, Fuzz662{}, actual)

	actual = Fuzz662{
		One: rando.Uint8(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz663(t *testing.T) {
	var expected, actual Fuzz663
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz663{}, expected)
	require.Equal(t, Fuzz663{}, actual)

	actual = Fuzz663{
		One: rando.Uint8(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz664(t *testing.T) {
	var expected, actual Fuzz664
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz664{}, expected)
	require.Equal(t, Fuzz664{}, actual)

	actual = Fuzz664{
		One: rando.Uint8(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz665(t *testing.T) {
	var expected, actual Fuzz665
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz665{}, expected)
	require.Equal(t, Fuzz665{}, actual)

	actual = Fuzz665{
		One: rando.Uint8(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz666(t *testing.T) {
	var expected, actual Fuzz666
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz666{}, expected)
	require.Equal(t, Fuzz666{}, actual)

	actual = Fuzz666{
		One: rando.Uint8(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz667(t *testing.T) {
	var expected, actual Fuzz667
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz667{}, expected)
	require.Equal(t, Fuzz667{}, actual)

	actual = Fuzz667{
		One: rando.Uint8(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz668(t *testing.T) {
	var expected, actual Fuzz668
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz668{}, expected)
	require.Equal(t, Fuzz668{}, actual)

	actual = Fuzz668{
		One: rando.Uint8(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz669(t *testing.T) {
	var expected, actual Fuzz669
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz669{}, expected)
	require.Equal(t, Fuzz669{}, actual)

	actual = Fuzz669{
		One: rando.Uint8(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz670(t *testing.T) {
	var expected, actual Fuzz670
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz670{}, expected)
	require.Equal(t, Fuzz670{}, actual)

	actual = Fuzz670{
		One: rando.Uint8(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz671(t *testing.T) {
	var expected, actual Fuzz671
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz671{}, expected)
	require.Equal(t, Fuzz671{}, actual)

	actual = Fuzz671{
		One: rando.Uint8(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz672(t *testing.T) {
	var expected, actual Fuzz672
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz672{}, expected)
	require.Equal(t, Fuzz672{}, actual)

	actual = Fuzz672{
		One: rando.Uint16(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz673(t *testing.T) {
	var expected, actual Fuzz673
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz673{}, expected)
	require.Equal(t, Fuzz673{}, actual)

	actual = Fuzz673{
		One: rando.Uint16(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz674(t *testing.T) {
	var expected, actual Fuzz674
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz674{}, expected)
	require.Equal(t, Fuzz674{}, actual)

	actual = Fuzz674{
		One: rando.Uint16(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz675(t *testing.T) {
	var expected, actual Fuzz675
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz675{}, expected)
	require.Equal(t, Fuzz675{}, actual)

	actual = Fuzz675{
		One: rando.Uint16(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz676(t *testing.T) {
	var expected, actual Fuzz676
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz676{}, expected)
	require.Equal(t, Fuzz676{}, actual)

	actual = Fuzz676{
		One: rando.Uint16(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz677(t *testing.T) {
	var expected, actual Fuzz677
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz677{}, expected)
	require.Equal(t, Fuzz677{}, actual)

	actual = Fuzz677{
		One: rando.Uint16(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz678(t *testing.T) {
	var expected, actual Fuzz678
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz678{}, expected)
	require.Equal(t, Fuzz678{}, actual)

	actual = Fuzz678{
		One: rando.Uint16(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz679(t *testing.T) {
	var expected, actual Fuzz679
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz679{}, expected)
	require.Equal(t, Fuzz679{}, actual)

	actual = Fuzz679{
		One: rando.Uint16(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz680(t *testing.T) {
	var expected, actual Fuzz680
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz680{}, expected)
	require.Equal(t, Fuzz680{}, actual)

	actual = Fuzz680{
		One: rando.Uint16(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz681(t *testing.T) {
	var expected, actual Fuzz681
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz681{}, expected)
	require.Equal(t, Fuzz681{}, actual)

	actual = Fuzz681{
		One: rando.Uint16(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz682(t *testing.T) {
	var expected, actual Fuzz682
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz682{}, expected)
	require.Equal(t, Fuzz682{}, actual)

	actual = Fuzz682{
		One: rando.Uint16(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz683(t *testing.T) {
	var expected, actual Fuzz683
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz683{}, expected)
	require.Equal(t, Fuzz683{}, actual)

	actual = Fuzz683{
		One: rando.Uint16(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz684(t *testing.T) {
	var expected, actual Fuzz684
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz684{}, expected)
	require.Equal(t, Fuzz684{}, actual)

	actual = Fuzz684{
		One: rando.Uint16(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz685(t *testing.T) {
	var expected, actual Fuzz685
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz685{}, expected)
	require.Equal(t, Fuzz685{}, actual)

	actual = Fuzz685{
		One: rando.Uint16(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz686(t *testing.T) {
	var expected, actual Fuzz686
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz686{}, expected)
	require.Equal(t, Fuzz686{}, actual)

	actual = Fuzz686{
		One: rando.Uint16(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz687(t *testing.T) {
	var expected, actual Fuzz687
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz687{}, expected)
	require.Equal(t, Fuzz687{}, actual)

	actual = Fuzz687{
		One: rando.Uint16(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz688(t *testing.T) {
	var expected, actual Fuzz688
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz688{}, expected)
	require.Equal(t, Fuzz688{}, actual)

	actual = Fuzz688{
		One: rando.Uint16(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz689(t *testing.T) {
	var expected, actual Fuzz689
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz689{}, expected)
	require.Equal(t, Fuzz689{}, actual)

	actual = Fuzz689{
		One: rando.Uint16(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz690(t *testing.T) {
	var expected, actual Fuzz690
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz690{}, expected)
	require.Equal(t, Fuzz690{}, actual)

	actual = Fuzz690{
		One: rando.Uint16(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz691(t *testing.T) {
	var expected, actual Fuzz691
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz691{}, expected)
	require.Equal(t, Fuzz691{}, actual)

	actual = Fuzz691{
		One: rando.Uint16(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz692(t *testing.T) {
	var expected, actual Fuzz692
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz692{}, expected)
	require.Equal(t, Fuzz692{}, actual)

	actual = Fuzz692{
		One: rando.Uint16(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz693(t *testing.T) {
	var expected, actual Fuzz693
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz693{}, expected)
	require.Equal(t, Fuzz693{}, actual)

	actual = Fuzz693{
		One: rando.Uint16(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz694(t *testing.T) {
	var expected, actual Fuzz694
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz694{}, expected)
	require.Equal(t, Fuzz694{}, actual)

	actual = Fuzz694{
		One: rando.Uint16(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz695(t *testing.T) {
	var expected, actual Fuzz695
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz695{}, expected)
	require.Equal(t, Fuzz695{}, actual)

	actual = Fuzz695{
		One: rando.Uint16(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz696(t *testing.T) {
	var expected, actual Fuzz696
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz696{}, expected)
	require.Equal(t, Fuzz696{}, actual)

	actual = Fuzz696{
		One: rando.Uint16(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz697(t *testing.T) {
	var expected, actual Fuzz697
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz697{}, expected)
	require.Equal(t, Fuzz697{}, actual)

	actual = Fuzz697{
		One: rando.Uint16(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz698(t *testing.T) {
	var expected, actual Fuzz698
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz698{}, expected)
	require.Equal(t, Fuzz698{}, actual)

	actual = Fuzz698{
		One: rando.Uint16(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz699(t *testing.T) {
	var expected, actual Fuzz699
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz699{}, expected)
	require.Equal(t, Fuzz699{}, actual)

	actual = Fuzz699{
		One: rando.Uint16(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz700(t *testing.T) {
	var expected, actual Fuzz700
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz700{}, expected)
	require.Equal(t, Fuzz700{}, actual)

	actual = Fuzz700{
		One: rando.Uint16(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz701(t *testing.T) {
	var expected, actual Fuzz701
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz701{}, expected)
	require.Equal(t, Fuzz701{}, actual)

	actual = Fuzz701{
		One: rando.Uint16(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz702(t *testing.T) {
	var expected, actual Fuzz702
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz702{}, expected)
	require.Equal(t, Fuzz702{}, actual)

	actual = Fuzz702{
		One: rando.Uint16(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz703(t *testing.T) {
	var expected, actual Fuzz703
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz703{}, expected)
	require.Equal(t, Fuzz703{}, actual)

	actual = Fuzz703{
		One: rando.Uint16(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz704(t *testing.T) {
	var expected, actual Fuzz704
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz704{}, expected)
	require.Equal(t, Fuzz704{}, actual)

	actual = Fuzz704{
		One: rando.Uint32(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz705(t *testing.T) {
	var expected, actual Fuzz705
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz705{}, expected)
	require.Equal(t, Fuzz705{}, actual)

	actual = Fuzz705{
		One: rando.Uint32(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz706(t *testing.T) {
	var expected, actual Fuzz706
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz706{}, expected)
	require.Equal(t, Fuzz706{}, actual)

	actual = Fuzz706{
		One: rando.Uint32(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz707(t *testing.T) {
	var expected, actual Fuzz707
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz707{}, expected)
	require.Equal(t, Fuzz707{}, actual)

	actual = Fuzz707{
		One: rando.Uint32(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz708(t *testing.T) {
	var expected, actual Fuzz708
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz708{}, expected)
	require.Equal(t, Fuzz708{}, actual)

	actual = Fuzz708{
		One: rando.Uint32(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz709(t *testing.T) {
	var expected, actual Fuzz709
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz709{}, expected)
	require.Equal(t, Fuzz709{}, actual)

	actual = Fuzz709{
		One: rando.Uint32(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz710(t *testing.T) {
	var expected, actual Fuzz710
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz710{}, expected)
	require.Equal(t, Fuzz710{}, actual)

	actual = Fuzz710{
		One: rando.Uint32(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz711(t *testing.T) {
	var expected, actual Fuzz711
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz711{}, expected)
	require.Equal(t, Fuzz711{}, actual)

	actual = Fuzz711{
		One: rando.Uint32(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz712(t *testing.T) {
	var expected, actual Fuzz712
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz712{}, expected)
	require.Equal(t, Fuzz712{}, actual)

	actual = Fuzz712{
		One: rando.Uint32(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz713(t *testing.T) {
	var expected, actual Fuzz713
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz713{}, expected)
	require.Equal(t, Fuzz713{}, actual)

	actual = Fuzz713{
		One: rando.Uint32(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz714(t *testing.T) {
	var expected, actual Fuzz714
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz714{}, expected)
	require.Equal(t, Fuzz714{}, actual)

	actual = Fuzz714{
		One: rando.Uint32(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz715(t *testing.T) {
	var expected, actual Fuzz715
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz715{}, expected)
	require.Equal(t, Fuzz715{}, actual)

	actual = Fuzz715{
		One: rando.Uint32(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz716(t *testing.T) {
	var expected, actual Fuzz716
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz716{}, expected)
	require.Equal(t, Fuzz716{}, actual)

	actual = Fuzz716{
		One: rando.Uint32(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz717(t *testing.T) {
	var expected, actual Fuzz717
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz717{}, expected)
	require.Equal(t, Fuzz717{}, actual)

	actual = Fuzz717{
		One: rando.Uint32(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz718(t *testing.T) {
	var expected, actual Fuzz718
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz718{}, expected)
	require.Equal(t, Fuzz718{}, actual)

	actual = Fuzz718{
		One: rando.Uint32(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz719(t *testing.T) {
	var expected, actual Fuzz719
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz719{}, expected)
	require.Equal(t, Fuzz719{}, actual)

	actual = Fuzz719{
		One: rando.Uint32(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz720(t *testing.T) {
	var expected, actual Fuzz720
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz720{}, expected)
	require.Equal(t, Fuzz720{}, actual)

	actual = Fuzz720{
		One: rando.Uint32(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz721(t *testing.T) {
	var expected, actual Fuzz721
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz721{}, expected)
	require.Equal(t, Fuzz721{}, actual)

	actual = Fuzz721{
		One: rando.Uint32(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz722(t *testing.T) {
	var expected, actual Fuzz722
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz722{}, expected)
	require.Equal(t, Fuzz722{}, actual)

	actual = Fuzz722{
		One: rando.Uint32(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz723(t *testing.T) {
	var expected, actual Fuzz723
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz723{}, expected)
	require.Equal(t, Fuzz723{}, actual)

	actual = Fuzz723{
		One: rando.Uint32(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz724(t *testing.T) {
	var expected, actual Fuzz724
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz724{}, expected)
	require.Equal(t, Fuzz724{}, actual)

	actual = Fuzz724{
		One: rando.Uint32(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz725(t *testing.T) {
	var expected, actual Fuzz725
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz725{}, expected)
	require.Equal(t, Fuzz725{}, actual)

	actual = Fuzz725{
		One: rando.Uint32(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz726(t *testing.T) {
	var expected, actual Fuzz726
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz726{}, expected)
	require.Equal(t, Fuzz726{}, actual)

	actual = Fuzz726{
		One: rando.Uint32(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz727(t *testing.T) {
	var expected, actual Fuzz727
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz727{}, expected)
	require.Equal(t, Fuzz727{}, actual)

	actual = Fuzz727{
		One: rando.Uint32(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz728(t *testing.T) {
	var expected, actual Fuzz728
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz728{}, expected)
	require.Equal(t, Fuzz728{}, actual)

	actual = Fuzz728{
		One: rando.Uint32(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz729(t *testing.T) {
	var expected, actual Fuzz729
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz729{}, expected)
	require.Equal(t, Fuzz729{}, actual)

	actual = Fuzz729{
		One: rando.Uint32(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz730(t *testing.T) {
	var expected, actual Fuzz730
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz730{}, expected)
	require.Equal(t, Fuzz730{}, actual)

	actual = Fuzz730{
		One: rando.Uint32(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz731(t *testing.T) {
	var expected, actual Fuzz731
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz731{}, expected)
	require.Equal(t, Fuzz731{}, actual)

	actual = Fuzz731{
		One: rando.Uint32(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz732(t *testing.T) {
	var expected, actual Fuzz732
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz732{}, expected)
	require.Equal(t, Fuzz732{}, actual)

	actual = Fuzz732{
		One: rando.Uint32(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz733(t *testing.T) {
	var expected, actual Fuzz733
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz733{}, expected)
	require.Equal(t, Fuzz733{}, actual)

	actual = Fuzz733{
		One: rando.Uint32(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz734(t *testing.T) {
	var expected, actual Fuzz734
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz734{}, expected)
	require.Equal(t, Fuzz734{}, actual)

	actual = Fuzz734{
		One: rando.Uint32(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz735(t *testing.T) {
	var expected, actual Fuzz735
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz735{}, expected)
	require.Equal(t, Fuzz735{}, actual)

	actual = Fuzz735{
		One: rando.Uint32(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz736(t *testing.T) {
	var expected, actual Fuzz736
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz736{}, expected)
	require.Equal(t, Fuzz736{}, actual)

	actual = Fuzz736{
		One: rando.Uint64(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz737(t *testing.T) {
	var expected, actual Fuzz737
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz737{}, expected)
	require.Equal(t, Fuzz737{}, actual)

	actual = Fuzz737{
		One: rando.Uint64(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz738(t *testing.T) {
	var expected, actual Fuzz738
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz738{}, expected)
	require.Equal(t, Fuzz738{}, actual)

	actual = Fuzz738{
		One: rando.Uint64(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz739(t *testing.T) {
	var expected, actual Fuzz739
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz739{}, expected)
	require.Equal(t, Fuzz739{}, actual)

	actual = Fuzz739{
		One: rando.Uint64(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz740(t *testing.T) {
	var expected, actual Fuzz740
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz740{}, expected)
	require.Equal(t, Fuzz740{}, actual)

	actual = Fuzz740{
		One: rando.Uint64(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz741(t *testing.T) {
	var expected, actual Fuzz741
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz741{}, expected)
	require.Equal(t, Fuzz741{}, actual)

	actual = Fuzz741{
		One: rando.Uint64(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz742(t *testing.T) {
	var expected, actual Fuzz742
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz742{}, expected)
	require.Equal(t, Fuzz742{}, actual)

	actual = Fuzz742{
		One: rando.Uint64(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz743(t *testing.T) {
	var expected, actual Fuzz743
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz743{}, expected)
	require.Equal(t, Fuzz743{}, actual)

	actual = Fuzz743{
		One: rando.Uint64(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz744(t *testing.T) {
	var expected, actual Fuzz744
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz744{}, expected)
	require.Equal(t, Fuzz744{}, actual)

	actual = Fuzz744{
		One: rando.Uint64(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz745(t *testing.T) {
	var expected, actual Fuzz745
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz745{}, expected)
	require.Equal(t, Fuzz745{}, actual)

	actual = Fuzz745{
		One: rando.Uint64(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz746(t *testing.T) {
	var expected, actual Fuzz746
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz746{}, expected)
	require.Equal(t, Fuzz746{}, actual)

	actual = Fuzz746{
		One: rando.Uint64(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz747(t *testing.T) {
	var expected, actual Fuzz747
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz747{}, expected)
	require.Equal(t, Fuzz747{}, actual)

	actual = Fuzz747{
		One: rando.Uint64(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz748(t *testing.T) {
	var expected, actual Fuzz748
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz748{}, expected)
	require.Equal(t, Fuzz748{}, actual)

	actual = Fuzz748{
		One: rando.Uint64(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz749(t *testing.T) {
	var expected, actual Fuzz749
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz749{}, expected)
	require.Equal(t, Fuzz749{}, actual)

	actual = Fuzz749{
		One: rando.Uint64(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz750(t *testing.T) {
	var expected, actual Fuzz750
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz750{}, expected)
	require.Equal(t, Fuzz750{}, actual)

	actual = Fuzz750{
		One: rando.Uint64(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz751(t *testing.T) {
	var expected, actual Fuzz751
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz751{}, expected)
	require.Equal(t, Fuzz751{}, actual)

	actual = Fuzz751{
		One: rando.Uint64(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz752(t *testing.T) {
	var expected, actual Fuzz752
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz752{}, expected)
	require.Equal(t, Fuzz752{}, actual)

	actual = Fuzz752{
		One: rando.Uint64(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz753(t *testing.T) {
	var expected, actual Fuzz753
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz753{}, expected)
	require.Equal(t, Fuzz753{}, actual)

	actual = Fuzz753{
		One: rando.Uint64(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz754(t *testing.T) {
	var expected, actual Fuzz754
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz754{}, expected)
	require.Equal(t, Fuzz754{}, actual)

	actual = Fuzz754{
		One: rando.Uint64(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz755(t *testing.T) {
	var expected, actual Fuzz755
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz755{}, expected)
	require.Equal(t, Fuzz755{}, actual)

	actual = Fuzz755{
		One: rando.Uint64(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz756(t *testing.T) {
	var expected, actual Fuzz756
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz756{}, expected)
	require.Equal(t, Fuzz756{}, actual)

	actual = Fuzz756{
		One: rando.Uint64(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz757(t *testing.T) {
	var expected, actual Fuzz757
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz757{}, expected)
	require.Equal(t, Fuzz757{}, actual)

	actual = Fuzz757{
		One: rando.Uint64(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz758(t *testing.T) {
	var expected, actual Fuzz758
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz758{}, expected)
	require.Equal(t, Fuzz758{}, actual)

	actual = Fuzz758{
		One: rando.Uint64(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz759(t *testing.T) {
	var expected, actual Fuzz759
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz759{}, expected)
	require.Equal(t, Fuzz759{}, actual)

	actual = Fuzz759{
		One: rando.Uint64(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz760(t *testing.T) {
	var expected, actual Fuzz760
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz760{}, expected)
	require.Equal(t, Fuzz760{}, actual)

	actual = Fuzz760{
		One: rando.Uint64(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz761(t *testing.T) {
	var expected, actual Fuzz761
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz761{}, expected)
	require.Equal(t, Fuzz761{}, actual)

	actual = Fuzz761{
		One: rando.Uint64(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz762(t *testing.T) {
	var expected, actual Fuzz762
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz762{}, expected)
	require.Equal(t, Fuzz762{}, actual)

	actual = Fuzz762{
		One: rando.Uint64(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz763(t *testing.T) {
	var expected, actual Fuzz763
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz763{}, expected)
	require.Equal(t, Fuzz763{}, actual)

	actual = Fuzz763{
		One: rando.Uint64(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz764(t *testing.T) {
	var expected, actual Fuzz764
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz764{}, expected)
	require.Equal(t, Fuzz764{}, actual)

	actual = Fuzz764{
		One: rando.Uint64(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz765(t *testing.T) {
	var expected, actual Fuzz765
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz765{}, expected)
	require.Equal(t, Fuzz765{}, actual)

	actual = Fuzz765{
		One: rando.Uint64(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz766(t *testing.T) {
	var expected, actual Fuzz766
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz766{}, expected)
	require.Equal(t, Fuzz766{}, actual)

	actual = Fuzz766{
		One: rando.Uint64(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz767(t *testing.T) {
	var expected, actual Fuzz767
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz767{}, expected)
	require.Equal(t, Fuzz767{}, actual)

	actual = Fuzz767{
		One: rando.Uint64(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz768(t *testing.T) {
	var expected, actual Fuzz768
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz768{}, expected)
	require.Equal(t, Fuzz768{}, actual)

	actual = Fuzz768{
		One: rando.Uints(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz769(t *testing.T) {
	var expected, actual Fuzz769
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz769{}, expected)
	require.Equal(t, Fuzz769{}, actual)

	actual = Fuzz769{
		One: rando.Uints(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz770(t *testing.T) {
	var expected, actual Fuzz770
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz770{}, expected)
	require.Equal(t, Fuzz770{}, actual)

	actual = Fuzz770{
		One: rando.Uints(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz771(t *testing.T) {
	var expected, actual Fuzz771
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz771{}, expected)
	require.Equal(t, Fuzz771{}, actual)

	actual = Fuzz771{
		One: rando.Uints(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz772(t *testing.T) {
	var expected, actual Fuzz772
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz772{}, expected)
	require.Equal(t, Fuzz772{}, actual)

	actual = Fuzz772{
		One: rando.Uints(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz773(t *testing.T) {
	var expected, actual Fuzz773
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz773{}, expected)
	require.Equal(t, Fuzz773{}, actual)

	actual = Fuzz773{
		One: rando.Uints(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz774(t *testing.T) {
	var expected, actual Fuzz774
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz774{}, expected)
	require.Equal(t, Fuzz774{}, actual)

	actual = Fuzz774{
		One: rando.Uints(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz775(t *testing.T) {
	var expected, actual Fuzz775
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz775{}, expected)
	require.Equal(t, Fuzz775{}, actual)

	actual = Fuzz775{
		One: rando.Uints(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz776(t *testing.T) {
	var expected, actual Fuzz776
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz776{}, expected)
	require.Equal(t, Fuzz776{}, actual)

	actual = Fuzz776{
		One: rando.Uints(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz777(t *testing.T) {
	var expected, actual Fuzz777
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz777{}, expected)
	require.Equal(t, Fuzz777{}, actual)

	actual = Fuzz777{
		One: rando.Uints(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz778(t *testing.T) {
	var expected, actual Fuzz778
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz778{}, expected)
	require.Equal(t, Fuzz778{}, actual)

	actual = Fuzz778{
		One: rando.Uints(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz779(t *testing.T) {
	var expected, actual Fuzz779
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz779{}, expected)
	require.Equal(t, Fuzz779{}, actual)

	actual = Fuzz779{
		One: rando.Uints(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz780(t *testing.T) {
	var expected, actual Fuzz780
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz780{}, expected)
	require.Equal(t, Fuzz780{}, actual)

	actual = Fuzz780{
		One: rando.Uints(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz781(t *testing.T) {
	var expected, actual Fuzz781
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz781{}, expected)
	require.Equal(t, Fuzz781{}, actual)

	actual = Fuzz781{
		One: rando.Uints(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz782(t *testing.T) {
	var expected, actual Fuzz782
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz782{}, expected)
	require.Equal(t, Fuzz782{}, actual)

	actual = Fuzz782{
		One: rando.Uints(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz783(t *testing.T) {
	var expected, actual Fuzz783
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz783{}, expected)
	require.Equal(t, Fuzz783{}, actual)

	actual = Fuzz783{
		One: rando.Uints(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz784(t *testing.T) {
	var expected, actual Fuzz784
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz784{}, expected)
	require.Equal(t, Fuzz784{}, actual)

	actual = Fuzz784{
		One: rando.Uints(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz785(t *testing.T) {
	var expected, actual Fuzz785
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz785{}, expected)
	require.Equal(t, Fuzz785{}, actual)

	actual = Fuzz785{
		One: rando.Uints(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz786(t *testing.T) {
	var expected, actual Fuzz786
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz786{}, expected)
	require.Equal(t, Fuzz786{}, actual)

	actual = Fuzz786{
		One: rando.Uints(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz787(t *testing.T) {
	var expected, actual Fuzz787
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz787{}, expected)
	require.Equal(t, Fuzz787{}, actual)

	actual = Fuzz787{
		One: rando.Uints(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz788(t *testing.T) {
	var expected, actual Fuzz788
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz788{}, expected)
	require.Equal(t, Fuzz788{}, actual)

	actual = Fuzz788{
		One: rando.Uints(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz789(t *testing.T) {
	var expected, actual Fuzz789
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz789{}, expected)
	require.Equal(t, Fuzz789{}, actual)

	actual = Fuzz789{
		One: rando.Uints(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz790(t *testing.T) {
	var expected, actual Fuzz790
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz790{}, expected)
	require.Equal(t, Fuzz790{}, actual)

	actual = Fuzz790{
		One: rando.Uints(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz791(t *testing.T) {
	var expected, actual Fuzz791
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz791{}, expected)
	require.Equal(t, Fuzz791{}, actual)

	actual = Fuzz791{
		One: rando.Uints(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz792(t *testing.T) {
	var expected, actual Fuzz792
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz792{}, expected)
	require.Equal(t, Fuzz792{}, actual)

	actual = Fuzz792{
		One: rando.Uints(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz793(t *testing.T) {
	var expected, actual Fuzz793
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz793{}, expected)
	require.Equal(t, Fuzz793{}, actual)

	actual = Fuzz793{
		One: rando.Uints(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz794(t *testing.T) {
	var expected, actual Fuzz794
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz794{}, expected)
	require.Equal(t, Fuzz794{}, actual)

	actual = Fuzz794{
		One: rando.Uints(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz795(t *testing.T) {
	var expected, actual Fuzz795
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz795{}, expected)
	require.Equal(t, Fuzz795{}, actual)

	actual = Fuzz795{
		One: rando.Uints(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz796(t *testing.T) {
	var expected, actual Fuzz796
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz796{}, expected)
	require.Equal(t, Fuzz796{}, actual)

	actual = Fuzz796{
		One: rando.Uints(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz797(t *testing.T) {
	var expected, actual Fuzz797
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz797{}, expected)
	require.Equal(t, Fuzz797{}, actual)

	actual = Fuzz797{
		One: rando.Uints(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz798(t *testing.T) {
	var expected, actual Fuzz798
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz798{}, expected)
	require.Equal(t, Fuzz798{}, actual)

	actual = Fuzz798{
		One: rando.Uints(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz799(t *testing.T) {
	var expected, actual Fuzz799
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz799{}, expected)
	require.Equal(t, Fuzz799{}, actual)

	actual = Fuzz799{
		One: rando.Uints(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz800(t *testing.T) {
	var expected, actual Fuzz800
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz800{}, expected)
	require.Equal(t, Fuzz800{}, actual)

	actual = Fuzz800{
		One: rando.Uint16s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz801(t *testing.T) {
	var expected, actual Fuzz801
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz801{}, expected)
	require.Equal(t, Fuzz801{}, actual)

	actual = Fuzz801{
		One: rando.Uint16s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz802(t *testing.T) {
	var expected, actual Fuzz802
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz802{}, expected)
	require.Equal(t, Fuzz802{}, actual)

	actual = Fuzz802{
		One: rando.Uint16s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz803(t *testing.T) {
	var expected, actual Fuzz803
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz803{}, expected)
	require.Equal(t, Fuzz803{}, actual)

	actual = Fuzz803{
		One: rando.Uint16s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz804(t *testing.T) {
	var expected, actual Fuzz804
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz804{}, expected)
	require.Equal(t, Fuzz804{}, actual)

	actual = Fuzz804{
		One: rando.Uint16s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz805(t *testing.T) {
	var expected, actual Fuzz805
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz805{}, expected)
	require.Equal(t, Fuzz805{}, actual)

	actual = Fuzz805{
		One: rando.Uint16s(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz806(t *testing.T) {
	var expected, actual Fuzz806
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz806{}, expected)
	require.Equal(t, Fuzz806{}, actual)

	actual = Fuzz806{
		One: rando.Uint16s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz807(t *testing.T) {
	var expected, actual Fuzz807
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz807{}, expected)
	require.Equal(t, Fuzz807{}, actual)

	actual = Fuzz807{
		One: rando.Uint16s(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz808(t *testing.T) {
	var expected, actual Fuzz808
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz808{}, expected)
	require.Equal(t, Fuzz808{}, actual)

	actual = Fuzz808{
		One: rando.Uint16s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz809(t *testing.T) {
	var expected, actual Fuzz809
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz809{}, expected)
	require.Equal(t, Fuzz809{}, actual)

	actual = Fuzz809{
		One: rando.Uint16s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz810(t *testing.T) {
	var expected, actual Fuzz810
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz810{}, expected)
	require.Equal(t, Fuzz810{}, actual)

	actual = Fuzz810{
		One: rando.Uint16s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz811(t *testing.T) {
	var expected, actual Fuzz811
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz811{}, expected)
	require.Equal(t, Fuzz811{}, actual)

	actual = Fuzz811{
		One: rando.Uint16s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz812(t *testing.T) {
	var expected, actual Fuzz812
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz812{}, expected)
	require.Equal(t, Fuzz812{}, actual)

	actual = Fuzz812{
		One: rando.Uint16s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz813(t *testing.T) {
	var expected, actual Fuzz813
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz813{}, expected)
	require.Equal(t, Fuzz813{}, actual)

	actual = Fuzz813{
		One: rando.Uint16s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz814(t *testing.T) {
	var expected, actual Fuzz814
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz814{}, expected)
	require.Equal(t, Fuzz814{}, actual)

	actual = Fuzz814{
		One: rando.Uint16s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz815(t *testing.T) {
	var expected, actual Fuzz815
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz815{}, expected)
	require.Equal(t, Fuzz815{}, actual)

	actual = Fuzz815{
		One: rando.Uint16s(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz816(t *testing.T) {
	var expected, actual Fuzz816
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz816{}, expected)
	require.Equal(t, Fuzz816{}, actual)

	actual = Fuzz816{
		One: rando.Uint16s(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz817(t *testing.T) {
	var expected, actual Fuzz817
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz817{}, expected)
	require.Equal(t, Fuzz817{}, actual)

	actual = Fuzz817{
		One: rando.Uint16s(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz818(t *testing.T) {
	var expected, actual Fuzz818
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz818{}, expected)
	require.Equal(t, Fuzz818{}, actual)

	actual = Fuzz818{
		One: rando.Uint16s(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz819(t *testing.T) {
	var expected, actual Fuzz819
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz819{}, expected)
	require.Equal(t, Fuzz819{}, actual)

	actual = Fuzz819{
		One: rando.Uint16s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz820(t *testing.T) {
	var expected, actual Fuzz820
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz820{}, expected)
	require.Equal(t, Fuzz820{}, actual)

	actual = Fuzz820{
		One: rando.Uint16s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz821(t *testing.T) {
	var expected, actual Fuzz821
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz821{}, expected)
	require.Equal(t, Fuzz821{}, actual)

	actual = Fuzz821{
		One: rando.Uint16s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz822(t *testing.T) {
	var expected, actual Fuzz822
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz822{}, expected)
	require.Equal(t, Fuzz822{}, actual)

	actual = Fuzz822{
		One: rando.Uint16s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz823(t *testing.T) {
	var expected, actual Fuzz823
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz823{}, expected)
	require.Equal(t, Fuzz823{}, actual)

	actual = Fuzz823{
		One: rando.Uint16s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz824(t *testing.T) {
	var expected, actual Fuzz824
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz824{}, expected)
	require.Equal(t, Fuzz824{}, actual)

	actual = Fuzz824{
		One: rando.Uint16s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz825(t *testing.T) {
	var expected, actual Fuzz825
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz825{}, expected)
	require.Equal(t, Fuzz825{}, actual)

	actual = Fuzz825{
		One: rando.Uint16s(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz826(t *testing.T) {
	var expected, actual Fuzz826
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz826{}, expected)
	require.Equal(t, Fuzz826{}, actual)

	actual = Fuzz826{
		One: rando.Uint16s(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz827(t *testing.T) {
	var expected, actual Fuzz827
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz827{}, expected)
	require.Equal(t, Fuzz827{}, actual)

	actual = Fuzz827{
		One: rando.Uint16s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz828(t *testing.T) {
	var expected, actual Fuzz828
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz828{}, expected)
	require.Equal(t, Fuzz828{}, actual)

	actual = Fuzz828{
		One: rando.Uint16s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz829(t *testing.T) {
	var expected, actual Fuzz829
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz829{}, expected)
	require.Equal(t, Fuzz829{}, actual)

	actual = Fuzz829{
		One: rando.Uint16s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz830(t *testing.T) {
	var expected, actual Fuzz830
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz830{}, expected)
	require.Equal(t, Fuzz830{}, actual)

	actual = Fuzz830{
		One: rando.Uint16s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz831(t *testing.T) {
	var expected, actual Fuzz831
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz831{}, expected)
	require.Equal(t, Fuzz831{}, actual)

	actual = Fuzz831{
		One: rando.Uint16s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz832(t *testing.T) {
	var expected, actual Fuzz832
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz832{}, expected)
	require.Equal(t, Fuzz832{}, actual)

	actual = Fuzz832{
		One: rando.Uint32s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz833(t *testing.T) {
	var expected, actual Fuzz833
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz833{}, expected)
	require.Equal(t, Fuzz833{}, actual)

	actual = Fuzz833{
		One: rando.Uint32s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz834(t *testing.T) {
	var expected, actual Fuzz834
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz834{}, expected)
	require.Equal(t, Fuzz834{}, actual)

	actual = Fuzz834{
		One: rando.Uint32s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz835(t *testing.T) {
	var expected, actual Fuzz835
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz835{}, expected)
	require.Equal(t, Fuzz835{}, actual)

	actual = Fuzz835{
		One: rando.Uint32s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz836(t *testing.T) {
	var expected, actual Fuzz836
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz836{}, expected)
	require.Equal(t, Fuzz836{}, actual)

	actual = Fuzz836{
		One: rando.Uint32s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz837(t *testing.T) {
	var expected, actual Fuzz837
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz837{}, expected)
	require.Equal(t, Fuzz837{}, actual)

	actual = Fuzz837{
		One: rando.Uint32s(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz838(t *testing.T) {
	var expected, actual Fuzz838
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz838{}, expected)
	require.Equal(t, Fuzz838{}, actual)

	actual = Fuzz838{
		One: rando.Uint32s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz839(t *testing.T) {
	var expected, actual Fuzz839
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz839{}, expected)
	require.Equal(t, Fuzz839{}, actual)

	actual = Fuzz839{
		One: rando.Uint32s(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz840(t *testing.T) {
	var expected, actual Fuzz840
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz840{}, expected)
	require.Equal(t, Fuzz840{}, actual)

	actual = Fuzz840{
		One: rando.Uint32s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz841(t *testing.T) {
	var expected, actual Fuzz841
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz841{}, expected)
	require.Equal(t, Fuzz841{}, actual)

	actual = Fuzz841{
		One: rando.Uint32s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz842(t *testing.T) {
	var expected, actual Fuzz842
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz842{}, expected)
	require.Equal(t, Fuzz842{}, actual)

	actual = Fuzz842{
		One: rando.Uint32s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz843(t *testing.T) {
	var expected, actual Fuzz843
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz843{}, expected)
	require.Equal(t, Fuzz843{}, actual)

	actual = Fuzz843{
		One: rando.Uint32s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz844(t *testing.T) {
	var expected, actual Fuzz844
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz844{}, expected)
	require.Equal(t, Fuzz844{}, actual)

	actual = Fuzz844{
		One: rando.Uint32s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz845(t *testing.T) {
	var expected, actual Fuzz845
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz845{}, expected)
	require.Equal(t, Fuzz845{}, actual)

	actual = Fuzz845{
		One: rando.Uint32s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz846(t *testing.T) {
	var expected, actual Fuzz846
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz846{}, expected)
	require.Equal(t, Fuzz846{}, actual)

	actual = Fuzz846{
		One: rando.Uint32s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz847(t *testing.T) {
	var expected, actual Fuzz847
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz847{}, expected)
	require.Equal(t, Fuzz847{}, actual)

	actual = Fuzz847{
		One: rando.Uint32s(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz848(t *testing.T) {
	var expected, actual Fuzz848
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz848{}, expected)
	require.Equal(t, Fuzz848{}, actual)

	actual = Fuzz848{
		One: rando.Uint32s(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz849(t *testing.T) {
	var expected, actual Fuzz849
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz849{}, expected)
	require.Equal(t, Fuzz849{}, actual)

	actual = Fuzz849{
		One: rando.Uint32s(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz850(t *testing.T) {
	var expected, actual Fuzz850
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz850{}, expected)
	require.Equal(t, Fuzz850{}, actual)

	actual = Fuzz850{
		One: rando.Uint32s(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz851(t *testing.T) {
	var expected, actual Fuzz851
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz851{}, expected)
	require.Equal(t, Fuzz851{}, actual)

	actual = Fuzz851{
		One: rando.Uint32s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz852(t *testing.T) {
	var expected, actual Fuzz852
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz852{}, expected)
	require.Equal(t, Fuzz852{}, actual)

	actual = Fuzz852{
		One: rando.Uint32s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz853(t *testing.T) {
	var expected, actual Fuzz853
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz853{}, expected)
	require.Equal(t, Fuzz853{}, actual)

	actual = Fuzz853{
		One: rando.Uint32s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz854(t *testing.T) {
	var expected, actual Fuzz854
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz854{}, expected)
	require.Equal(t, Fuzz854{}, actual)

	actual = Fuzz854{
		One: rando.Uint32s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz855(t *testing.T) {
	var expected, actual Fuzz855
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz855{}, expected)
	require.Equal(t, Fuzz855{}, actual)

	actual = Fuzz855{
		One: rando.Uint32s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz856(t *testing.T) {
	var expected, actual Fuzz856
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz856{}, expected)
	require.Equal(t, Fuzz856{}, actual)

	actual = Fuzz856{
		One: rando.Uint32s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz857(t *testing.T) {
	var expected, actual Fuzz857
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz857{}, expected)
	require.Equal(t, Fuzz857{}, actual)

	actual = Fuzz857{
		One: rando.Uint32s(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz858(t *testing.T) {
	var expected, actual Fuzz858
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz858{}, expected)
	require.Equal(t, Fuzz858{}, actual)

	actual = Fuzz858{
		One: rando.Uint32s(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz859(t *testing.T) {
	var expected, actual Fuzz859
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz859{}, expected)
	require.Equal(t, Fuzz859{}, actual)

	actual = Fuzz859{
		One: rando.Uint32s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz860(t *testing.T) {
	var expected, actual Fuzz860
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz860{}, expected)
	require.Equal(t, Fuzz860{}, actual)

	actual = Fuzz860{
		One: rando.Uint32s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz861(t *testing.T) {
	var expected, actual Fuzz861
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz861{}, expected)
	require.Equal(t, Fuzz861{}, actual)

	actual = Fuzz861{
		One: rando.Uint32s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz862(t *testing.T) {
	var expected, actual Fuzz862
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz862{}, expected)
	require.Equal(t, Fuzz862{}, actual)

	actual = Fuzz862{
		One: rando.Uint32s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz863(t *testing.T) {
	var expected, actual Fuzz863
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz863{}, expected)
	require.Equal(t, Fuzz863{}, actual)

	actual = Fuzz863{
		One: rando.Uint32s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz864(t *testing.T) {
	var expected, actual Fuzz864
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz864{}, expected)
	require.Equal(t, Fuzz864{}, actual)

	actual = Fuzz864{
		One: rando.Uint64s(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz865(t *testing.T) {
	var expected, actual Fuzz865
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz865{}, expected)
	require.Equal(t, Fuzz865{}, actual)

	actual = Fuzz865{
		One: rando.Uint64s(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz866(t *testing.T) {
	var expected, actual Fuzz866
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz866{}, expected)
	require.Equal(t, Fuzz866{}, actual)

	actual = Fuzz866{
		One: rando.Uint64s(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz867(t *testing.T) {
	var expected, actual Fuzz867
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz867{}, expected)
	require.Equal(t, Fuzz867{}, actual)

	actual = Fuzz867{
		One: rando.Uint64s(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz868(t *testing.T) {
	var expected, actual Fuzz868
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz868{}, expected)
	require.Equal(t, Fuzz868{}, actual)

	actual = Fuzz868{
		One: rando.Uint64s(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz869(t *testing.T) {
	var expected, actual Fuzz869
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz869{}, expected)
	require.Equal(t, Fuzz869{}, actual)

	actual = Fuzz869{
		One: rando.Uint64s(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz870(t *testing.T) {
	var expected, actual Fuzz870
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz870{}, expected)
	require.Equal(t, Fuzz870{}, actual)

	actual = Fuzz870{
		One: rando.Uint64s(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz871(t *testing.T) {
	var expected, actual Fuzz871
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz871{}, expected)
	require.Equal(t, Fuzz871{}, actual)

	actual = Fuzz871{
		One: rando.Uint64s(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz872(t *testing.T) {
	var expected, actual Fuzz872
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz872{}, expected)
	require.Equal(t, Fuzz872{}, actual)

	actual = Fuzz872{
		One: rando.Uint64s(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz873(t *testing.T) {
	var expected, actual Fuzz873
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz873{}, expected)
	require.Equal(t, Fuzz873{}, actual)

	actual = Fuzz873{
		One: rando.Uint64s(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz874(t *testing.T) {
	var expected, actual Fuzz874
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz874{}, expected)
	require.Equal(t, Fuzz874{}, actual)

	actual = Fuzz874{
		One: rando.Uint64s(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz875(t *testing.T) {
	var expected, actual Fuzz875
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz875{}, expected)
	require.Equal(t, Fuzz875{}, actual)

	actual = Fuzz875{
		One: rando.Uint64s(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz876(t *testing.T) {
	var expected, actual Fuzz876
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz876{}, expected)
	require.Equal(t, Fuzz876{}, actual)

	actual = Fuzz876{
		One: rando.Uint64s(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz877(t *testing.T) {
	var expected, actual Fuzz877
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz877{}, expected)
	require.Equal(t, Fuzz877{}, actual)

	actual = Fuzz877{
		One: rando.Uint64s(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz878(t *testing.T) {
	var expected, actual Fuzz878
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz878{}, expected)
	require.Equal(t, Fuzz878{}, actual)

	actual = Fuzz878{
		One: rando.Uint64s(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz879(t *testing.T) {
	var expected, actual Fuzz879
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz879{}, expected)
	require.Equal(t, Fuzz879{}, actual)

	actual = Fuzz879{
		One: rando.Uint64s(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz880(t *testing.T) {
	var expected, actual Fuzz880
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz880{}, expected)
	require.Equal(t, Fuzz880{}, actual)

	actual = Fuzz880{
		One: rando.Uint64s(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz881(t *testing.T) {
	var expected, actual Fuzz881
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz881{}, expected)
	require.Equal(t, Fuzz881{}, actual)

	actual = Fuzz881{
		One: rando.Uint64s(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz882(t *testing.T) {
	var expected, actual Fuzz882
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz882{}, expected)
	require.Equal(t, Fuzz882{}, actual)

	actual = Fuzz882{
		One: rando.Uint64s(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz883(t *testing.T) {
	var expected, actual Fuzz883
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz883{}, expected)
	require.Equal(t, Fuzz883{}, actual)

	actual = Fuzz883{
		One: rando.Uint64s(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz884(t *testing.T) {
	var expected, actual Fuzz884
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz884{}, expected)
	require.Equal(t, Fuzz884{}, actual)

	actual = Fuzz884{
		One: rando.Uint64s(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz885(t *testing.T) {
	var expected, actual Fuzz885
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz885{}, expected)
	require.Equal(t, Fuzz885{}, actual)

	actual = Fuzz885{
		One: rando.Uint64s(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz886(t *testing.T) {
	var expected, actual Fuzz886
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz886{}, expected)
	require.Equal(t, Fuzz886{}, actual)

	actual = Fuzz886{
		One: rando.Uint64s(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz887(t *testing.T) {
	var expected, actual Fuzz887
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz887{}, expected)
	require.Equal(t, Fuzz887{}, actual)

	actual = Fuzz887{
		One: rando.Uint64s(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz888(t *testing.T) {
	var expected, actual Fuzz888
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz888{}, expected)
	require.Equal(t, Fuzz888{}, actual)

	actual = Fuzz888{
		One: rando.Uint64s(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz889(t *testing.T) {
	var expected, actual Fuzz889
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz889{}, expected)
	require.Equal(t, Fuzz889{}, actual)

	actual = Fuzz889{
		One: rando.Uint64s(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz890(t *testing.T) {
	var expected, actual Fuzz890
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz890{}, expected)
	require.Equal(t, Fuzz890{}, actual)

	actual = Fuzz890{
		One: rando.Uint64s(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz891(t *testing.T) {
	var expected, actual Fuzz891
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz891{}, expected)
	require.Equal(t, Fuzz891{}, actual)

	actual = Fuzz891{
		One: rando.Uint64s(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz892(t *testing.T) {
	var expected, actual Fuzz892
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz892{}, expected)
	require.Equal(t, Fuzz892{}, actual)

	actual = Fuzz892{
		One: rando.Uint64s(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz893(t *testing.T) {
	var expected, actual Fuzz893
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz893{}, expected)
	require.Equal(t, Fuzz893{}, actual)

	actual = Fuzz893{
		One: rando.Uint64s(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz894(t *testing.T) {
	var expected, actual Fuzz894
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz894{}, expected)
	require.Equal(t, Fuzz894{}, actual)

	actual = Fuzz894{
		One: rando.Uint64s(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz895(t *testing.T) {
	var expected, actual Fuzz895
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz895{}, expected)
	require.Equal(t, Fuzz895{}, actual)

	actual = Fuzz895{
		One: rando.Uint64s(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz896(t *testing.T) {
	var expected, actual Fuzz896
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz896{}, expected)
	require.Equal(t, Fuzz896{}, actual)

	actual = Fuzz896{
		One: rando.String(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz897(t *testing.T) {
	var expected, actual Fuzz897
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz897{}, expected)
	require.Equal(t, Fuzz897{}, actual)

	actual = Fuzz897{
		One: rando.String(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz898(t *testing.T) {
	var expected, actual Fuzz898
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz898{}, expected)
	require.Equal(t, Fuzz898{}, actual)

	actual = Fuzz898{
		One: rando.String(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz899(t *testing.T) {
	var expected, actual Fuzz899
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz899{}, expected)
	require.Equal(t, Fuzz899{}, actual)

	actual = Fuzz899{
		One: rando.String(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz900(t *testing.T) {
	var expected, actual Fuzz900
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz900{}, expected)
	require.Equal(t, Fuzz900{}, actual)

	actual = Fuzz900{
		One: rando.String(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz901(t *testing.T) {
	var expected, actual Fuzz901
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz901{}, expected)
	require.Equal(t, Fuzz901{}, actual)

	actual = Fuzz901{
		One: rando.String(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz902(t *testing.T) {
	var expected, actual Fuzz902
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz902{}, expected)
	require.Equal(t, Fuzz902{}, actual)

	actual = Fuzz902{
		One: rando.String(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz903(t *testing.T) {
	var expected, actual Fuzz903
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz903{}, expected)
	require.Equal(t, Fuzz903{}, actual)

	actual = Fuzz903{
		One: rando.String(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz904(t *testing.T) {
	var expected, actual Fuzz904
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz904{}, expected)
	require.Equal(t, Fuzz904{}, actual)

	actual = Fuzz904{
		One: rando.String(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz905(t *testing.T) {
	var expected, actual Fuzz905
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz905{}, expected)
	require.Equal(t, Fuzz905{}, actual)

	actual = Fuzz905{
		One: rando.String(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz906(t *testing.T) {
	var expected, actual Fuzz906
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz906{}, expected)
	require.Equal(t, Fuzz906{}, actual)

	actual = Fuzz906{
		One: rando.String(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz907(t *testing.T) {
	var expected, actual Fuzz907
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz907{}, expected)
	require.Equal(t, Fuzz907{}, actual)

	actual = Fuzz907{
		One: rando.String(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz908(t *testing.T) {
	var expected, actual Fuzz908
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz908{}, expected)
	require.Equal(t, Fuzz908{}, actual)

	actual = Fuzz908{
		One: rando.String(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz909(t *testing.T) {
	var expected, actual Fuzz909
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz909{}, expected)
	require.Equal(t, Fuzz909{}, actual)

	actual = Fuzz909{
		One: rando.String(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz910(t *testing.T) {
	var expected, actual Fuzz910
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz910{}, expected)
	require.Equal(t, Fuzz910{}, actual)

	actual = Fuzz910{
		One: rando.String(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz911(t *testing.T) {
	var expected, actual Fuzz911
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz911{}, expected)
	require.Equal(t, Fuzz911{}, actual)

	actual = Fuzz911{
		One: rando.String(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz912(t *testing.T) {
	var expected, actual Fuzz912
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz912{}, expected)
	require.Equal(t, Fuzz912{}, actual)

	actual = Fuzz912{
		One: rando.String(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz913(t *testing.T) {
	var expected, actual Fuzz913
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz913{}, expected)
	require.Equal(t, Fuzz913{}, actual)

	actual = Fuzz913{
		One: rando.String(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz914(t *testing.T) {
	var expected, actual Fuzz914
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz914{}, expected)
	require.Equal(t, Fuzz914{}, actual)

	actual = Fuzz914{
		One: rando.String(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz915(t *testing.T) {
	var expected, actual Fuzz915
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz915{}, expected)
	require.Equal(t, Fuzz915{}, actual)

	actual = Fuzz915{
		One: rando.String(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz916(t *testing.T) {
	var expected, actual Fuzz916
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz916{}, expected)
	require.Equal(t, Fuzz916{}, actual)

	actual = Fuzz916{
		One: rando.String(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz917(t *testing.T) {
	var expected, actual Fuzz917
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz917{}, expected)
	require.Equal(t, Fuzz917{}, actual)

	actual = Fuzz917{
		One: rando.String(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz918(t *testing.T) {
	var expected, actual Fuzz918
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz918{}, expected)
	require.Equal(t, Fuzz918{}, actual)

	actual = Fuzz918{
		One: rando.String(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz919(t *testing.T) {
	var expected, actual Fuzz919
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz919{}, expected)
	require.Equal(t, Fuzz919{}, actual)

	actual = Fuzz919{
		One: rando.String(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz920(t *testing.T) {
	var expected, actual Fuzz920
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz920{}, expected)
	require.Equal(t, Fuzz920{}, actual)

	actual = Fuzz920{
		One: rando.String(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz921(t *testing.T) {
	var expected, actual Fuzz921
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz921{}, expected)
	require.Equal(t, Fuzz921{}, actual)

	actual = Fuzz921{
		One: rando.String(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz922(t *testing.T) {
	var expected, actual Fuzz922
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz922{}, expected)
	require.Equal(t, Fuzz922{}, actual)

	actual = Fuzz922{
		One: rando.String(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz923(t *testing.T) {
	var expected, actual Fuzz923
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz923{}, expected)
	require.Equal(t, Fuzz923{}, actual)

	actual = Fuzz923{
		One: rando.String(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz924(t *testing.T) {
	var expected, actual Fuzz924
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz924{}, expected)
	require.Equal(t, Fuzz924{}, actual)

	actual = Fuzz924{
		One: rando.String(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz925(t *testing.T) {
	var expected, actual Fuzz925
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz925{}, expected)
	require.Equal(t, Fuzz925{}, actual)

	actual = Fuzz925{
		One: rando.String(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz926(t *testing.T) {
	var expected, actual Fuzz926
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz926{}, expected)
	require.Equal(t, Fuzz926{}, actual)

	actual = Fuzz926{
		One: rando.String(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz927(t *testing.T) {
	var expected, actual Fuzz927
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz927{}, expected)
	require.Equal(t, Fuzz927{}, actual)

	actual = Fuzz927{
		One: rando.String(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz928(t *testing.T) {
	var expected, actual Fuzz928
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz928{}, expected)
	require.Equal(t, Fuzz928{}, actual)

	actual = Fuzz928{
		One: rando.Strings(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz929(t *testing.T) {
	var expected, actual Fuzz929
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz929{}, expected)
	require.Equal(t, Fuzz929{}, actual)

	actual = Fuzz929{
		One: rando.Strings(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz930(t *testing.T) {
	var expected, actual Fuzz930
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz930{}, expected)
	require.Equal(t, Fuzz930{}, actual)

	actual = Fuzz930{
		One: rando.Strings(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz931(t *testing.T) {
	var expected, actual Fuzz931
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz931{}, expected)
	require.Equal(t, Fuzz931{}, actual)

	actual = Fuzz931{
		One: rando.Strings(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz932(t *testing.T) {
	var expected, actual Fuzz932
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz932{}, expected)
	require.Equal(t, Fuzz932{}, actual)

	actual = Fuzz932{
		One: rando.Strings(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz933(t *testing.T) {
	var expected, actual Fuzz933
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz933{}, expected)
	require.Equal(t, Fuzz933{}, actual)

	actual = Fuzz933{
		One: rando.Strings(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz934(t *testing.T) {
	var expected, actual Fuzz934
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz934{}, expected)
	require.Equal(t, Fuzz934{}, actual)

	actual = Fuzz934{
		One: rando.Strings(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz935(t *testing.T) {
	var expected, actual Fuzz935
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz935{}, expected)
	require.Equal(t, Fuzz935{}, actual)

	actual = Fuzz935{
		One: rando.Strings(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz936(t *testing.T) {
	var expected, actual Fuzz936
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz936{}, expected)
	require.Equal(t, Fuzz936{}, actual)

	actual = Fuzz936{
		One: rando.Strings(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz937(t *testing.T) {
	var expected, actual Fuzz937
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz937{}, expected)
	require.Equal(t, Fuzz937{}, actual)

	actual = Fuzz937{
		One: rando.Strings(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz938(t *testing.T) {
	var expected, actual Fuzz938
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz938{}, expected)
	require.Equal(t, Fuzz938{}, actual)

	actual = Fuzz938{
		One: rando.Strings(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz939(t *testing.T) {
	var expected, actual Fuzz939
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz939{}, expected)
	require.Equal(t, Fuzz939{}, actual)

	actual = Fuzz939{
		One: rando.Strings(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz940(t *testing.T) {
	var expected, actual Fuzz940
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz940{}, expected)
	require.Equal(t, Fuzz940{}, actual)

	actual = Fuzz940{
		One: rando.Strings(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz941(t *testing.T) {
	var expected, actual Fuzz941
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz941{}, expected)
	require.Equal(t, Fuzz941{}, actual)

	actual = Fuzz941{
		One: rando.Strings(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz942(t *testing.T) {
	var expected, actual Fuzz942
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz942{}, expected)
	require.Equal(t, Fuzz942{}, actual)

	actual = Fuzz942{
		One: rando.Strings(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz943(t *testing.T) {
	var expected, actual Fuzz943
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz943{}, expected)
	require.Equal(t, Fuzz943{}, actual)

	actual = Fuzz943{
		One: rando.Strings(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz944(t *testing.T) {
	var expected, actual Fuzz944
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz944{}, expected)
	require.Equal(t, Fuzz944{}, actual)

	actual = Fuzz944{
		One: rando.Strings(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz945(t *testing.T) {
	var expected, actual Fuzz945
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz945{}, expected)
	require.Equal(t, Fuzz945{}, actual)

	actual = Fuzz945{
		One: rando.Strings(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz946(t *testing.T) {
	var expected, actual Fuzz946
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz946{}, expected)
	require.Equal(t, Fuzz946{}, actual)

	actual = Fuzz946{
		One: rando.Strings(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz947(t *testing.T) {
	var expected, actual Fuzz947
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz947{}, expected)
	require.Equal(t, Fuzz947{}, actual)

	actual = Fuzz947{
		One: rando.Strings(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz948(t *testing.T) {
	var expected, actual Fuzz948
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz948{}, expected)
	require.Equal(t, Fuzz948{}, actual)

	actual = Fuzz948{
		One: rando.Strings(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz949(t *testing.T) {
	var expected, actual Fuzz949
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz949{}, expected)
	require.Equal(t, Fuzz949{}, actual)

	actual = Fuzz949{
		One: rando.Strings(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz950(t *testing.T) {
	var expected, actual Fuzz950
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz950{}, expected)
	require.Equal(t, Fuzz950{}, actual)

	actual = Fuzz950{
		One: rando.Strings(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz951(t *testing.T) {
	var expected, actual Fuzz951
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz951{}, expected)
	require.Equal(t, Fuzz951{}, actual)

	actual = Fuzz951{
		One: rando.Strings(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz952(t *testing.T) {
	var expected, actual Fuzz952
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz952{}, expected)
	require.Equal(t, Fuzz952{}, actual)

	actual = Fuzz952{
		One: rando.Strings(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz953(t *testing.T) {
	var expected, actual Fuzz953
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz953{}, expected)
	require.Equal(t, Fuzz953{}, actual)

	actual = Fuzz953{
		One: rando.Strings(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz954(t *testing.T) {
	var expected, actual Fuzz954
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz954{}, expected)
	require.Equal(t, Fuzz954{}, actual)

	actual = Fuzz954{
		One: rando.Strings(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz955(t *testing.T) {
	var expected, actual Fuzz955
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz955{}, expected)
	require.Equal(t, Fuzz955{}, actual)

	actual = Fuzz955{
		One: rando.Strings(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz956(t *testing.T) {
	var expected, actual Fuzz956
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz956{}, expected)
	require.Equal(t, Fuzz956{}, actual)

	actual = Fuzz956{
		One: rando.Strings(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz957(t *testing.T) {
	var expected, actual Fuzz957
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz957{}, expected)
	require.Equal(t, Fuzz957{}, actual)

	actual = Fuzz957{
		One: rando.Strings(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz958(t *testing.T) {
	var expected, actual Fuzz958
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz958{}, expected)
	require.Equal(t, Fuzz958{}, actual)

	actual = Fuzz958{
		One: rando.Strings(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz959(t *testing.T) {
	var expected, actual Fuzz959
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz959{}, expected)
	require.Equal(t, Fuzz959{}, actual)

	actual = Fuzz959{
		One: rando.Strings(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz960(t *testing.T) {
	var expected, actual Fuzz960
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz960{}, expected)
	require.Equal(t, Fuzz960{}, actual)

	actual = Fuzz960{
		One: rando.Time(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz961(t *testing.T) {
	var expected, actual Fuzz961
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz961{}, expected)
	require.Equal(t, Fuzz961{}, actual)

	actual = Fuzz961{
		One: rando.Time(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz962(t *testing.T) {
	var expected, actual Fuzz962
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz962{}, expected)
	require.Equal(t, Fuzz962{}, actual)

	actual = Fuzz962{
		One: rando.Time(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz963(t *testing.T) {
	var expected, actual Fuzz963
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz963{}, expected)
	require.Equal(t, Fuzz963{}, actual)

	actual = Fuzz963{
		One: rando.Time(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz964(t *testing.T) {
	var expected, actual Fuzz964
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz964{}, expected)
	require.Equal(t, Fuzz964{}, actual)

	actual = Fuzz964{
		One: rando.Time(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz965(t *testing.T) {
	var expected, actual Fuzz965
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz965{}, expected)
	require.Equal(t, Fuzz965{}, actual)

	actual = Fuzz965{
		One: rando.Time(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz966(t *testing.T) {
	var expected, actual Fuzz966
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz966{}, expected)
	require.Equal(t, Fuzz966{}, actual)

	actual = Fuzz966{
		One: rando.Time(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz967(t *testing.T) {
	var expected, actual Fuzz967
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz967{}, expected)
	require.Equal(t, Fuzz967{}, actual)

	actual = Fuzz967{
		One: rando.Time(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz968(t *testing.T) {
	var expected, actual Fuzz968
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz968{}, expected)
	require.Equal(t, Fuzz968{}, actual)

	actual = Fuzz968{
		One: rando.Time(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz969(t *testing.T) {
	var expected, actual Fuzz969
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz969{}, expected)
	require.Equal(t, Fuzz969{}, actual)

	actual = Fuzz969{
		One: rando.Time(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz970(t *testing.T) {
	var expected, actual Fuzz970
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz970{}, expected)
	require.Equal(t, Fuzz970{}, actual)

	actual = Fuzz970{
		One: rando.Time(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz971(t *testing.T) {
	var expected, actual Fuzz971
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz971{}, expected)
	require.Equal(t, Fuzz971{}, actual)

	actual = Fuzz971{
		One: rando.Time(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz972(t *testing.T) {
	var expected, actual Fuzz972
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz972{}, expected)
	require.Equal(t, Fuzz972{}, actual)

	actual = Fuzz972{
		One: rando.Time(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz973(t *testing.T) {
	var expected, actual Fuzz973
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz973{}, expected)
	require.Equal(t, Fuzz973{}, actual)

	actual = Fuzz973{
		One: rando.Time(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz974(t *testing.T) {
	var expected, actual Fuzz974
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz974{}, expected)
	require.Equal(t, Fuzz974{}, actual)

	actual = Fuzz974{
		One: rando.Time(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz975(t *testing.T) {
	var expected, actual Fuzz975
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz975{}, expected)
	require.Equal(t, Fuzz975{}, actual)

	actual = Fuzz975{
		One: rando.Time(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz976(t *testing.T) {
	var expected, actual Fuzz976
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz976{}, expected)
	require.Equal(t, Fuzz976{}, actual)

	actual = Fuzz976{
		One: rando.Time(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz977(t *testing.T) {
	var expected, actual Fuzz977
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz977{}, expected)
	require.Equal(t, Fuzz977{}, actual)

	actual = Fuzz977{
		One: rando.Time(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz978(t *testing.T) {
	var expected, actual Fuzz978
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz978{}, expected)
	require.Equal(t, Fuzz978{}, actual)

	actual = Fuzz978{
		One: rando.Time(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz979(t *testing.T) {
	var expected, actual Fuzz979
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz979{}, expected)
	require.Equal(t, Fuzz979{}, actual)

	actual = Fuzz979{
		One: rando.Time(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz980(t *testing.T) {
	var expected, actual Fuzz980
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz980{}, expected)
	require.Equal(t, Fuzz980{}, actual)

	actual = Fuzz980{
		One: rando.Time(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz981(t *testing.T) {
	var expected, actual Fuzz981
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz981{}, expected)
	require.Equal(t, Fuzz981{}, actual)

	actual = Fuzz981{
		One: rando.Time(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz982(t *testing.T) {
	var expected, actual Fuzz982
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz982{}, expected)
	require.Equal(t, Fuzz982{}, actual)

	actual = Fuzz982{
		One: rando.Time(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz983(t *testing.T) {
	var expected, actual Fuzz983
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz983{}, expected)
	require.Equal(t, Fuzz983{}, actual)

	actual = Fuzz983{
		One: rando.Time(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz984(t *testing.T) {
	var expected, actual Fuzz984
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz984{}, expected)
	require.Equal(t, Fuzz984{}, actual)

	actual = Fuzz984{
		One: rando.Time(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz985(t *testing.T) {
	var expected, actual Fuzz985
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz985{}, expected)
	require.Equal(t, Fuzz985{}, actual)

	actual = Fuzz985{
		One: rando.Time(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz986(t *testing.T) {
	var expected, actual Fuzz986
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz986{}, expected)
	require.Equal(t, Fuzz986{}, actual)

	actual = Fuzz986{
		One: rando.Time(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz987(t *testing.T) {
	var expected, actual Fuzz987
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz987{}, expected)
	require.Equal(t, Fuzz987{}, actual)

	actual = Fuzz987{
		One: rando.Time(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz988(t *testing.T) {
	var expected, actual Fuzz988
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz988{}, expected)
	require.Equal(t, Fuzz988{}, actual)

	actual = Fuzz988{
		One: rando.Time(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz989(t *testing.T) {
	var expected, actual Fuzz989
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz989{}, expected)
	require.Equal(t, Fuzz989{}, actual)

	actual = Fuzz989{
		One: rando.Time(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz990(t *testing.T) {
	var expected, actual Fuzz990
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz990{}, expected)
	require.Equal(t, Fuzz990{}, actual)

	actual = Fuzz990{
		One: rando.Time(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz991(t *testing.T) {
	var expected, actual Fuzz991
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz991{}, expected)
	require.Equal(t, Fuzz991{}, actual)

	actual = Fuzz991{
		One: rando.Time(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz992(t *testing.T) {
	var expected, actual Fuzz992
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz992{}, expected)
	require.Equal(t, Fuzz992{}, actual)

	actual = Fuzz992{
		One: rando.Duration(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz993(t *testing.T) {
	var expected, actual Fuzz993
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz993{}, expected)
	require.Equal(t, Fuzz993{}, actual)

	actual = Fuzz993{
		One: rando.Duration(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz994(t *testing.T) {
	var expected, actual Fuzz994
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz994{}, expected)
	require.Equal(t, Fuzz994{}, actual)

	actual = Fuzz994{
		One: rando.Duration(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz995(t *testing.T) {
	var expected, actual Fuzz995
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz995{}, expected)
	require.Equal(t, Fuzz995{}, actual)

	actual = Fuzz995{
		One: rando.Duration(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz996(t *testing.T) {
	var expected, actual Fuzz996
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz996{}, expected)
	require.Equal(t, Fuzz996{}, actual)

	actual = Fuzz996{
		One: rando.Duration(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz997(t *testing.T) {
	var expected, actual Fuzz997
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz997{}, expected)
	require.Equal(t, Fuzz997{}, actual)

	actual = Fuzz997{
		One: rando.Duration(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz998(t *testing.T) {
	var expected, actual Fuzz998
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz998{}, expected)
	require.Equal(t, Fuzz998{}, actual)

	actual = Fuzz998{
		One: rando.Duration(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz999(t *testing.T) {
	var expected, actual Fuzz999
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz999{}, expected)
	require.Equal(t, Fuzz999{}, actual)

	actual = Fuzz999{
		One: rando.Duration(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1000(t *testing.T) {
	var expected, actual Fuzz1000
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1000{}, expected)
	require.Equal(t, Fuzz1000{}, actual)

	actual = Fuzz1000{
		One: rando.Duration(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1001(t *testing.T) {
	var expected, actual Fuzz1001
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1001{}, expected)
	require.Equal(t, Fuzz1001{}, actual)

	actual = Fuzz1001{
		One: rando.Duration(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1002(t *testing.T) {
	var expected, actual Fuzz1002
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1002{}, expected)
	require.Equal(t, Fuzz1002{}, actual)

	actual = Fuzz1002{
		One: rando.Duration(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1003(t *testing.T) {
	var expected, actual Fuzz1003
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1003{}, expected)
	require.Equal(t, Fuzz1003{}, actual)

	actual = Fuzz1003{
		One: rando.Duration(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1004(t *testing.T) {
	var expected, actual Fuzz1004
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1004{}, expected)
	require.Equal(t, Fuzz1004{}, actual)

	actual = Fuzz1004{
		One: rando.Duration(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1005(t *testing.T) {
	var expected, actual Fuzz1005
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1005{}, expected)
	require.Equal(t, Fuzz1005{}, actual)

	actual = Fuzz1005{
		One: rando.Duration(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1006(t *testing.T) {
	var expected, actual Fuzz1006
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1006{}, expected)
	require.Equal(t, Fuzz1006{}, actual)

	actual = Fuzz1006{
		One: rando.Duration(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1007(t *testing.T) {
	var expected, actual Fuzz1007
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1007{}, expected)
	require.Equal(t, Fuzz1007{}, actual)

	actual = Fuzz1007{
		One: rando.Duration(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1008(t *testing.T) {
	var expected, actual Fuzz1008
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1008{}, expected)
	require.Equal(t, Fuzz1008{}, actual)

	actual = Fuzz1008{
		One: rando.Duration(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1009(t *testing.T) {
	var expected, actual Fuzz1009
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1009{}, expected)
	require.Equal(t, Fuzz1009{}, actual)

	actual = Fuzz1009{
		One: rando.Duration(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1010(t *testing.T) {
	var expected, actual Fuzz1010
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1010{}, expected)
	require.Equal(t, Fuzz1010{}, actual)

	actual = Fuzz1010{
		One: rando.Duration(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1011(t *testing.T) {
	var expected, actual Fuzz1011
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1011{}, expected)
	require.Equal(t, Fuzz1011{}, actual)

	actual = Fuzz1011{
		One: rando.Duration(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1012(t *testing.T) {
	var expected, actual Fuzz1012
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1012{}, expected)
	require.Equal(t, Fuzz1012{}, actual)

	actual = Fuzz1012{
		One: rando.Duration(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1013(t *testing.T) {
	var expected, actual Fuzz1013
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1013{}, expected)
	require.Equal(t, Fuzz1013{}, actual)

	actual = Fuzz1013{
		One: rando.Duration(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1014(t *testing.T) {
	var expected, actual Fuzz1014
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1014{}, expected)
	require.Equal(t, Fuzz1014{}, actual)

	actual = Fuzz1014{
		One: rando.Duration(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1015(t *testing.T) {
	var expected, actual Fuzz1015
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1015{}, expected)
	require.Equal(t, Fuzz1015{}, actual)

	actual = Fuzz1015{
		One: rando.Duration(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1016(t *testing.T) {
	var expected, actual Fuzz1016
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1016{}, expected)
	require.Equal(t, Fuzz1016{}, actual)

	actual = Fuzz1016{
		One: rando.Duration(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1017(t *testing.T) {
	var expected, actual Fuzz1017
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1017{}, expected)
	require.Equal(t, Fuzz1017{}, actual)

	actual = Fuzz1017{
		One: rando.Duration(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1018(t *testing.T) {
	var expected, actual Fuzz1018
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1018{}, expected)
	require.Equal(t, Fuzz1018{}, actual)

	actual = Fuzz1018{
		One: rando.Duration(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1019(t *testing.T) {
	var expected, actual Fuzz1019
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1019{}, expected)
	require.Equal(t, Fuzz1019{}, actual)

	actual = Fuzz1019{
		One: rando.Duration(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1020(t *testing.T) {
	var expected, actual Fuzz1020
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1020{}, expected)
	require.Equal(t, Fuzz1020{}, actual)

	actual = Fuzz1020{
		One: rando.Duration(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1021(t *testing.T) {
	var expected, actual Fuzz1021
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1021{}, expected)
	require.Equal(t, Fuzz1021{}, actual)

	actual = Fuzz1021{
		One: rando.Duration(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1022(t *testing.T) {
	var expected, actual Fuzz1022
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1022{}, expected)
	require.Equal(t, Fuzz1022{}, actual)

	actual = Fuzz1022{
		One: rando.Duration(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1023(t *testing.T) {
	var expected, actual Fuzz1023
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1023{}, expected)
	require.Equal(t, Fuzz1023{}, actual)

	actual = Fuzz1023{
		One: rando.Duration(),
		Two: rando.Durations(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1024(t *testing.T) {
	var expected, actual Fuzz1024
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1024{}, expected)
	require.Equal(t, Fuzz1024{}, actual)

	actual = Fuzz1024{
		One: rando.Durations(),
		Two: rando.Bool(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1025(t *testing.T) {
	var expected, actual Fuzz1025
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1025{}, expected)
	require.Equal(t, Fuzz1025{}, actual)

	actual = Fuzz1025{
		One: rando.Durations(),
		Two: rando.Bools(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1026(t *testing.T) {
	var expected, actual Fuzz1026
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1026{}, expected)
	require.Equal(t, Fuzz1026{}, actual)

	actual = Fuzz1026{
		One: rando.Durations(),
		Two: rando.Byte(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1027(t *testing.T) {
	var expected, actual Fuzz1027
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1027{}, expected)
	require.Equal(t, Fuzz1027{}, actual)

	actual = Fuzz1027{
		One: rando.Durations(),
		Two: rando.Bytes(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1028(t *testing.T) {
	var expected, actual Fuzz1028
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1028{}, expected)
	require.Equal(t, Fuzz1028{}, actual)

	actual = Fuzz1028{
		One: rando.Durations(),
		Two: rando.Float32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1029(t *testing.T) {
	var expected, actual Fuzz1029
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1029{}, expected)
	require.Equal(t, Fuzz1029{}, actual)

	actual = Fuzz1029{
		One: rando.Durations(),
		Two: rando.Float32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1030(t *testing.T) {
	var expected, actual Fuzz1030
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1030{}, expected)
	require.Equal(t, Fuzz1030{}, actual)

	actual = Fuzz1030{
		One: rando.Durations(),
		Two: rando.Float64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1031(t *testing.T) {
	var expected, actual Fuzz1031
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1031{}, expected)
	require.Equal(t, Fuzz1031{}, actual)

	actual = Fuzz1031{
		One: rando.Durations(),
		Two: rando.Float64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1032(t *testing.T) {
	var expected, actual Fuzz1032
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1032{}, expected)
	require.Equal(t, Fuzz1032{}, actual)

	actual = Fuzz1032{
		One: rando.Durations(),
		Two: rando.Int(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1033(t *testing.T) {
	var expected, actual Fuzz1033
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1033{}, expected)
	require.Equal(t, Fuzz1033{}, actual)

	actual = Fuzz1033{
		One: rando.Durations(),
		Two: rando.Int8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1034(t *testing.T) {
	var expected, actual Fuzz1034
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1034{}, expected)
	require.Equal(t, Fuzz1034{}, actual)

	actual = Fuzz1034{
		One: rando.Durations(),
		Two: rando.Int16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1035(t *testing.T) {
	var expected, actual Fuzz1035
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1035{}, expected)
	require.Equal(t, Fuzz1035{}, actual)

	actual = Fuzz1035{
		One: rando.Durations(),
		Two: rando.Int32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1036(t *testing.T) {
	var expected, actual Fuzz1036
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1036{}, expected)
	require.Equal(t, Fuzz1036{}, actual)

	actual = Fuzz1036{
		One: rando.Durations(),
		Two: rando.Rune(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1037(t *testing.T) {
	var expected, actual Fuzz1037
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1037{}, expected)
	require.Equal(t, Fuzz1037{}, actual)

	actual = Fuzz1037{
		One: rando.Durations(),
		Two: rando.Int64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1038(t *testing.T) {
	var expected, actual Fuzz1038
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1038{}, expected)
	require.Equal(t, Fuzz1038{}, actual)

	actual = Fuzz1038{
		One: rando.Durations(),
		Two: rando.Ints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1039(t *testing.T) {
	var expected, actual Fuzz1039
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1039{}, expected)
	require.Equal(t, Fuzz1039{}, actual)

	actual = Fuzz1039{
		One: rando.Durations(),
		Two: rando.Int8s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1040(t *testing.T) {
	var expected, actual Fuzz1040
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1040{}, expected)
	require.Equal(t, Fuzz1040{}, actual)

	actual = Fuzz1040{
		One: rando.Durations(),
		Two: rando.Int16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1041(t *testing.T) {
	var expected, actual Fuzz1041
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1041{}, expected)
	require.Equal(t, Fuzz1041{}, actual)

	actual = Fuzz1041{
		One: rando.Durations(),
		Two: rando.Int32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1042(t *testing.T) {
	var expected, actual Fuzz1042
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1042{}, expected)
	require.Equal(t, Fuzz1042{}, actual)

	actual = Fuzz1042{
		One: rando.Durations(),
		Two: rando.Int64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1043(t *testing.T) {
	var expected, actual Fuzz1043
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1043{}, expected)
	require.Equal(t, Fuzz1043{}, actual)

	actual = Fuzz1043{
		One: rando.Durations(),
		Two: rando.Uint(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1044(t *testing.T) {
	var expected, actual Fuzz1044
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1044{}, expected)
	require.Equal(t, Fuzz1044{}, actual)

	actual = Fuzz1044{
		One: rando.Durations(),
		Two: rando.Uint8(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1045(t *testing.T) {
	var expected, actual Fuzz1045
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1045{}, expected)
	require.Equal(t, Fuzz1045{}, actual)

	actual = Fuzz1045{
		One: rando.Durations(),
		Two: rando.Uint16(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1046(t *testing.T) {
	var expected, actual Fuzz1046
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1046{}, expected)
	require.Equal(t, Fuzz1046{}, actual)

	actual = Fuzz1046{
		One: rando.Durations(),
		Two: rando.Uint32(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1047(t *testing.T) {
	var expected, actual Fuzz1047
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1047{}, expected)
	require.Equal(t, Fuzz1047{}, actual)

	actual = Fuzz1047{
		One: rando.Durations(),
		Two: rando.Uint64(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1048(t *testing.T) {
	var expected, actual Fuzz1048
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1048{}, expected)
	require.Equal(t, Fuzz1048{}, actual)

	actual = Fuzz1048{
		One: rando.Durations(),
		Two: rando.Uints(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1049(t *testing.T) {
	var expected, actual Fuzz1049
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1049{}, expected)
	require.Equal(t, Fuzz1049{}, actual)

	actual = Fuzz1049{
		One: rando.Durations(),
		Two: rando.Uint16s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1050(t *testing.T) {
	var expected, actual Fuzz1050
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1050{}, expected)
	require.Equal(t, Fuzz1050{}, actual)

	actual = Fuzz1050{
		One: rando.Durations(),
		Two: rando.Uint32s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1051(t *testing.T) {
	var expected, actual Fuzz1051
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1051{}, expected)
	require.Equal(t, Fuzz1051{}, actual)

	actual = Fuzz1051{
		One: rando.Durations(),
		Two: rando.Uint64s(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1052(t *testing.T) {
	var expected, actual Fuzz1052
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1052{}, expected)
	require.Equal(t, Fuzz1052{}, actual)

	actual = Fuzz1052{
		One: rando.Durations(),
		Two: rando.String(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1053(t *testing.T) {
	var expected, actual Fuzz1053
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1053{}, expected)
	require.Equal(t, Fuzz1053{}, actual)

	actual = Fuzz1053{
		One: rando.Durations(),
		Two: rando.Strings(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1054(t *testing.T) {
	var expected, actual Fuzz1054
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1054{}, expected)
	require.Equal(t, Fuzz1054{}, actual)

	actual = Fuzz1054{
		One: rando.Durations(),
		Two: rando.Time(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}

func TestFuzz1055(t *testing.T) {
	var expected, actual Fuzz1055
	require.NoError(t, expected.UnmarshalJ(actual.MarshalJ()))
	require.Equal(t, expected, actual)
	require.Equal(t, Fuzz1055{}, expected)
	require.Equal(t, Fuzz1055{}, actual)

	actual = Fuzz1055{
		One: rando.Durations(),
		Two: rando.Duration(),
	}
	src := actual.MarshalJ()
	require.NoError(t, expected.UnmarshalJ(src))
	require.Equal(t, expected, actual)
}
*/
